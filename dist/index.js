class t{constructor(t=0,F=0,l=0){this.x=t,this.y=F,this.z=l}equals(t){return this.x===t.x&&(this.y===t.y&&this.z===t.z)}add(F){return"number"==typeof F?new t(this.x+F,this.y+F,this.z+F):new t(this.x+F.x,this.y+F.y,this.z+F.z)}subtract(F){return"number"==typeof F?new t(this.x-F,this.y-F,this.z-F):new t(this.x-F.x,this.y-F.y,this.z-F.z)}multiply(F){return"number"==typeof F?new t(this.x*F,this.y*F,this.z*F):F instanceof t?new t(this.x*F.x,this.y*F.y,this.z*F.z):new t(this.x*F.buffer[0]+this.y*F.buffer[4]+this.z*F.buffer[8]+F.buffer[12],this.x*F.buffer[1]+this.y*F.buffer[5]+this.z*F.buffer[9]+F.buffer[13],this.x*F.buffer[2]+this.y*F.buffer[6]+this.z*F.buffer[10]+F.buffer[14])}divide(F){return"number"==typeof F?new t(this.x/F,this.y/F,this.z/F):new t(this.x/F.x,this.y/F.y,this.z/F.z)}cross(F){const l=this.y*F.z-this.z*F.y,U=this.z*F.x-this.x*F.z,n=this.x*F.y-this.y*F.x;return new t(l,U,n)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lerp(F,l){return new t(this.x+(F.x-this.x)*l,this.y+(F.y-this.y)*l,this.z+(F.z-this.z)*l)}min(F){return new t(Math.min(this.x,F.x),Math.min(this.y,F.y),Math.min(this.z,F.z))}max(F){return new t(Math.max(this.x,F.x),Math.max(this.y,F.y),Math.max(this.z,F.z))}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${t}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2)}normalize(){const F=this.magnitude();return new t(this.x/F,this.y/F,this.z/F)}flat(){return[this.x,this.y,this.z]}clone(){return new t(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(F=1){return new t(F,F,F)}}class F{constructor(t=0,F=0,l=0,U=1){this.x=t,this.y=F,this.z=l,this.w=U}equals(t){return this.x===t.x&&(this.y===t.y&&(this.z===t.z&&this.w===t.w))}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new F(this.x/t,this.y/t,this.z/t,this.w/t)}multiply(t){const l=this.w,U=this.x,n=this.y,e=this.z,Q=t.w,d=t.x,A=t.y,B=t.z;return new F(l*d+U*Q+n*B-e*A,l*A-U*B+n*Q+e*d,l*B+U*A-n*d+e*Q,l*Q-U*d-n*A-e*B)}inverse(){const t=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new F(-this.x/t,-this.y/t,-this.z/t,this.w/t)}apply(l){const U=new F(l.x,l.y,l.z,0),n=new F(-this.x,-this.y,-this.z,this.w),e=this.multiply(U).multiply(n);return new t(e.x,e.y,e.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new F(this.x,this.y,this.z,this.w)}static FromEuler(t){const l=t.x/2,U=t.y/2,n=t.z/2,e=Math.cos(U),Q=Math.sin(U),d=Math.cos(l),A=Math.sin(l),B=Math.cos(n),V=Math.sin(n);return new F(e*A*B+Q*d*V,Q*d*B-e*A*V,e*d*V-Q*A*B,e*d*B+Q*A*V)}toEuler(){const F=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),U=Math.atan2(F,l);let n;const e=2*(this.w*this.y-this.z*this.x);n=Math.abs(e)>=1?Math.sign(e)*Math.PI/2:Math.asin(e);const Q=2*(this.w*this.z+this.x*this.y),d=1-2*(this.y*this.y+this.z*this.z),A=Math.atan2(Q,d);return new t(U,n,A)}static FromMatrix3(t){const l=t.buffer,U=l[0]+l[4]+l[8];let n,e,Q,d;if(U>0){const t=.5/Math.sqrt(U+1);d=.25/t,n=(l[7]-l[5])*t,e=(l[2]-l[6])*t,Q=(l[3]-l[1])*t}else if(l[0]>l[4]&&l[0]>l[8]){const t=2*Math.sqrt(1+l[0]-l[4]-l[8]);d=(l[7]-l[5])/t,n=.25*t,e=(l[1]+l[3])/t,Q=(l[2]+l[6])/t}else if(l[4]>l[8]){const t=2*Math.sqrt(1+l[4]-l[0]-l[8]);d=(l[2]-l[6])/t,n=(l[1]+l[3])/t,e=.25*t,Q=(l[5]+l[7])/t}else{const t=2*Math.sqrt(1+l[8]-l[0]-l[4]);d=(l[3]-l[1])/t,n=(l[2]+l[6])/t,e=(l[5]+l[7])/t,Q=.25*t}return new F(n,e,Q,d)}static FromAxisAngle(t,l){const U=l/2,n=Math.sin(U),e=Math.cos(U);return new F(t.x*n,t.y*n,t.z*n,e)}static LookRotation(l){const U=new t(0,0,1),n=U.dot(l);if(Math.abs(n- -1)<1e-6)return new F(0,1,0,Math.PI);if(Math.abs(n-1)<1e-6)return new F;const e=Math.acos(n),Q=U.cross(l).normalize();return F.FromAxisAngle(Q,e)}toString(){return`[${this.flat().join(", ")}]`}}class l{constructor(){const t=new Map;this.addEventListener=(F,l)=>{t.has(F)||t.set(F,new Set),t.get(F).add(l)},this.removeEventListener=(F,l)=>{t.has(F)&&t.get(F).delete(l)},this.hasEventListener=(F,l)=>!!t.has(F)&&t.get(F).has(l),this.dispatchEvent=F=>{if(t.has(F.type))for(const l of t.get(F.type))l(F)}}}class U{constructor(t=1,F=0,l=0,U=0,n=0,e=1,Q=0,d=0,A=0,B=0,V=1,a=0,i=0,Z=0,R=0,s=1){this.buffer=[t,F,l,U,n,e,Q,d,A,B,V,a,i,Z,R,s]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==t.buffer[F])return!1;return!0}multiply(t){const F=this.buffer,l=t.buffer;return new U(l[0]*F[0]+l[1]*F[4]+l[2]*F[8]+l[3]*F[12],l[0]*F[1]+l[1]*F[5]+l[2]*F[9]+l[3]*F[13],l[0]*F[2]+l[1]*F[6]+l[2]*F[10]+l[3]*F[14],l[0]*F[3]+l[1]*F[7]+l[2]*F[11]+l[3]*F[15],l[4]*F[0]+l[5]*F[4]+l[6]*F[8]+l[7]*F[12],l[4]*F[1]+l[5]*F[5]+l[6]*F[9]+l[7]*F[13],l[4]*F[2]+l[5]*F[6]+l[6]*F[10]+l[7]*F[14],l[4]*F[3]+l[5]*F[7]+l[6]*F[11]+l[7]*F[15],l[8]*F[0]+l[9]*F[4]+l[10]*F[8]+l[11]*F[12],l[8]*F[1]+l[9]*F[5]+l[10]*F[9]+l[11]*F[13],l[8]*F[2]+l[9]*F[6]+l[10]*F[10]+l[11]*F[14],l[8]*F[3]+l[9]*F[7]+l[10]*F[11]+l[11]*F[15],l[12]*F[0]+l[13]*F[4]+l[14]*F[8]+l[15]*F[12],l[12]*F[1]+l[13]*F[5]+l[14]*F[9]+l[15]*F[13],l[12]*F[2]+l[13]*F[6]+l[14]*F[10]+l[15]*F[14],l[12]*F[3]+l[13]*F[7]+l[14]*F[11]+l[15]*F[15])}clone(){const t=this.buffer;return new U(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}determinant(){const t=this.buffer;return t[12]*t[9]*t[6]*t[3]-t[8]*t[13]*t[6]*t[3]-t[12]*t[5]*t[10]*t[3]+t[4]*t[13]*t[10]*t[3]+t[8]*t[5]*t[14]*t[3]-t[4]*t[9]*t[14]*t[3]-t[12]*t[9]*t[2]*t[7]+t[8]*t[13]*t[2]*t[7]+t[12]*t[1]*t[10]*t[7]-t[0]*t[13]*t[10]*t[7]-t[8]*t[1]*t[14]*t[7]+t[0]*t[9]*t[14]*t[7]+t[12]*t[5]*t[2]*t[11]-t[4]*t[13]*t[2]*t[11]-t[12]*t[1]*t[6]*t[11]+t[0]*t[13]*t[6]*t[11]+t[4]*t[1]*t[14]*t[11]-t[0]*t[5]*t[14]*t[11]-t[8]*t[5]*t[2]*t[15]+t[4]*t[9]*t[2]*t[15]+t[8]*t[1]*t[6]*t[15]-t[0]*t[9]*t[6]*t[15]-t[4]*t[1]*t[10]*t[15]+t[0]*t[5]*t[10]*t[15]}invert(){const t=this.buffer,F=this.determinant();if(0===F)throw new Error("Matrix is not invertible.");const l=1/F;return new U(l*(t[5]*t[10]*t[15]-t[5]*t[11]*t[14]-t[9]*t[6]*t[15]+t[9]*t[7]*t[14]+t[13]*t[6]*t[11]-t[13]*t[7]*t[10]),l*(-t[1]*t[10]*t[15]+t[1]*t[11]*t[14]+t[9]*t[2]*t[15]-t[9]*t[3]*t[14]-t[13]*t[2]*t[11]+t[13]*t[3]*t[10]),l*(t[1]*t[6]*t[15]-t[1]*t[7]*t[14]-t[5]*t[2]*t[15]+t[5]*t[3]*t[14]+t[13]*t[2]*t[7]-t[13]*t[3]*t[6]),l*(-t[1]*t[6]*t[11]+t[1]*t[7]*t[10]+t[5]*t[2]*t[11]-t[5]*t[3]*t[10]-t[9]*t[2]*t[7]+t[9]*t[3]*t[6]),l*(-t[4]*t[10]*t[15]+t[4]*t[11]*t[14]+t[8]*t[6]*t[15]-t[8]*t[7]*t[14]-t[12]*t[6]*t[11]+t[12]*t[7]*t[10]),l*(t[0]*t[10]*t[15]-t[0]*t[11]*t[14]-t[8]*t[2]*t[15]+t[8]*t[3]*t[14]+t[12]*t[2]*t[11]-t[12]*t[3]*t[10]),l*(-t[0]*t[6]*t[15]+t[0]*t[7]*t[14]+t[4]*t[2]*t[15]-t[4]*t[3]*t[14]-t[12]*t[2]*t[7]+t[12]*t[3]*t[6]),l*(t[0]*t[6]*t[11]-t[0]*t[7]*t[10]-t[4]*t[2]*t[11]+t[4]*t[3]*t[10]+t[8]*t[2]*t[7]-t[8]*t[3]*t[6]),l*(t[4]*t[9]*t[15]-t[4]*t[11]*t[13]-t[8]*t[5]*t[15]+t[8]*t[7]*t[13]+t[12]*t[5]*t[11]-t[12]*t[7]*t[9]),l*(-t[0]*t[9]*t[15]+t[0]*t[11]*t[13]+t[8]*t[1]*t[15]-t[8]*t[3]*t[13]-t[12]*t[1]*t[11]+t[12]*t[3]*t[9]),l*(t[0]*t[5]*t[15]-t[0]*t[7]*t[13]-t[4]*t[1]*t[15]+t[4]*t[3]*t[13]+t[12]*t[1]*t[7]-t[12]*t[3]*t[5]),l*(-t[0]*t[5]*t[11]+t[0]*t[7]*t[9]+t[4]*t[1]*t[11]-t[4]*t[3]*t[9]-t[8]*t[1]*t[7]+t[8]*t[3]*t[5]),l*(-t[4]*t[9]*t[14]+t[4]*t[10]*t[13]+t[8]*t[5]*t[14]-t[8]*t[6]*t[13]-t[12]*t[5]*t[10]+t[12]*t[6]*t[9]),l*(t[0]*t[9]*t[14]-t[0]*t[10]*t[13]-t[8]*t[1]*t[14]+t[8]*t[2]*t[13]+t[12]*t[1]*t[10]-t[12]*t[2]*t[9]),l*(-t[0]*t[5]*t[14]+t[0]*t[6]*t[13]+t[4]*t[1]*t[14]-t[4]*t[2]*t[13]-t[12]*t[1]*t[6]+t[12]*t[2]*t[5]),l*(t[0]*t[5]*t[10]-t[0]*t[6]*t[9]-t[4]*t[1]*t[10]+t[4]*t[2]*t[9]+t[8]*t[1]*t[6]-t[8]*t[2]*t[5]))}static Compose(t,F,l){const n=F.x,e=F.y,Q=F.z,d=F.w,A=n+n,B=e+e,V=Q+Q,a=n*A,i=n*B,Z=n*V,R=e*B,s=e*V,c=Q*V,o=d*A,r=d*B,h=d*V,W=l.x,I=l.y,m=l.z;return new U((1-(R+c))*W,(i+h)*W,(Z-r)*W,0,(i-h)*I,(1-(a+c))*I,(s+o)*I,0,(Z+r)*m,(s-o)*m,(1-(a+R))*m,0,t.x,t.y,t.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class n extends Event{constructor(t){super("objectAdded"),this.object=t}}class e extends Event{constructor(t){super("objectRemoved"),this.object=t}}class Q extends Event{constructor(t){super("objectChanged"),this.object=t}}class d extends l{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new t,this._rotation=new F,this._scale=new t(1,1,1),this._transform=new U,this._changeEvent=new Q(this),this.update=()=>{},this.applyPosition=()=>{this.position=new t},this.applyRotation=()=>{this.rotation=new F},this.applyScale=()=>{this.scale=new t(1,1,1)},this.raiseChangeEvent=()=>{this.dispatchEvent(this._changeEvent)}}_updateMatrix(){this._transform=U.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(t){this._position.equals(t)||(this._position=t,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(t){this._rotation.equals(t)||(this._rotation=t,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(t){this._scale.equals(t)||(this._scale=t,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let F=new t(0,0,1);return F=this.rotation.apply(F),F}get transform(){return this._transform}}class A{constructor(t=1,F=0,l=0,U=0,n=1,e=0,Q=0,d=0,A=1){this.buffer=[t,F,l,U,n,e,Q,d,A]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==t.buffer[F])return!1;return!0}multiply(t){const F=this.buffer,l=t.buffer;return new A(l[0]*F[0]+l[3]*F[1]+l[6]*F[2],l[1]*F[0]+l[4]*F[1]+l[7]*F[2],l[2]*F[0]+l[5]*F[1]+l[8]*F[2],l[0]*F[3]+l[3]*F[4]+l[6]*F[5],l[1]*F[3]+l[4]*F[4]+l[7]*F[5],l[2]*F[3]+l[5]*F[4]+l[8]*F[5],l[0]*F[6]+l[3]*F[7]+l[6]*F[8],l[1]*F[6]+l[4]*F[7]+l[7]*F[8],l[2]*F[6]+l[5]*F[7]+l[8]*F[8])}clone(){const t=this.buffer;return new A(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}static Eye(t=1){return new A(t,0,0,0,t,0,0,0,t)}static Diagonal(t){return new A(t.x,0,0,0,t.y,0,0,0,t.z)}static RotationFromQuaternion(t){return new A(1-2*t.y*t.y-2*t.z*t.z,2*t.x*t.y-2*t.z*t.w,2*t.x*t.z+2*t.y*t.w,2*t.x*t.y+2*t.z*t.w,1-2*t.x*t.x-2*t.z*t.z,2*t.y*t.z-2*t.x*t.w,2*t.x*t.z-2*t.y*t.w,2*t.y*t.z+2*t.x*t.w,1-2*t.x*t.x-2*t.y*t.y)}static RotationFromEuler(t){const F=Math.cos(t.x),l=Math.sin(t.x),U=Math.cos(t.y),n=Math.sin(t.y),e=Math.cos(t.z),Q=Math.sin(t.z);return new A(...[U*e+n*l*Q,-U*Q+n*l*e,n*F,F*Q,F*e,-l,-n*e+U*l*Q,n*Q+U*l*e,U*F])}toString(){return`[${this.buffer.join(", ")}]`}}class B{constructor(t=0,l=null,U=null,n=null,e=null){this.changed=!1,this.detached=!1,this._vertexCount=t,this._positions=l||new Float32Array(0),this._rotations=U||new Float32Array(0),this._scales=n||new Float32Array(0),this._colors=e||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=t=>{for(let F=0;F<this.vertexCount;F++)this.positions[3*F+0]+=t.x,this.positions[3*F+1]+=t.y,this.positions[3*F+2]+=t.z;this.changed=!0},this.removeVertex=t=>{if(t<0||t>=this._vertexCount)throw new Error("Index out od bounds");this._positions=this.removeItemsFromArray(this._positions,3*t,3),this._rotations=this.removeItemsFromArray(this._rotations,4*t,4),this._scales=this.removeItemsFromArray(this._scales,3*t,3),this._colors=this.removeItemsFromArray(this._colors,4*t,4),this._vertexCount--,this.changed=!0},this.removeVertexRange=(t,F)=>{if(t<0||t+F>this._vertexCount)throw new Error("Index range out of bounds");this._positions=this.removeItemsFromArray(this._positions,3*t,3*F),this._rotations=this.removeItemsFromArray(this._rotations,4*t,4*F),this._scales=this.removeItemsFromArray(this._scales,3*t,3*F),this._colors=this.removeItemsFromArray(this._colors,4*t,4*F),this._vertexCount-=F,this.changed=!0},this.removeItemsFromArray=(t,F,l)=>{let U=t.subarray(0,F),n=t.subarray(F+l,t.length),e=new t.constructor(U.length+n.length);return e.set(U,0),e.set(n,U.length),e},this.rotate=t=>{const l=A.RotationFromQuaternion(t).buffer;for(let U=0;U<this.vertexCount;U++){const n=this.positions[3*U+0],e=this.positions[3*U+1],Q=this.positions[3*U+2];this.positions[3*U+0]=l[0]*n+l[1]*e+l[2]*Q,this.positions[3*U+1]=l[3]*n+l[4]*e+l[5]*Q,this.positions[3*U+2]=l[6]*n+l[7]*e+l[8]*Q;const d=new F(this.rotations[4*U+1],this.rotations[4*U+2],this.rotations[4*U+3],this.rotations[4*U+0]),A=t.multiply(d);this.rotations[4*U+1]=A.x,this.rotations[4*U+2]=A.y,this.rotations[4*U+3]=A.z,this.rotations[4*U+0]=A.w}this.changed=!0},this.scale=t=>{for(let F=0;F<this.vertexCount;F++)this.positions[3*F+0]*=t.x,this.positions[3*F+1]*=t.y,this.positions[3*F+2]*=t.z,this.scales[3*F+0]*=t.x,this.scales[3*F+1]*=t.y,this.scales[3*F+2]*=t.z;this.changed=!0},this.serialize=()=>{const t=new Uint8Array(this.vertexCount*B.RowLength),F=new Float32Array(t.buffer),l=new Uint8Array(t.buffer);for(let t=0;t<this.vertexCount;t++)F[8*t+0]=this.positions[3*t+0],F[8*t+1]=this.positions[3*t+1],F[8*t+2]=this.positions[3*t+2],l[32*t+24+0]=this.colors[4*t+0],l[32*t+24+1]=this.colors[4*t+1],l[32*t+24+2]=this.colors[4*t+2],l[32*t+24+3]=this.colors[4*t+3],F[8*t+3+0]=this.scales[3*t+0],F[8*t+3+1]=this.scales[3*t+1],F[8*t+3+2]=this.scales[3*t+2],l[32*t+28+0]=128*this.rotations[4*t+0]+128&255,l[32*t+28+1]=128*this.rotations[4*t+1]+128&255,l[32*t+28+2]=128*this.rotations[4*t+2]+128&255,l[32*t+28+3]=128*this.rotations[4*t+3]+128&255;return t},this.reattach=(t,F,l,U,n)=>{console.assert(t.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${t.byteLength} bytes`),this._positions=new Float32Array(t),this._rotations=new Float32Array(F),this._scales=new Float32Array(l),this._colors=new Uint8Array(U),this._selection=new Uint8Array(n),this.detached=!1}}static Deserialize(t){const F=t.length/B.RowLength,l=new Float32Array(3*F),U=new Float32Array(4*F),n=new Float32Array(3*F),e=new Uint8Array(4*F),Q=new Float32Array(t.buffer),d=new Uint8Array(t.buffer);for(let t=0;t<F;t++)l[3*t+0]=Q[8*t+0],l[3*t+1]=Q[8*t+1],l[3*t+2]=Q[8*t+2],U[4*t+0]=(d[32*t+28+0]-128)/128,U[4*t+1]=(d[32*t+28+1]-128)/128,U[4*t+2]=(d[32*t+28+2]-128)/128,U[4*t+3]=(d[32*t+28+3]-128)/128,n[3*t+0]=Q[8*t+3+0],n[3*t+1]=Q[8*t+3+1],n[3*t+2]=Q[8*t+3+2],e[4*t+0]=d[32*t+24+0],e[4*t+1]=d[32*t+24+1],e[4*t+2]=d[32*t+24+2],e[4*t+3]=d[32*t+24+3];return new B(F,l,U,n,e)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}B.RowLength=32;class V{constructor(t,F,l,U,n){this._vertexCount=t,this._positions=F,this._data=l,this._width=U,this._height=n,this.serialize=()=>new Uint8Array(this._data.buffer)}static Deserialize(t,F,l){const U=new Uint32Array(t.buffer),n=new Float32Array(t.buffer),e=Math.floor(n.byteLength/this.RowLength),Q=new Float32Array(3*e);for(let t=0;t<e;t++)Q[3*t+0]=n[16*t+0],Q[3*t+1]=n[16*t+1],Q[3*t+2]=n[16*t+2],Q[3*t+0]=n[16*t+3];return new V(e,Q,U,F,l)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get data(){return this._data}get width(){return this._width}get height(){return this._height}}V.RowLength=64;class a{static SplatToPLY(t,l){let U="ply\nformat binary_little_endian 1.0\n";U+=`element vertex ${l}\n`;const n=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let t=0;t<45;t++)n.push(`f_rest_${t}`);n.push("opacity"),n.push("scale_0"),n.push("scale_1"),n.push("scale_2"),n.push("rot_0"),n.push("rot_1"),n.push("rot_2"),n.push("rot_3");for(const t of n)U+=`property float ${t}\n`;U+="end_header\n";const e=(new TextEncoder).encode(U),Q=248,d=l*Q,A=new DataView(new ArrayBuffer(e.length+d));new Uint8Array(A.buffer).set(e,0);const B=new Float32Array(t),V=new Uint8Array(t),a=e.length,i=220,Z=232;for(let t=0;t<l;t++){const l=B[8*t+0],U=B[8*t+1],n=B[8*t+2],e=(V[32*t+24+0]/255-.5)/this.SH_C0,d=(V[32*t+24+1]/255-.5)/this.SH_C0,R=(V[32*t+24+2]/255-.5)/this.SH_C0,s=V[32*t+24+3]/255,c=Math.log(s/(1-s)),o=Math.log(B[8*t+3+0]),r=Math.log(B[8*t+3+1]),h=Math.log(B[8*t+3+2]);let W=new F((V[32*t+28+1]-128)/128,(V[32*t+28+2]-128)/128,(V[32*t+28+3]-128)/128,(V[32*t+28+0]-128)/128);W=W.normalize();const I=W.w,m=W.x,J=W.y,b=W.z;A.setFloat32(a+Q*t+0,l,!0),A.setFloat32(a+Q*t+4,U,!0),A.setFloat32(a+Q*t+8,n,!0),A.setFloat32(a+Q*t+24+0,e,!0),A.setFloat32(a+Q*t+24+4,d,!0),A.setFloat32(a+Q*t+24+8,R,!0),A.setFloat32(a+Q*t+216,c,!0),A.setFloat32(a+Q*t+i+0,o,!0),A.setFloat32(a+Q*t+i+4,r,!0),A.setFloat32(a+Q*t+i+8,h,!0),A.setFloat32(a+Q*t+Z+0,I,!0),A.setFloat32(a+Q*t+Z+4,m,!0),A.setFloat32(a+Q*t+Z+8,J,!0),A.setFloat32(a+Q*t+Z+12,b,!0)}return A.buffer}}a.SH_C0=.28209479177387814;class i{constructor(t,F){this.min=t,this.max=F}contains(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}intersects(t){return this.max.x>=t.min.x&&this.min.x<=t.max.x&&this.max.y>=t.min.y&&this.min.y<=t.max.y&&this.max.z>=t.min.z&&this.min.z<=t.max.z}size(){return this.max.subtract(this.min)}center(){return this.min.add(this.max).divide(2)}expand(t){this.min=this.min.min(t),this.max=this.max.max(t)}permute(){const F=this.min,l=this.max;this.min=new t(Math.min(F.x,l.x),Math.min(F.y,l.y),Math.min(F.z,l.z)),this.max=new t(Math.max(F.x,l.x),Math.max(F.y,l.y),Math.max(F.z,l.z))}}class Z extends d{constructor(l=void 0){super(),this.selectedChanged=!1,this.colorTransformChanged=!1,this._selected=!1,this._colorTransforms=[],this._colorTransformsMap=new Map,this._data=l||new B,this._bounds=new i(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),this.recalculateBounds=()=>{this._bounds=new i(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(let F=0;F<this._data.vertexCount;F++)this._bounds.expand(new t(this._data.positions[3*F],this._data.positions[3*F+1],this._data.positions[3*F+2]))},this.applyPosition=()=>{this.data.translate(this.position),this.position=new t},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new F},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new t(1,1,1)},this.recalculateBounds()}saveToFile(t=null,F=null){if(!document)return;if(F){if("splat"!==F&&"ply"!==F)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else F="splat";if(!t){const l=new Date;t=`splat-${l.getFullYear()}-${l.getMonth()+1}-${l.getDate()}.${F}`}this.applyRotation(),this.applyScale(),this.applyPosition();const l=this.data.serialize();let U;if("ply"===F){const t=a.SplatToPLY(l.buffer,this.data.vertexCount);U=new Blob([t],{type:"application/octet-stream"})}else U=new Blob([l.buffer],{type:"application/octet-stream"});const n=document.createElement("a");n.download=t,n.href=URL.createObjectURL(U),n.click()}get data(){return this._data}get selected(){return this._selected}set selected(t){this._selected!==t&&(this._selected=t,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}get colorTransforms(){return this._colorTransforms}get colorTransformsMap(){return this._colorTransformsMap}get bounds(){let t=this._bounds.center();t=t.add(this.position);let F=this._bounds.size();return F=F.multiply(this.scale),new i(t.subtract(F.divide(2)),t.add(F.divide(2)))}}class R extends d{constructor(t){super(),this._data=t}get data(){return this._data}}class s{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new U,this._viewMatrix=new U,this._viewProj=new U,this._updateProjectionMatrix=()=>{this._projectionMatrix=new U(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(t,F)=>{const l=A.RotationFromQuaternion(F).buffer,n=t.flat();this._viewMatrix=new U(l[0],l[1],l[2],0,l[3],l[4],l[5],0,l[6],l[7],l[8],0,-n[0]*l[0]-n[1]*l[3]-n[2]*l[6],-n[0]*l[1]-n[1]*l[4]-n[2]*l[7],-n[0]*l[2]-n[1]*l[5]-n[2]*l[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(t,F)=>{this._width=t,this._height=F,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(t){this._fx!==t&&(this._fx=t,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(t){this._fy!==t&&(this._fy=t,this._updateProjectionMatrix())}get near(){return this._near}set near(t){this._near!==t&&(this._near=t,this._updateProjectionMatrix())}get far(){return this._far}set far(t){this._far!==t&&(this._far=t,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class c{constructor(t=0,F=0,l=0,U=0){this.x=t,this.y=F,this.z=l,this.w=U}equals(t){return this.x===t.x&&(this.y===t.y&&(this.z===t.z&&this.w===t.w))}add(t){return"number"==typeof t?new c(this.x+t,this.y+t,this.z+t,this.w+t):new c(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}subtract(t){return"number"==typeof t?new c(this.x-t,this.y-t,this.z-t,this.w-t):new c(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}multiply(t){return"number"==typeof t?new c(this.x*t,this.y*t,this.z*t,this.w*t):t instanceof c?new c(this.x*t.x,this.y*t.y,this.z*t.z,this.w*t.w):new c(this.x*t.buffer[0]+this.y*t.buffer[4]+this.z*t.buffer[8]+this.w*t.buffer[12],this.x*t.buffer[1]+this.y*t.buffer[5]+this.z*t.buffer[9]+this.w*t.buffer[13],this.x*t.buffer[2]+this.y*t.buffer[6]+this.z*t.buffer[10]+this.w*t.buffer[14],this.x*t.buffer[3]+this.y*t.buffer[7]+this.z*t.buffer[11]+this.w*t.buffer[15])}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lerp(t,F){return new c(this.x+(t.x-this.x)*F,this.y+(t.y-this.y)*F,this.z+(t.z-this.z)*F,this.w+(t.w-this.w)*F)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2+(this.w-t.w)**2)}normalize(){const t=this.magnitude();return new c(this.x/t,this.y/t,this.z/t,this.w/t)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new c(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class o extends d{constructor(F=void 0){super(),this._data=F||new s,this._position=new t(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(F,l)=>{const U=new c(F,l,-1,1),n=this._data.projectionMatrix.invert(),e=U.multiply(n),Q=this._data.viewMatrix.invert(),d=e.multiply(Q);return new t(d.x/d.w,d.y/d.w,d.z/d.w).subtract(this.position).normalize()}}get data(){return this._data}}class r extends l{constructor(){super(),this._objects=[],this.addObject=t=>{this.objects.push(t),this.dispatchEvent(new n(t))},this.removeObject=t=>{const F=this.objects.indexOf(t);if(F<0)throw new Error("Object not found in scene");this.objects.splice(F,1),this.dispatchEvent(new e(t))},this.findObject=t=>{for(const F of this.objects)if(t(F))return F},this.findObjectOfType=t=>{for(const F of this.objects)if(F instanceof t)return F},this.reset=()=>{const t=this.objects.slice();for(const F of t)this.removeObject(F)},this.reset()}saveToFile(t=null,F=null){if(!document)return;if(F){if("splat"!==F&&"ply"!==F)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else F="splat";if(!t){const l=new Date;t=`scene-${l.getFullYear()}-${l.getMonth()+1}-${l.getDate()}.${F}`}const l=[];let U=0;for(const t of this.objects)if(t.applyRotation(),t.applyScale(),t.applyPosition(),t instanceof Z){const F=t.data.serialize();l.push(F),U+=t.data.vertexCount}const n=new Uint8Array(U*B.RowLength);let e,Q=0;for(const t of l)n.set(t,Q),Q+=t.length;if("ply"===F){const t=a.SplatToPLY(n.buffer,U);e=new Blob([t],{type:"application/octet-stream"})}else e=new Blob([n.buffer],{type:"application/octet-stream"});const d=document.createElement("a");d.download=t,d.href=URL.createObjectURL(e),d.click()}get objects(){return this._objects}}async function h(t,F){const l=await fetch(t,{mode:"cors",credentials:"omit",cache:F?"force-cache":"default"});if(200!=l.status)throw new Error(l.status+" Unable to load "+l.url);return l}async function W(t,F){return t.headers.has("content-length")?async function(t,F){const l=t.body.getReader(),U=parseInt(t.headers.get("content-length")),n=new Uint8Array(U);let e=0;for(;;){const{done:t,value:Q}=await l.read();if(t)break;n.set(Q,e),e+=Q.length,null==F||F(e/U)}return n}(t,F):async function(t,F){const l=t.body.getReader(),U=[];let n=0;for(;;){const{done:t,value:F}=await l.read();if(t)break;U.push(F),n+=F.length}const e=new Uint8Array(n);let Q=0;for(const t of U)e.set(t,Q),Q+=t.length,null==F||F(Q/n);return e}(t,F)}class I{static async LoadAsync(t,F,l,U=!1){const n=await h(t,U),e=await W(n,l);return this.LoadFromArrayBuffer(e,F)}static async LoadFromFileAsync(t,F,l){const U=new FileReader;let n=new Z;return U.onload=t=>{n=this.LoadFromArrayBuffer(t.target.result,F)},U.onprogress=t=>{null==l||l(t.loaded/t.total)},U.readAsArrayBuffer(t),await new Promise((t=>{U.onloadend=()=>{t()}})),n}static LoadFromArrayBuffer(t,F){const l=new Uint8Array(t),U=B.Deserialize(l),n=new Z(U);return F.addObject(n),n}}class m{static async LoadAsync(t,F,l,U="",n=!1){const e=await h(t,n),Q=await W(e,l);if(112!==Q[0]||108!==Q[1]||121!==Q[2]||10!==Q[3])throw new Error("Invalid PLY file");return this.LoadFromArrayBuffer(Q.buffer,F,U)}static async LoadFromFileAsync(t,F,l,U=""){const n=new FileReader;let e=new Z;return n.onload=t=>{e=this.LoadFromArrayBuffer(t.target.result,F,U)},n.onprogress=t=>{null==l||l(t.loaded/t.total)},n.readAsArrayBuffer(t),await new Promise((t=>{n.onloadend=()=>{t()}})),e}static LoadFromArrayBuffer(t,F,l=""){const U=new Uint8Array(this._ParsePLYBuffer(t,l)),n=B.Deserialize(U),e=new Z(n);return F.addObject(e),e}static _ParsePLYBuffer(l,U){const n=new Uint8Array(l),e=(new TextDecoder).decode(n.slice(0,10240)),Q="end_header\n",d=e.indexOf(Q);if(d<0)throw new Error("Unable to read .ply file header");const A=parseInt(/element vertex (\d+)\n/.exec(e)[1]);let V=0;const i={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},Z=[];for(const t of e.slice(0,d).split("\n").filter((t=>t.startsWith("property ")))){const[F,l,U]=t.split(" ");if(Z.push({name:U,type:l,offset:V}),!i[l])throw new Error(`Unsupported property type: ${l}`);V+=i[l]}const R=new DataView(l,d+11),s=new ArrayBuffer(B.RowLength*A),c=F.FromEuler(new t(Math.PI/2,0,0));for(let t=0;t<A;t++){const l=new Float32Array(s,t*B.RowLength,3),n=new Float32Array(s,t*B.RowLength+12,3),e=new Uint8ClampedArray(s,t*B.RowLength+24,4),Q=new Uint8ClampedArray(s,t*B.RowLength+28,4);let d=255,A=0,i=0,o=0;Z.forEach((F=>{let U;switch(F.type){case"float":U=R.getFloat32(F.offset+t*V,!0);break;case"int":U=R.getInt32(F.offset+t*V,!0);break;default:throw new Error(`Unsupported property type: ${F.type}`)}switch(F.name){case"x":l[0]=U;break;case"y":l[1]=U;break;case"z":l[2]=U;break;case"scale_0":case"scaling_0":n[0]=Math.exp(U);break;case"scale_1":case"scaling_1":n[1]=Math.exp(U);break;case"scale_2":case"scaling_2":n[2]=Math.exp(U);break;case"red":e[0]=U;break;case"green":e[1]=U;break;case"blue":e[2]=U;break;case"f_dc_0":case"features_0":e[0]=255*(.5+a.SH_C0*U);break;case"f_dc_1":case"features_1":e[1]=255*(.5+a.SH_C0*U);break;case"f_dc_2":case"features_2":e[2]=255*(.5+a.SH_C0*U);break;case"f_dc_3":e[3]=255*(.5+a.SH_C0*U);break;case"opacity":case"opacity_0":e[3]=1/(1+Math.exp(-U))*255;break;case"rot_0":case"rotation_0":d=U;break;case"rot_1":case"rotation_1":A=U;break;case"rot_2":case"rotation_2":i=U;break;case"rot_3":case"rotation_3":o=U}}));let r=new F(A,i,o,d);switch(U){case"polycam":{const t=l[1];l[1]=-l[2],l[2]=t,r=c.multiply(r);break}case"":break;default:throw new Error(`Unsupported format: ${U}`)}r=r.normalize(),Q[0]=128*r.w+128,Q[1]=128*r.x+128,Q[2]=128*r.y+128,Q[3]=128*r.z+128}return s}}class J{static async LoadAsync(t,F,l,U,n=!1){const e=await h(t,n),Q=await W(e,U);return this._ParseSplatvBuffer(Q.buffer,F,l)}static async LoadFromFileAsync(t,F,l,U){const n=new FileReader;let e=null;if(n.onload=t=>{e=this._ParseSplatvBuffer(t.target.result,F,l)},n.onprogress=t=>{null==U||U(t.loaded/t.total)},n.readAsArrayBuffer(t),await new Promise((t=>{n.onloadend=()=>{t()}})),!e)throw new Error("Failed to load splatv file");return e}static _ParseSplatvBuffer(l,U,n){let e=null;const Q=(l,Q,d)=>{if("magic"===l.type){const t=new Int32Array(Q.buffer);if(26443!==t[0])throw new Error("Invalid splatv file");d.push({size:t[1],type:"chunks"})}else if("chunks"===l.type){const l=JSON.parse(new TextDecoder("utf-8").decode(Q));if(0==l.length)throw new Error("Invalid splatv file");l.length>1&&console.warn("Splatv file contains more than one chunk, only the first one will be loaded");const U=l[0],e=U.cameras;if(n&&e&&e.length){const l=e[0],U=new t(l.position[0],l.position[1],l.position[2]),Q=F.FromMatrix3(new A(l.rotation[0][0],l.rotation[0][1],l.rotation[0][2],l.rotation[1][0],l.rotation[1][1],l.rotation[1][2],l.rotation[2][0],l.rotation[2][1],l.rotation[2][2]));n.position=U,n.rotation=Q}d.push(U)}else if("splat"===l.type){const t=V.Deserialize(Q,l.texwidth,l.texheight),F=new R(t);U.addObject(F),e=F}},d=new Uint8Array(l),B=[{size:8,type:"magic",texwidth:0,texheight:0}];let a=B.shift(),i=new Uint8Array(a.size),Z=0,s=0;for(;a;){for(;Z<a.size;){const t=Math.min(a.size-Z,d.length-s);i.set(d.subarray(s,s+t),Z),Z+=t,s+=t}if(Q(a,i,B),e)return e;a=B.shift(),a&&(i=new Uint8Array(a.size),Z=0)}throw new Error("Invalid splatv file")}}function b(t,F,l){var U=void 0===F?null:F,n=function(t,F){var l=atob(t);if(F){for(var U=new Uint8Array(l.length),n=0,e=l.length;n<e;++n)U[n]=l.charCodeAt(n);return String.fromCharCode.apply(null,new Uint16Array(U.buffer))}return l}(t,void 0!==l&&l),e=n.indexOf("\n",10)+1,Q=n.substring(e)+(U?"//# sourceMappingURL="+U:""),d=new Blob([Q],{type:"application/javascript"});return URL.createObjectURL(d)}function g(t,F,l){var U;return function(n){return U=U||b(t,F,l),new Worker(U,n)}}var C=g("",null,!1);class N{constructor(t,F){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=t;const l=t.gl;this._program=l.createProgram(),this._passes=F||[];const U=l.createShader(l.VERTEX_SHADER);l.shaderSource(U,this._getVertexSource()),l.compileShader(U),l.getShaderParameter(U,l.COMPILE_STATUS)||console.error(l.getShaderInfoLog(U));const n=l.createShader(l.FRAGMENT_SHADER);l.shaderSource(n,this._getFragmentSource()),l.compileShader(n),l.getShaderParameter(n,l.COMPILE_STATUS)||console.error(l.getShaderInfoLog(n)),l.attachShader(this.program,U),l.attachShader(this.program,n),l.linkProgram(this.program),l.getProgramParameter(this.program,l.LINK_STATUS)||console.error(l.getProgramInfoLog(this.program)),this.resize=()=>{l.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),l.useProgram(this._program),this._initialize();for(const t of this.passes)t.initialize(this);this._initialized=!0,this._started=!0},this.render=(t,F)=>{l.useProgram(this._program),this._scene===t&&this._camera===F||(this.dispose(),this._scene=t,this._camera=F,this.initialize());for(const t of this.passes)t.render();this._render()},this.dispose=()=>{if(this._initialized){l.useProgram(this._program);for(const t of this.passes)t.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var G=g("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgdmFyIGxvYWRXYXNtID0gKCgpID0+IHsKICAgIAogICAgcmV0dXJuICgKICBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkgewoKICB2YXIgTW9kdWxlPW1vZHVsZUFyZzt2YXIgcmVhZHlQcm9taXNlUmVzb2x2ZSxyZWFkeVByb21pc2VSZWplY3Q7dmFyIHJlYWR5UHJvbWlzZT1uZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpPT57cmVhZHlQcm9taXNlUmVzb2x2ZT1yZXNvbHZlO3JlYWR5UHJvbWlzZVJlamVjdD1yZWplY3Q7fSk7dmFyIG1vZHVsZU92ZXJyaWRlcz1PYmplY3QuYXNzaWduKHt9LE1vZHVsZSk7dmFyIHNjcmlwdERpcmVjdG9yeT0iIjt2YXIgcmVhZEJpbmFyeTt7e3NjcmlwdERpcmVjdG9yeT1zZWxmLmxvY2F0aW9uLmhyZWY7fWlmKHNjcmlwdERpcmVjdG9yeS5zdGFydHNXaXRoKCJibG9iOiIpKXtzY3JpcHREaXJlY3Rvcnk9IiI7fWVsc2Uge3NjcmlwdERpcmVjdG9yeT1zY3JpcHREaXJlY3Rvcnkuc3Vic3RyKDAsc2NyaXB0RGlyZWN0b3J5LnJlcGxhY2UoL1s/I10uKi8sIiIpLmxhc3RJbmRleE9mKCIvIikrMSk7fXt7cmVhZEJpbmFyeT11cmw9Pnt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbigiR0VUIix1cmwsZmFsc2UpO3hoci5yZXNwb25zZVR5cGU9ImFycmF5YnVmZmVyIjt4aHIuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKX07fX19TW9kdWxlWyJwcmludCJdfHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO3ZhciBlcnI9TW9kdWxlWyJwcmludEVyciJdfHxjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7T2JqZWN0LmFzc2lnbihNb2R1bGUsbW9kdWxlT3ZlcnJpZGVzKTttb2R1bGVPdmVycmlkZXM9bnVsbDtpZihNb2R1bGVbImFyZ3VtZW50cyJdKU1vZHVsZVsiYXJndW1lbnRzIl07aWYoTW9kdWxlWyJ0aGlzUHJvZ3JhbSJdKU1vZHVsZVsidGhpc1Byb2dyYW0iXTtpZihNb2R1bGVbInF1aXQiXSlNb2R1bGVbInF1aXQiXTt2YXIgd2FzbUJpbmFyeTtpZihNb2R1bGVbIndhc21CaW5hcnkiXSl3YXNtQmluYXJ5PU1vZHVsZVsid2FzbUJpbmFyeSJdO2Z1bmN0aW9uIGludEFycmF5RnJvbUJhc2U2NChzKXt2YXIgZGVjb2RlZD1hdG9iKHMpO3ZhciBieXRlcz1uZXcgVWludDhBcnJheShkZWNvZGVkLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxkZWNvZGVkLmxlbmd0aDsrK2kpe2J5dGVzW2ldPWRlY29kZWQuY2hhckNvZGVBdChpKTt9cmV0dXJuIGJ5dGVzfWZ1bmN0aW9uIHRyeVBhcnNlQXNEYXRhVVJJKGZpbGVuYW1lKXtpZighaXNEYXRhVVJJKGZpbGVuYW1lKSl7cmV0dXJufXJldHVybiBpbnRBcnJheUZyb21CYXNlNjQoZmlsZW5hbWUuc2xpY2UoZGF0YVVSSVByZWZpeC5sZW5ndGgpKX12YXIgd2FzbU1lbW9yeTt2YXIgQUJPUlQ9ZmFsc2U7dmFyIEhFQVA4LEhFQVBVOCxIRUFQMTYsSEVBUFUxNixIRUFQMzIsSEVBUFUzMixIRUFQRjMyLEhFQVBGNjQ7ZnVuY3Rpb24gdXBkYXRlTWVtb3J5Vmlld3MoKXt2YXIgYj13YXNtTWVtb3J5LmJ1ZmZlcjtNb2R1bGVbIkhFQVA4Il09SEVBUDg9bmV3IEludDhBcnJheShiKTtNb2R1bGVbIkhFQVAxNiJdPUhFQVAxNj1uZXcgSW50MTZBcnJheShiKTtNb2R1bGVbIkhFQVBVOCJdPUhFQVBVOD1uZXcgVWludDhBcnJheShiKTtNb2R1bGVbIkhFQVBVMTYiXT1IRUFQVTE2PW5ldyBVaW50MTZBcnJheShiKTtNb2R1bGVbIkhFQVAzMiJdPUhFQVAzMj1uZXcgSW50MzJBcnJheShiKTtNb2R1bGVbIkhFQVBVMzIiXT1IRUFQVTMyPW5ldyBVaW50MzJBcnJheShiKTtNb2R1bGVbIkhFQVBGMzIiXT1IRUFQRjMyPW5ldyBGbG9hdDMyQXJyYXkoYik7TW9kdWxlWyJIRUFQRjY0Il09SEVBUEY2ND1uZXcgRmxvYXQ2NEFycmF5KGIpO312YXIgX19BVFBSRVJVTl9fPVtdO3ZhciBfX0FUSU5JVF9fPVtdO3ZhciBfX0FUUE9TVFJVTl9fPVtdO2Z1bmN0aW9uIHByZVJ1bigpe2lmKE1vZHVsZVsicHJlUnVuIl0pe2lmKHR5cGVvZiBNb2R1bGVbInByZVJ1biJdPT0iZnVuY3Rpb24iKU1vZHVsZVsicHJlUnVuIl09W01vZHVsZVsicHJlUnVuIl1dO3doaWxlKE1vZHVsZVsicHJlUnVuIl0ubGVuZ3RoKXthZGRPblByZVJ1bihNb2R1bGVbInByZVJ1biJdLnNoaWZ0KCkpO319Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBSRVJVTl9fKTt9ZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKXtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKTt9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKE1vZHVsZVsicG9zdFJ1biJdKXtpZih0eXBlb2YgTW9kdWxlWyJwb3N0UnVuIl09PSJmdW5jdGlvbiIpTW9kdWxlWyJwb3N0UnVuIl09W01vZHVsZVsicG9zdFJ1biJdXTt3aGlsZShNb2R1bGVbInBvc3RSdW4iXS5sZW5ndGgpe2FkZE9uUG9zdFJ1bihNb2R1bGVbInBvc3RSdW4iXS5zaGlmdCgpKTt9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQT1NUUlVOX18pO31mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpO31mdW5jdGlvbiBhZGRPbkluaXQoY2Ipe19fQVRJTklUX18udW5zaGlmdChjYik7fWZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYil7X19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKTt9dmFyIHJ1bkRlcGVuZGVuY2llcz0wO3ZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtmdW5jdGlvbiBhZGRSdW5EZXBlbmRlbmN5KGlkKXtydW5EZXBlbmRlbmNpZXMrKztNb2R1bGVbIm1vbml0b3JSdW5EZXBlbmRlbmNpZXMiXT8uKHJ1bkRlcGVuZGVuY2llcyk7fWZ1bmN0aW9uIHJlbW92ZVJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcy0tO01vZHVsZVsibW9uaXRvclJ1bkRlcGVuZGVuY2llcyJdPy4ocnVuRGVwZW5kZW5jaWVzKTtpZihydW5EZXBlbmRlbmNpZXM9PTApe2lmKGRlcGVuZGVuY2llc0Z1bGZpbGxlZCl7dmFyIGNhbGxiYWNrPWRlcGVuZGVuY2llc0Z1bGZpbGxlZDtkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtjYWxsYmFjaygpO319fWZ1bmN0aW9uIGFib3J0KHdoYXQpe01vZHVsZVsib25BYm9ydCJdPy4od2hhdCk7d2hhdD0iQWJvcnRlZCgiK3doYXQrIikiO2Vycih3aGF0KTtBQk9SVD10cnVlO3doYXQrPSIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uIjt2YXIgZT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpO3JlYWR5UHJvbWlzZVJlamVjdChlKTt0aHJvdyBlfXZhciBkYXRhVVJJUHJlZml4PSJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsIjt2YXIgaXNEYXRhVVJJPWZpbGVuYW1lPT5maWxlbmFtZS5zdGFydHNXaXRoKGRhdGFVUklQcmVmaXgpO3ZhciB3YXNtQmluYXJ5RmlsZTt3YXNtQmluYXJ5RmlsZT0iZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LEFHRnpiUUVBQUFBQlp3OWdCSDkvZjM4QVlBTi9mMzhBWUFWL2YzOS9md0JnQm45L2YzOS9md0JnQVg4QVlBRi9BWDlnQW45L0FHQURmMzkvQVg5Z0FBQmdCMzkvZjM5L2YzOEFZQUo5ZlFGL1lBUi9mMzUrQUdBQmZRRi9ZQXQvZjM5L2YzOS9mMzkvZndCZ0FuOS9BWDhDUFFvQllRRmhBQUVCWVFGaUFBSUJZUUZqQUFFQllRRmtBQVlCWVFGbEFBRUJZUUZtQUFrQllRRm5BQVFCWVFGb0FBQUJZUUZwQUFZQllRRnFBQVVER3hvSEJRWUtCQWdMQ0FFQUFRUUVEQVVOQXdNQ0FnQUFEZ2NIQlFRRkFYQUJFQkFGQndFQmdnS0FnQUlHQ0FGL0FVR3duZ1FMQnhrR0FXc0NBQUZzQUE4QmJRQVpBVzRCQUFGdkFCZ0JjQUFXQ1JVQkFFRUJDdzhqRGhVVklnNGhHaHdmRGhzZEhoRUs3VkVhY1FFQmZ5QUNSUVJBSUFBb0FnUWdBU2dDQkVZUEN5QUFJQUZHQkVCQkFROExBa0FnQUNnQ0JDSUNMUUFBSWdCRklBQWdBU2dDQkNJQkxRQUFJZ05IY2cwQUEwQWdBUzBBQVNFRElBSXRBQUVpQUVVTkFTQUJRUUZxSVFFZ0FrRUJhaUVDSUFBZ0EwWU5BQXNMSUFBZ0EwWUxUd0VDZjBHb0dpZ0NBQ0lCSUFCQkIycEJlSEVpQW1vaEFBSkFJQUpCQUNBQUlBRk5HMFVFUUNBQVB3QkJFSFJORFFFZ0FCQUpEUUVMUWF3YVFUQTJBZ0JCZnc4TFFhZ2FJQUEyQWdBZ0FRc2hBQ0FCQkVBRFFDQUFRUUE2QUFBZ0FFRUJhaUVBSUFGQkFXc2lBUTBBQ3dzTERnQWdBQkFYSUFFUUYwRVFkSElMQmdBZ0FCQVdDeWtBUWFRZVFRODJBZ0JCcUI1QkFEWUNBQkFSUWFnZVFhQWVLQUlBTmdJQVFhQWVRYVFlTmdJQUN4d0FJQUFnQVVFSUlBS25JQUpDSUlpbklBT25JQU5DSUlpbkVBVUwzZ01BUWF3S1Flb05FQWhCdUFwQm1RMUJBVUVBRUFkQnhBcEJsQTFCQVVHQWYwSC9BQkFCUWR3S1FZME5RUUZCZ0g5Qi93QVFBVUhRQ2tHTERVRUJRUUJCL3dFUUFVSG9Da0hwREVFQ1FZQ0Fma0gvL3dFUUFVSDBDa0hnREVFQ1FRQkIvLzhERUFGQmdBdEIrQXhCQkVHQWdJQ0FlRUgvLy8vL0J4QUJRWXdMUWU4TVFRUkJBRUYvRUFGQm1BdEJwdzFCQkVHQWdJQ0FlRUgvLy8vL0J4QUJRYVFMUVo0TlFRUkJBRUYvRUFGQnNBdEJndzFDZ0lDQWdJQ0FnSUNBZjBMLy8vLy8vLy8vLy84QUVCQkJ2QXRCZ2cxQ0FFSi9FQkJCeUF0Qi9BeEJCQkFFUWRRTFFlTU5RUWdRQkVIVUUwRzVEUkFEUVp3VVFlY1JFQU5CNUJSQkJFR3NEUkFDUWJBVlFRSkJ4UTBRQWtIOEZVRUVRZFFORUFKQm1CWVFCa0hBRmtFQVFhSVJFQUJCNkJaQkFFR0lFaEFBUVpBWFFRRkJ3QkVRQUVHNEYwRUNRZThORUFCQjRCZEJBMEdPRGhBQVFZZ1lRUVJCdGc0UUFFR3dHRUVGUWRNT0VBQkIyQmhCQkVHdEVoQUFRWUFaUVFWQnl4SVFBRUhvRmtFQVFia1BFQUJCa0JkQkFVR1lEeEFBUWJnWFFRSkIrdzhRQUVIZ0YwRURRZGtQRUFCQmlCaEJCRUdCRVJBQVFiQVlRUVZCM3hBUUFFR29HVUVJUWI0UUVBQkIwQmxCQ1VHY0VCQUFRZmdaUVFaQitRNFFBRUdnR2tFSFFmSVNFQUFMSUFBQ1FDQUFLQUlFSUFGSERRQWdBQ2dDSEVFQlJnMEFJQUFnQWpZQ0hBc0xtZ0VBSUFCQkFUb0FOUUpBSUFBb0FnUWdBa2NOQUNBQVFRRTZBRFFDUUNBQUtBSVFJZ0pGQkVBZ0FFRUJOZ0lrSUFBZ0F6WUNHQ0FBSUFFMkFoQWdBMEVCUncwQ0lBQW9BakJCQVVZTkFRd0NDeUFCSUFKR0JFQWdBQ2dDR0NJQ1FRSkdCRUFnQUNBRE5nSVlJQU1oQWdzZ0FDZ0NNRUVCUncwQ0lBSkJBVVlOQVF3Q0N5QUFJQUFvQWlSQkFXbzJBaVFMSUFCQkFUb0FOZ3NMZGdFQmZ5QUFLQUlrSWdORkJFQWdBQ0FDTmdJWUlBQWdBVFlDRUNBQVFRRTJBaVFnQUNBQUtBSTROZ0lVRHdzQ1FBSkFJQUFvQWhRZ0FDZ0NPRWNOQUNBQUtBSVFJQUZIRFFBZ0FDZ0NHRUVDUncwQklBQWdBallDR0E4TElBQkJBVG9BTmlBQVFRSTJBaGdnQUNBRFFRRnFOZ0lrQ3dzQ0FBdlpDd0VIZndKQUlBQkZEUUFnQUVFSWF5SURJQUJCQkdzb0FnQWlBVUY0Y1NJQWFpRUZBa0FnQVVFQmNRMEFJQUZCQW5GRkRRRWdBeUFES0FJQUlnRnJJZ05Cd0Jvb0FnQkpEUUVnQUNBQmFpRUFBa0FDUUVIRUdpZ0NBQ0FEUndSQUlBTW9BZ3doQWlBQlFmOEJUUVJBSUFGQkEzWWhBU0FES0FJSUlnUWdBa1lFUUVHd0drR3dHaWdDQUVGK0lBRjNjVFlDQUF3RkN5QUVJQUkyQWd3Z0FpQUVOZ0lJREFRTElBTW9BaGdoQmlBQ0lBTkhCRUFnQXlnQ0NDSUJJQUkyQWd3Z0FpQUJOZ0lJREFNTElBTW9BaFFpQVFSL0lBTkJGR29GSUFNb0FoQWlBVVVOQWlBRFFSQnFDeUVFQTBBZ0JDRUhJQUVpQWtFVWFpRUVJQUlvQWhRaUFRMEFJQUpCRUdvaEJDQUNLQUlRSWdFTkFBc2dCMEVBTmdJQURBSUxJQVVvQWdRaUFVRURjVUVEUncwQ1FiZ2FJQUEyQWdBZ0JTQUJRWDV4TmdJRUlBTWdBRUVCY2pZQ0JDQUZJQUEyQWdBUEMwRUFJUUlMSUFaRkRRQUNRQ0FES0FJY0lnRkJBblJCNEJ4cUlnUW9BZ0FnQTBZRVFDQUVJQUkyQWdBZ0FnMEJRYlFhUWJRYUtBSUFRWDRnQVhkeE5nSUFEQUlMSUFaQkVFRVVJQVlvQWhBZ0EwWWJhaUFDTmdJQUlBSkZEUUVMSUFJZ0JqWUNHQ0FES0FJUUlnRUVRQ0FDSUFFMkFoQWdBU0FDTmdJWUN5QURLQUlVSWdGRkRRQWdBaUFCTmdJVUlBRWdBallDR0FzZ0F5QUZUdzBBSUFVb0FnUWlBVUVCY1VVTkFBSkFBa0FDUUFKQUlBRkJBbkZGQkVCQnlCb29BZ0FnQlVZRVFFSElHaUFETmdJQVFid2FRYndhS0FJQUlBQnFJZ0EyQWdBZ0F5QUFRUUZ5TmdJRUlBTkJ4Qm9vQWdCSERRWkJ1QnBCQURZQ0FFSEVHa0VBTmdJQUR3dEJ4Qm9vQWdBZ0JVWUVRRUhFR2lBRE5nSUFRYmdhUWJnYUtBSUFJQUJxSWdBMkFnQWdBeUFBUVFGeU5nSUVJQUFnQTJvZ0FEWUNBQThMSUFGQmVIRWdBR29oQUNBRktBSU1JUUlnQVVIL0FVMEVRQ0FCUVFOMklRRWdCU2dDQ0NJRUlBSkdCRUJCc0JwQnNCb29BZ0JCZmlBQmQzRTJBZ0FNQlFzZ0JDQUNOZ0lNSUFJZ0JEWUNDQXdFQ3lBRktBSVlJUVlnQWlBRlJ3UkFRY0FhS0FJQUdpQUZLQUlJSWdFZ0FqWUNEQ0FDSUFFMkFnZ01Bd3NnQlNnQ0ZDSUJCSDhnQlVFVWFnVWdCU2dDRUNJQlJRMENJQVZCRUdvTElRUURRQ0FFSVFjZ0FTSUNRUlJxSVFRZ0FpZ0NGQ0lCRFFBZ0FrRVFhaUVFSUFJb0FoQWlBUTBBQ3lBSFFRQTJBZ0FNQWdzZ0JTQUJRWDV4TmdJRUlBTWdBRUVCY2pZQ0JDQUFJQU5xSUFBMkFnQU1Bd3RCQUNFQ0N5QUdSUTBBQWtBZ0JTZ0NIQ0lCUVFKMFFlQWNhaUlFS0FJQUlBVkdCRUFnQkNBQ05nSUFJQUlOQVVHMEdrRzBHaWdDQUVGK0lBRjNjVFlDQUF3Q0N5QUdRUkJCRkNBR0tBSVFJQVZHRzJvZ0FqWUNBQ0FDUlEwQkN5QUNJQVkyQWhnZ0JTZ0NFQ0lCQkVBZ0FpQUJOZ0lRSUFFZ0FqWUNHQXNnQlNnQ0ZDSUJSUTBBSUFJZ0FUWUNGQ0FCSUFJMkFoZ0xJQU1nQUVFQmNqWUNCQ0FBSUFOcUlBQTJBZ0FnQTBIRUdpZ0NBRWNOQUVHNEdpQUFOZ0lBRHdzZ0FFSC9BVTBFUUNBQVFYaHhRZGdhYWlFQkFuOUJzQm9vQWdBaUJFRUJJQUJCQTNaMElnQnhSUVJBUWJBYUlBQWdCSEkyQWdBZ0FRd0JDeUFCS0FJSUN5RUFJQUVnQXpZQ0NDQUFJQU0yQWd3Z0F5QUJOZ0lNSUFNZ0FEWUNDQThMUVI4aEFpQUFRZi8vL3dkTkJFQWdBRUVtSUFCQkNIWm5JZ0ZyZGtFQmNTQUJRUUYwYTBFK2FpRUNDeUFESUFJMkFod2dBMElBTndJUUlBSkJBblJCNEJ4cUlRY0Nmd0pBQW45QnRCb29BZ0FpQVVFQklBSjBJZ1J4UlFSQVFiUWFJQUVnQkhJMkFnQkJHQ0VDSUFjaEJFRUlEQUVMSUFCQkdTQUNRUUYyYTBFQUlBSkJIMGNiZENFQ0lBY29BZ0FoQkFOQUlBUWlBU2dDQkVGNGNTQUFSZzBDSUFKQkhYWWhCQ0FDUVFGMElRSWdBU0FFUVFSeGFrRVFhaUlIS0FJQUlnUU5BQXRCR0NFQ0lBRWhCRUVJQ3lFQUlBTWlBUXdCQ3lBQktBSUlJZ1FnQXpZQ0RFRUlJUUlnQVVFSWFpRUhRUmdoQUVFQUN5RUZJQWNnQXpZQ0FDQUNJQU5xSUFRMkFnQWdBeUFCTmdJTUlBQWdBMm9nQlRZQ0FFSFFHa0hRR2lnQ0FFRUJheUlBUVg4Z0FCczJBZ0FMQzNjQkJIOGdBTHdpQkVILy8vOERjU0VCQWtBZ0JFRVhka0gvQVhFaUFrVU5BQ0FDUWZBQVRRUkFJQUZCZ0lDQUJISkI4UUFnQW10MklRRU1BUXNnQWtHTkFVc0VRRUdBK0FFaEEwRUFJUUVNQVFzZ0FrRUtkRUdBZ0FkcklRTUxJQU1nQkVFUWRrR0FnQUp4Y2lBQlFRMTJja0gvL3dOeEM5Y25BUXgvSXdCQkVHc2lDaVFBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FFSDBBVTBFUUVHd0dpZ0NBQ0lFUVJBZ0FFRUxha0g0QTNFZ0FFRUxTUnNpQmtFRGRpSUFkaUlCUVFOeEJFQUNRQ0FCUVg5elFRRnhJQUJxSWdKQkEzUWlBVUhZR21vaUFDQUJRZUFhYWlnQ0FDSUJLQUlJSWdWR0JFQkJzQm9nQkVGK0lBSjNjVFlDQUF3QkN5QUZJQUEyQWd3Z0FDQUZOZ0lJQ3lBQlFRaHFJUUFnQVNBQ1FRTjBJZ0pCQTNJMkFnUWdBU0FDYWlJQklBRW9BZ1JCQVhJMkFnUU1Dd3NnQmtHNEdpZ0NBQ0lJVFEwQklBRUVRQUpBUVFJZ0FIUWlBa0VBSUFKcmNpQUJJQUIwY1dnaUFVRURkQ0lBUWRnYWFpSUNJQUJCNEJwcUtBSUFJZ0FvQWdnaUJVWUVRRUd3R2lBRVFYNGdBWGR4SWdRMkFnQU1BUXNnQlNBQ05nSU1JQUlnQlRZQ0NBc2dBQ0FHUVFOeU5nSUVJQUFnQm1vaUJ5QUJRUU4wSWdFZ0Jtc2lCVUVCY2pZQ0JDQUFJQUZxSUFVMkFnQWdDQVJBSUFoQmVIRkIyQnBxSVFGQnhCb29BZ0FoQWdKL0lBUkJBU0FJUVFOMmRDSURjVVVFUUVHd0dpQURJQVJ5TmdJQUlBRU1BUXNnQVNnQ0NBc2hBeUFCSUFJMkFnZ2dBeUFDTmdJTUlBSWdBVFlDRENBQ0lBTTJBZ2dMSUFCQkNHb2hBRUhFR2lBSE5nSUFRYmdhSUFVMkFnQU1Dd3RCdEJvb0FnQWlDMFVOQVNBTGFFRUNkRUhnSEdvb0FnQWlBaWdDQkVGNGNTQUdheUVESUFJaEFRTkFBa0FnQVNnQ0VDSUFSUVJBSUFFb0FoUWlBRVVOQVFzZ0FDZ0NCRUY0Y1NBR2F5SUJJQU1nQVNBRFNTSUJHeUVESUFBZ0FpQUJHeUVDSUFBaEFRd0JDd3NnQWlnQ0dDRUpJQUlnQWlnQ0RDSUFSd1JBUWNBYUtBSUFHaUFDS0FJSUlnRWdBRFlDRENBQUlBRTJBZ2dNQ2dzZ0FpZ0NGQ0lCQkg4Z0FrRVVhZ1VnQWlnQ0VDSUJSUTBESUFKQkVHb0xJUVVEUUNBRklRY2dBU0lBUVJScUlRVWdBQ2dDRkNJQkRRQWdBRUVRYWlFRklBQW9BaEFpQVEwQUN5QUhRUUEyQWdBTUNRdEJmeUVHSUFCQnYzOUxEUUFnQUVFTGFpSUFRWGh4SVFaQnRCb29BZ0FpQjBVTkFFRUFJQVpySVFNQ1FBSkFBa0FDZjBFQUlBWkJnQUpKRFFBYVFSOGdCa0gvLy84SFN3MEFHaUFHUVNZZ0FFRUlkbWNpQUd0MlFRRnhJQUJCQVhSclFUNXFDeUlJUVFKMFFlQWNhaWdDQUNJQlJRUkFRUUFoQUF3QkMwRUFJUUFnQmtFWklBaEJBWFpyUVFBZ0NFRWZSeHQwSVFJRFFBSkFJQUVvQWdSQmVIRWdCbXNpQkNBRFR3MEFJQUVoQlNBRUlnTU5BRUVBSVFNZ0FTRUFEQU1MSUFBZ0FTZ0NGQ0lFSUFRZ0FTQUNRUjEyUVFSeGFpZ0NFQ0lCUmhzZ0FDQUVHeUVBSUFKQkFYUWhBaUFCRFFBTEN5QUFJQVZ5UlFSQVFRQWhCVUVDSUFoMElnQkJBQ0FBYTNJZ0IzRWlBRVVOQXlBQWFFRUNkRUhnSEdvb0FnQWhBQXNnQUVVTkFRc0RRQ0FBS0FJRVFYaHhJQVpySWdJZ0Ewa2hBU0FDSUFNZ0FSc2hBeUFBSUFVZ0FSc2hCU0FBS0FJUUlnRUVmeUFCQlNBQUtBSVVDeUlBRFFBTEN5QUZSUTBBSUFOQnVCb29BZ0FnQm10UERRQWdCU2dDR0NFSUlBVWdCU2dDRENJQVJ3UkFRY0FhS0FJQUdpQUZLQUlJSWdFZ0FEWUNEQ0FBSUFFMkFnZ01DQXNnQlNnQ0ZDSUJCSDhnQlVFVWFnVWdCU2dDRUNJQlJRMERJQVZCRUdvTElRSURRQ0FDSVFRZ0FTSUFRUlJxSVFJZ0FDZ0NGQ0lCRFFBZ0FFRVFhaUVDSUFBb0FoQWlBUTBBQ3lBRVFRQTJBZ0FNQndzZ0JrRzRHaWdDQUNJRlRRUkFRY1FhS0FJQUlRQUNRQ0FGSUFacklnRkJFRThFUUNBQUlBWnFJZ0lnQVVFQmNqWUNCQ0FBSUFWcUlBRTJBZ0FnQUNBR1FRTnlOZ0lFREFFTElBQWdCVUVEY2pZQ0JDQUFJQVZxSWdFZ0FTZ0NCRUVCY2pZQ0JFRUFJUUpCQUNFQkMwRzRHaUFCTmdJQVFjUWFJQUkyQWdBZ0FFRUlhaUVBREFrTElBWkJ2Qm9vQWdBaUFra0VRRUc4R2lBQ0lBWnJJZ0UyQWdCQnlCcEJ5Qm9vQWdBaUFDQUdhaUlDTmdJQUlBSWdBVUVCY2pZQ0JDQUFJQVpCQTNJMkFnUWdBRUVJYWlFQURBa0xRUUFoQUNBR1FTOXFJZ01DZjBHSUhpZ0NBQVJBUVpBZUtBSUFEQUVMUVpRZVFuODNBZ0JCakI1Q2dLQ0FnSUNBQkRjQ0FFR0lIaUFLUVF4cVFYQnhRZGlxMWFvRmN6WUNBRUdjSGtFQU5nSUFRZXdkUVFBMkFnQkJnQ0FMSWdGcUlnUkJBQ0FCYXlJSGNTSUJJQVpORFFoQjZCMG9BZ0FpQlFSQVFlQWRLQUlBSWdnZ0FXb2lDU0FJVFNBRklBbEpjZzBKQ3dKQVFld2RMUUFBUVFSeFJRUkFBa0FDUUFKQUFrQkJ5Qm9vQWdBaUJRUkFRZkFkSVFBRFFDQUZJQUFvQWdBaUNFOEVRQ0FJSUFBb0FnUnFJQVZMRFFNTElBQW9BZ2dpQUEwQUN3dEJBQkFMSWdKQmYwWU5BeUFCSVFSQmpCNG9BZ0FpQUVFQmF5SUZJQUp4QkVBZ0FTQUNheUFDSUFWcVFRQWdBR3R4YWlFRUN5QUVJQVpORFFOQjZCMG9BZ0FpQUFSQVFlQWRLQUlBSWdVZ0JHb2lCeUFGVFNBQUlBZEpjZzBFQ3lBRUVBc2lBQ0FDUncwQkRBVUxJQVFnQW1zZ0IzRWlCQkFMSWdJZ0FDZ0NBQ0FBS0FJRWFrWU5BU0FDSVFBTElBQkJmMFlOQVNBR1FUQnFJQVJOQkVBZ0FDRUNEQVFMUVpBZUtBSUFJZ0lnQXlBRWEycEJBQ0FDYTNFaUFoQUxRWDlHRFFFZ0FpQUVhaUVFSUFBaEFnd0RDeUFDUVg5SERRSUxRZXdkUWV3ZEtBSUFRUVJ5TmdJQUN5QUJFQXNpQWtGL1JrRUFFQXNpQUVGL1JuSWdBQ0FDVFhJTkJTQUFJQUpySWdRZ0JrRW9hazBOQlF0QjRCMUI0QjBvQWdBZ0JHb2lBRFlDQUVIa0hTZ0NBQ0FBU1FSQVFlUWRJQUEyQWdBTEFrQkJ5Qm9vQWdBaUF3UkFRZkFkSVFBRFFDQUNJQUFvQWdBaUFTQUFLQUlFSWdWcVJnMENJQUFvQWdnaUFBMEFDd3dFQzBIQUdpZ0NBQ0lBUVFBZ0FDQUNUUnRGQkVCQndCb2dBallDQUF0QkFDRUFRZlFkSUFRMkFnQkI4QjBnQWpZQ0FFSFFHa0YvTmdJQVFkUWFRWWdlS0FJQU5nSUFRZndkUVFBMkFnQURRQ0FBUVFOMElnRkI0QnBxSUFGQjJCcHFJZ1UyQWdBZ0FVSGtHbW9nQlRZQ0FDQUFRUUZxSWdCQklFY05BQXRCdkJvZ0JFRW9heUlBUVhnZ0FtdEJCM0VpQVdzaUJUWUNBRUhJR2lBQklBSnFJZ0UyQWdBZ0FTQUZRUUZ5TmdJRUlBQWdBbXBCS0RZQ0JFSE1Ha0dZSGlnQ0FEWUNBQXdFQ3lBQ0lBTk5JQUVnQTB0eURRSWdBQ2dDREVFSWNRMENJQUFnQkNBRmFqWUNCRUhJR2lBRFFYZ2dBMnRCQjNFaUFHb2lBVFlDQUVHOEdrRzhHaWdDQUNBRWFpSUNJQUJySWdBMkFnQWdBU0FBUVFGeU5nSUVJQUlnQTJwQktEWUNCRUhNR2tHWUhpZ0NBRFlDQUF3REMwRUFJUUFNQmd0QkFDRUFEQVFMUWNBYUtBSUFJQUpMQkVCQndCb2dBallDQUFzZ0FpQUVhaUVCUWZBZElRQUNRQU5BSUFFZ0FDZ0NBRWNFUUNBQUtBSUlJZ0FOQVF3Q0N3c2dBQzBBREVFSWNVVU5Bd3RCOEIwaEFBTkFBa0FnQXlBQUtBSUFJZ0ZQQkVBZ0FTQUFLQUlFYWlJRklBTkxEUUVMSUFBb0FnZ2hBQXdCQ3d0QnZCb2dCRUVvYXlJQVFYZ2dBbXRCQjNFaUFXc2lCellDQUVISUdpQUJJQUpxSWdFMkFnQWdBU0FIUVFGeU5nSUVJQUFnQW1wQktEWUNCRUhNR2tHWUhpZ0NBRFlDQUNBRElBVkJKeUFGYTBFSGNXcEJMMnNpQUNBQUlBTkJFR3BKR3lJQlFSczJBZ1FnQVVINEhTa0NBRGNDRUNBQlFmQWRLUUlBTndJSVFmZ2RJQUZCQ0dvMkFnQkI5QjBnQkRZQ0FFSHdIU0FDTmdJQVFmd2RRUUEyQWdBZ0FVRVlhaUVBQTBBZ0FFRUhOZ0lFSUFCQkNHb2hEQ0FBUVFScUlRQWdEQ0FGU1EwQUN5QUJJQU5HRFFBZ0FTQUJLQUlFUVg1eE5nSUVJQU1nQVNBRGF5SUNRUUZ5TmdJRUlBRWdBallDQUFKL0lBSkIvd0ZOQkVBZ0FrRjRjVUhZR21vaEFBSi9RYkFhS0FJQUlnRkJBU0FDUVFOMmRDSUNjVVVFUUVHd0dpQUJJQUp5TmdJQUlBQU1BUXNnQUNnQ0NBc2hBU0FBSUFNMkFnZ2dBU0FETmdJTVFRd2hBa0VJREFFTFFSOGhBQ0FDUWYvLy93ZE5CRUFnQWtFbUlBSkJDSFpuSWdCcmRrRUJjU0FBUVFGMGEwRSthaUVBQ3lBRElBQTJBaHdnQTBJQU53SVFJQUJCQW5SQjRCeHFJUUVDUUFKQVFiUWFLQUlBSWdWQkFTQUFkQ0lFY1VVRVFFRzBHaUFFSUFWeU5nSUFJQUVnQXpZQ0FBd0JDeUFDUVJrZ0FFRUJkbXRCQUNBQVFSOUhHM1FoQUNBQktBSUFJUVVEUUNBRklnRW9BZ1JCZUhFZ0FrWU5BaUFBUVIxMklRVWdBRUVCZENFQUlBRWdCVUVFY1dvaUJDZ0NFQ0lGRFFBTElBUWdBellDRUFzZ0F5QUJOZ0lZUVFnaEFpQURJZ0VoQUVFTURBRUxJQUVvQWdnaUFDQUROZ0lNSUFFZ0F6WUNDQ0FESUFBMkFnaEJBQ0VBUVJnaEFrRU1DeUFEYWlBQk5nSUFJQUlnQTJvZ0FEWUNBQXRCdkJvb0FnQWlBQ0FHVFEwQVFid2FJQUFnQm1zaUFUWUNBRUhJR2tISUdpZ0NBQ0lBSUFacUlnSTJBZ0FnQWlBQlFRRnlOZ0lFSUFBZ0JrRURjallDQkNBQVFRaHFJUUFNQkF0QnJCcEJNRFlDQUVFQUlRQU1Bd3NnQUNBQ05nSUFJQUFnQUNnQ0JDQUVhallDQkNBQ1FYZ2dBbXRCQjNGcUlnZ2dCa0VEY2pZQ0JDQUJRWGdnQVd0QkIzRnFJZ1FnQmlBSWFpSURheUVIQWtCQnlCb29BZ0FnQkVZRVFFSElHaUFETmdJQVFid2FRYndhS0FJQUlBZHFJZ0EyQWdBZ0F5QUFRUUZ5TmdJRURBRUxRY1FhS0FJQUlBUkdCRUJCeEJvZ0F6WUNBRUc0R2tHNEdpZ0NBQ0FIYWlJQU5nSUFJQU1nQUVFQmNqWUNCQ0FBSUFOcUlBQTJBZ0FNQVFzZ0JDZ0NCQ0lBUVFOeFFRRkdCRUFnQUVGNGNTRUpJQVFvQWd3aEFnSkFJQUJCL3dGTkJFQWdCQ2dDQ0NJQklBSkdCRUJCc0JwQnNCb29BZ0JCZmlBQVFRTjJkM0UyQWdBTUFnc2dBU0FDTmdJTUlBSWdBVFlDQ0F3QkN5QUVLQUlZSVFZQ1FDQUNJQVJIQkVCQndCb29BZ0FhSUFRb0FnZ2lBQ0FDTmdJTUlBSWdBRFlDQ0F3QkN3SkFJQVFvQWhRaUFBUi9JQVJCRkdvRklBUW9BaEFpQUVVTkFTQUVRUkJxQ3lFQkEwQWdBU0VGSUFBaUFrRVVhaUVCSUFBb0FoUWlBQTBBSUFKQkVHb2hBU0FDS0FJUUlnQU5BQXNnQlVFQU5nSUFEQUVMUVFBaEFnc2dCa1VOQUFKQUlBUW9BaHdpQUVFQ2RFSGdIR29pQVNnQ0FDQUVSZ1JBSUFFZ0FqWUNBQ0FDRFFGQnRCcEJ0Qm9vQWdCQmZpQUFkM0UyQWdBTUFnc2dCa0VRUVJRZ0JpZ0NFQ0FFUmh0cUlBSTJBZ0FnQWtVTkFRc2dBaUFHTmdJWUlBUW9BaEFpQUFSQUlBSWdBRFlDRUNBQUlBSTJBaGdMSUFRb0FoUWlBRVVOQUNBQ0lBQTJBaFFnQUNBQ05nSVlDeUFISUFscUlRY2dCQ0FKYWlJRUtBSUVJUUFMSUFRZ0FFRitjVFlDQkNBRElBZEJBWEkyQWdRZ0F5QUhhaUFITmdJQUlBZEIvd0ZOQkVBZ0IwRjRjVUhZR21vaEFBSi9RYkFhS0FJQUlnRkJBU0FIUVFOMmRDSUNjVVVFUUVHd0dpQUJJQUp5TmdJQUlBQU1BUXNnQUNnQ0NBc2hBU0FBSUFNMkFnZ2dBU0FETmdJTUlBTWdBRFlDRENBRElBRTJBZ2dNQVF0Qkh5RUNJQWRCLy8vL0IwMEVRQ0FIUVNZZ0IwRUlkbWNpQUd0MlFRRnhJQUJCQVhSclFUNXFJUUlMSUFNZ0FqWUNIQ0FEUWdBM0FoQWdBa0VDZEVIZ0hHb2hBQUpBQWtCQnRCb29BZ0FpQVVFQklBSjBJZ1Z4UlFSQVFiUWFJQUVnQlhJMkFnQWdBQ0FETmdJQURBRUxJQWRCR1NBQ1FRRjJhMEVBSUFKQkgwY2JkQ0VDSUFBb0FnQWhBUU5BSUFFaUFDZ0NCRUY0Y1NBSFJnMENJQUpCSFhZaEFTQUNRUUYwSVFJZ0FDQUJRUVJ4YWlJRktBSVFJZ0VOQUFzZ0JTQUROZ0lRQ3lBRElBQTJBaGdnQXlBRE5nSU1JQU1nQXpZQ0NBd0JDeUFBS0FJSUlnRWdBellDRENBQUlBTTJBZ2dnQTBFQU5nSVlJQU1nQURZQ0RDQURJQUUyQWdnTElBaEJDR29oQUF3Q0N3SkFJQWhGRFFBQ1FDQUZLQUljSWdGQkFuUkI0QnhxSWdJb0FnQWdCVVlFUUNBQ0lBQTJBZ0FnQUEwQlFiUWFJQWRCZmlBQmQzRWlCellDQUF3Q0N5QUlRUkJCRkNBSUtBSVFJQVZHRzJvZ0FEWUNBQ0FBUlEwQkN5QUFJQWcyQWhnZ0JTZ0NFQ0lCQkVBZ0FDQUJOZ0lRSUFFZ0FEWUNHQXNnQlNnQ0ZDSUJSUTBBSUFBZ0FUWUNGQ0FCSUFBMkFoZ0xBa0FnQTBFUFRRUkFJQVVnQXlBR2FpSUFRUU55TmdJRUlBQWdCV29pQUNBQUtBSUVRUUZ5TmdJRURBRUxJQVVnQmtFRGNqWUNCQ0FGSUFacUlnUWdBMEVCY2pZQ0JDQURJQVJxSUFNMkFnQWdBMEgvQVUwRVFDQURRWGh4UWRnYWFpRUFBbjlCc0Jvb0FnQWlBVUVCSUFOQkEzWjBJZ0p4UlFSQVFiQWFJQUVnQW5JMkFnQWdBQXdCQ3lBQUtBSUlDeUVCSUFBZ0JEWUNDQ0FCSUFRMkFnd2dCQ0FBTmdJTUlBUWdBVFlDQ0F3QkMwRWZJUUFnQTBILy8vOEhUUVJBSUFOQkppQURRUWgyWnlJQWEzWkJBWEVnQUVFQmRHdEJQbW9oQUFzZ0JDQUFOZ0ljSUFSQ0FEY0NFQ0FBUVFKMFFlQWNhaUVCQWtBQ1FDQUhRUUVnQUhRaUFuRkZCRUJCdEJvZ0FpQUhjallDQUNBQklBUTJBZ0FnQkNBQk5nSVlEQUVMSUFOQkdTQUFRUUYyYTBFQUlBQkJIMGNiZENFQUlBRW9BZ0FoQVFOQUlBRWlBaWdDQkVGNGNTQURSZzBDSUFCQkhYWWhBU0FBUVFGMElRQWdBaUFCUVFSeGFpSUhLQUlRSWdFTkFBc2dCeUFFTmdJUUlBUWdBallDR0FzZ0JDQUVOZ0lNSUFRZ0JEWUNDQXdCQ3lBQ0tBSUlJZ0FnQkRZQ0RDQUNJQVEyQWdnZ0JFRUFOZ0lZSUFRZ0FqWUNEQ0FFSUFBMkFnZ0xJQVZCQ0dvaEFBd0JDd0pBSUFsRkRRQUNRQ0FDS0FJY0lnRkJBblJCNEJ4cUlnVW9BZ0FnQWtZRVFDQUZJQUEyQWdBZ0FBMEJRYlFhSUF0QmZpQUJkM0UyQWdBTUFnc2dDVUVRUVJRZ0NTZ0NFQ0FDUmh0cUlBQTJBZ0FnQUVVTkFRc2dBQ0FKTmdJWUlBSW9BaEFpQVFSQUlBQWdBVFlDRUNBQklBQTJBaGdMSUFJb0FoUWlBVVVOQUNBQUlBRTJBaFFnQVNBQU5nSVlDd0pBSUFOQkQwMEVRQ0FDSUFNZ0Jtb2lBRUVEY2pZQ0JDQUFJQUpxSWdBZ0FDZ0NCRUVCY2pZQ0JBd0JDeUFDSUFaQkEzSTJBZ1FnQWlBR2FpSUZJQU5CQVhJMkFnUWdBeUFGYWlBRE5nSUFJQWdFUUNBSVFYaHhRZGdhYWlFQVFjUWFLQUlBSVFFQ2YwRUJJQWhCQTNaMElnY2dCSEZGQkVCQnNCb2dCQ0FIY2pZQ0FDQUFEQUVMSUFBb0FnZ0xJUVFnQUNBQk5nSUlJQVFnQVRZQ0RDQUJJQUEyQWd3Z0FTQUVOZ0lJQzBIRUdpQUZOZ0lBUWJnYUlBTTJBZ0FMSUFKQkNHb2hBQXNnQ2tFUWFpUUFJQUFMcVFzQ0MzOEpmU01BUWFBQmF5SUxKQUFnQzBFd2FrRWtFQXdEUUNBQklBMUhCRUFnQWlBTlFRTnNJZ3hCQW1wQkFuUWlEbW9xQWdBaEZ5QUNJQXhCQVdwQkFuUWlEMm9xQWdBaEdDQUlJQXhCQW5RaUVHb2dBaUFRYWlvQ0FDSVpPQUlBSUFnZ0Qyb2dHRGdDQUNBSUlBNXFJQmM0QWdBZ0J5QU5RUVYwYWlJTUlCZzRBZ1FnRENBWk9BSUFJQXdnRnpnQ0NDQU1RUUEyQWd3Q1FDQUFSUVJBSUFZZ0RXb3RBQUJGRFFFTElBeEJnSUNBQ0RZQ0RBc2dCeUFOUVFWMGFpSVJJQVVnRFVFQ2RDSU1RUUZ5SWhKcUxRQUFRUWgwSUFVZ0RHb3RBQUJ5SUFVZ0RFRUNjaUlUYWkwQUFFRVFkSElnQlNBTVFRTnlJZ3hxTFFBQVFSaDBjallDSENBTElBTWdFa0VDZENJU2Fpb0NBQ0lYT0FLUUFTQUxJQU1nRTBFQ2RDSVRhaW9DQUNJWU9BS1VBU0FMSUFNZ0RFRUNkQ0lVYWlvQ0FDSVpPQUtZQVNBTElBTWdEVUVFZENJVmFpb0NBSXdpR2pnQ25BRWdDMEhnQUdvaURDQUxLZ0tZQVNJV1F3QUFBTUNVSUJhVUlBc3FBcFFCSWhaREFBQUF3SlFnRnBSREFBQ0FQNUtTT0FJQUlBd2dDeW9Da0FFaUZpQVdraUFMS2dLVUFaUWdDeW9DbUFGREFBQUF3SlFnQ3lvQ25BR1VramdDQkNBTUlBc3FBcEFCSWhZZ0ZwSWdDeW9DbUFHVUlBc3FBcFFCSWhZZ0ZwSWdDeW9DbkFHVWtqZ0NDQ0FNSUFzcUFwQUJJaFlnRnBJZ0N5b0NsQUdVSUFzcUFwZ0JJaFlnRnBJZ0N5b0NuQUdVa2pnQ0RDQU1JQXNxQXBnQkloWkRBQUFBd0pRZ0ZwUWdDeW9Da0FFaUZrTUFBQURBbENBV2xFTUFBSUEva3BJNEFoQWdEQ0FMS2dLVUFTSVdJQmFTSUFzcUFwZ0JsQ0FMS2dLUUFVTUFBQURBbENBTEtnS2NBWlNTT0FJVUlBd2dDeW9Da0FFaUZpQVdraUFMS2dLWUFaUWdDeW9DbEFGREFBQUF3SlFnQ3lvQ25BR1VramdDR0NBTUlBc3FBcFFCSWhZZ0ZwSWdDeW9DbUFHVUlBc3FBcEFCSWhZZ0ZwSWdDeW9DbkFHVWtqZ0NIQ0FNSUFzcUFwUUJJaFpEQUFBQXdKUWdGcFFnQ3lvQ2tBRWlGa01BQUFEQWxDQVdsRU1BQUlBL2twSTRBaUFnQ1NBVmFpQVhPQUlBSUFrZ0Vtb2dHRGdDQUNBSklCTnFJQms0QWdBZ0NTQVVhaUFhT0FJQUlBc2dCQ0FRYWlvQ0FDSVhPQUl3SUFzZ0JDQVBhaW9DQUNJWU9BSkFJQXNnQkNBT2Fpb0NBQ0laT0FKUUlBb2dFR29nRnpnQ0FDQUtJQTlxSUJnNEFnQWdDaUFPYWlBWk9BSUFJQXNnRENvQ0dDQUxLZ0k0bENBTUtnSUFJQXNxQWpDVUlBd3FBZ3dnQ3lvQ05KU1NramdDQUNBTElBd3FBaHdnQ3lvQ09KUWdEQ29DQkNBTEtnSXdsQ0FNS2dJUUlBc3FBalNVa3BJNEFnUWdDeUFNS2dJZ0lBc3FBamlVSUF3cUFnZ2dDeW9DTUpRZ0RDb0NGQ0FMS2dJMGxKS1NPQUlJSUFzZ0RDb0NHQ0FMS2dKRWxDQU1LZ0lBSUFzcUFqeVVJQXdxQWd3Z0N5b0NRSlNTa2pnQ0RDQUxJQXdxQWh3Z0N5b0NSSlFnRENvQ0JDQUxLZ0k4bENBTUtnSVFJQXNxQWtDVWtwSTRBaEFnQ3lBTUtnSWdJQXNxQWtTVUlBd3FBZ2dnQ3lvQ1BKUWdEQ29DRkNBTEtnSkFsSktTT0FJVUlBc2dEQ29DR0NBTEtnSlFsQ0FNS2dJQUlBc3FBa2lVSUF3cUFnd2dDeW9DVEpTU2tqZ0NHQ0FMSUF3cUFod2dDeW9DVUpRZ0RDb0NCQ0FMS2dKSWxDQU1LZ0lRSUFzcUFreVVrcEk0QWh3Z0N5QU1LZ0lnSUFzcUFsQ1VJQXdxQWdnZ0N5b0NTSlFnRENvQ0ZDQUxLZ0pNbEpLU09BSWdJQXNxQWlBaEZ5QUxLZ0lJSVJnZ0N5b0NGQ0VaSUJFZ0N5b0NHQ0lhSUJxVUlBc3FBZ0FpRmlBV2xDQUxLZ0lNSWhzZ0c1U1Nra01BQUlCQWxDQWFJQXNxQWh3aUhKUWdGaUFMS2dJRUloMlVJQnNnQ3lvQ0VDSWVsSktTUXdBQWdFQ1VFQTAyQWhBZ0VTQWFJQmVVSUJZZ0dKUWdHeUFabEpLU1F3QUFnRUNVSUJ3Z0hKUWdIU0FkbENBZUlCNlVrcEpEQUFDQVFKUVFEVFlDRkNBUklCd2dGNVFnSFNBWWxDQWVJQm1Va3BKREFBQ0FRSlFnRnlBWGxDQVlJQmlVSUJrZ0daU1Nra01BQUlCQWxCQU5OZ0lZSUExQkFXb2hEUXdCQ3dzZ0MwR2dBV29rQUFzYUFDQUFJQUVvQWdnZ0JSQUtCRUFnQVNBQ0lBTWdCQkFUQ3dzM0FDQUFJQUVvQWdnZ0JSQUtCRUFnQVNBQ0lBTWdCQkFURHdzZ0FDZ0NDQ0lBSUFFZ0FpQURJQVFnQlNBQUtBSUFLQUlVRVFNQUM1RUJBQ0FBSUFFb0FnZ2dCQkFLQkVBZ0FTQUNJQU1RRWc4TEFrQWdBQ0FCS0FJQUlBUVFDa1VOQUFKQUlBSWdBU2dDRUVjRVFDQUJLQUlVSUFKSERRRUxJQU5CQVVjTkFTQUJRUUUyQWlBUEN5QUJJQUkyQWhRZ0FTQUROZ0lnSUFFZ0FTZ0NLRUVCYWpZQ0tBSkFJQUVvQWlSQkFVY05BQ0FCS0FJWVFRSkhEUUFnQVVFQk9nQTJDeUFCUVFRMkFpd0xDL1VCQUNBQUlBRW9BZ2dnQkJBS0JFQWdBU0FDSUFNUUVnOExBa0FnQUNBQktBSUFJQVFRQ2dSQUFrQWdBaUFCS0FJUVJ3UkFJQUVvQWhRZ0FrY05BUXNnQTBFQlJ3MENJQUZCQVRZQ0lBOExJQUVnQXpZQ0lBSkFJQUVvQWl4QkJFWU5BQ0FCUVFBN0FUUWdBQ2dDQ0NJQUlBRWdBaUFDUVFFZ0JDQUFLQUlBS0FJVUVRTUFJQUV0QURWQkFVWUVRQ0FCUVFNMkFpd2dBUzBBTkVVTkFRd0RDeUFCUVFRMkFpd0xJQUVnQWpZQ0ZDQUJJQUVvQWloQkFXbzJBaWdnQVNnQ0pFRUJSdzBCSUFFb0FoaEJBa2NOQVNBQlFRRTZBRFlQQ3lBQUtBSUlJZ0FnQVNBQ0lBTWdCQ0FBS0FJQUtBSVlFUUlBQ3dzeEFDQUFJQUVvQWdoQkFCQUtCRUFnQVNBQ0lBTVFGQThMSUFBb0FnZ2lBQ0FCSUFJZ0F5QUFLQUlBS0FJY0VRQUFDeGdBSUFBZ0FTZ0NDRUVBRUFvRVFDQUJJQUlnQXhBVUN3dmhBd0VGZnlNQVFSQnJJZ01rQUNBRElBQW9BZ0FpQkVFSWF5Z0NBQ0lDTmdJTUlBTWdBQ0FDYWpZQ0JDQURJQVJCQkdzb0FnQTJBZ2dnQXlnQ0NDSUVJQUZCQUJBS0lRSWdBeWdDQkNFRkFrQWdBZ1JBSUFNb0Fnd2hBQ01BUVVCcUlnRWtBQ0FCUVVCckpBQkJBQ0FGSUFBYklRSU1BUXNqQUVGQWFpSUNKQUFnQUNBRlRnUkFJQUpDQURjQ0hDQUNRZ0EzQWlRZ0FrSUFOd0lzSUFKQ0FEY0NGQ0FDUVFBMkFoQWdBaUFCTmdJTUlBSWdCRFlDQkNBQ1FRQTJBandnQWtLQmdJQ0FnSUNBZ0FFM0FqUWdBaUFBTmdJSUlBUWdBa0VFYWlBRklBVkJBVUVBSUFRb0FnQW9BaFFSQXdBZ0FFRUFJQUlvQWh3YklRWUxJQUpCUUdza0FDQUdJZ0lOQUNNQVFVQnFJZ0lrQUNBQ1FRQTJBaEFnQWtHOENEWUNEQ0FDSUFBMkFnZ2dBaUFCTmdJRVFRQWhBQ0FDUVJScVFTY1FEQ0FDUVFBMkFqd2dBa0VCT2dBN0lBUWdBa0VFYWlBRlFRRkJBQ0FFS0FJQUtBSVlFUUlBQWtBQ1FBSkFJQUlvQWlnT0FnQUJBZ3NnQWlnQ0dFRUFJQUlvQWlSQkFVWWJRUUFnQWlnQ0lFRUJSaHRCQUNBQ0tBSXNRUUZHR3lFQURBRUxJQUlvQWh4QkFVY0VRQ0FDS0FJc0RRRWdBaWdDSUVFQlJ3MEJJQUlvQWlSQkFVY05BUXNnQWlnQ0ZDRUFDeUFDUVVCckpBQWdBQ0VDQ3lBRFFSQnFKQUFnQWd1Z0FRRUNmeU1BUVVCcUlnTWtBQUovUVFFZ0FDQUJRUUFRQ2cwQUdrRUFJQUZGRFFBYVFRQWdBVUhzQ0JBZ0lnRkZEUUFhSUFOQkNHcEJPQkFNSUFOQkFUb0FPeUFEUVg4MkFoQWdBeUFBTmdJTUlBTWdBVFlDQkNBRFFRRTJBalFnQVNBRFFRUnFJQUlvQWdCQkFTQUJLQUlBS0FJY0VRQUFJQU1vQWh3aUFFRUJSZ1JBSUFJZ0F5Z0NGRFlDQUFzZ0FFRUJSZ3NoQkNBRFFVQnJKQUFnQkFzS0FDQUFJQUZCQUJBS0N3UUFJQUFMQzdjU0FnQkJnQWdMcGhKVGREbDBlWEJsWDJsdVptOEFBQUFBNUFVQUFBQUVBQUJPTVRCZlgyTjRlR0ZpYVhZeE1UWmZYM05vYVcxZmRIbHdaVjlwYm1adlJRQUFBQUFNQmdBQUdBUUFBQkFFQUFCT01UQmZYMk40ZUdGaWFYWXhNVGRmWDJOc1lYTnpYM1I1Y0dWZmFXNW1iMFVBQUFBTUJnQUFTQVFBQUR3RUFBQk9NVEJmWDJONGVHRmlhWFl4TVRkZlgzQmlZWE5sWDNSNWNHVmZhVzVtYjBVQUFBQU1CZ0FBZUFRQUFEd0VBQUJPTVRCZlgyTjRlR0ZpYVhZeE1UbGZYM0J2YVc1MFpYSmZkSGx3WlY5cGJtWnZSUUFNQmdBQXFBUUFBSndFQUFBQUFBQUFIQVVBQUFFQUFBQUNBQUFBQXdBQUFBUUFBQUFGQUFBQVRqRXdYMTlqZUhoaFltbDJNVEl6WDE5bWRXNWtZVzFsYm5SaGJGOTBlWEJsWDJsdVptOUZBQXdHQUFEMEJBQUFQQVFBQUhZQUFBRGdCQUFBS0FVQUFHSUFBQURnQkFBQU5BVUFBR01BQUFEZ0JBQUFRQVVBQUdnQUFBRGdCQUFBVEFVQUFHRUFBQURnQkFBQVdBVUFBSE1BQUFEZ0JBQUFaQVVBQUhRQUFBRGdCQUFBY0FVQUFHa0FBQURnQkFBQWZBVUFBR29BQUFEZ0JBQUFpQVVBQUd3QUFBRGdCQUFBbEFVQUFHMEFBQURnQkFBQW9BVUFBSGdBQUFEZ0JBQUFyQVVBQUhrQUFBRGdCQUFBdUFVQUFHWUFBQURnQkFBQXhBVUFBR1FBQUFEZ0JBQUEwQVVBQUFBQUFBQnNCQUFBQVFBQUFBWUFBQUFEQUFBQUJBQUFBQWNBQUFBSUFBQUFDUUFBQUFvQUFBQUFBQUFBVkFZQUFBRUFBQUFMQUFBQUF3QUFBQVFBQUFBSEFBQUFEQUFBQUEwQUFBQU9BQUFBVGpFd1gxOWplSGhoWW1sMk1USXdYMTl6YVY5amJHRnpjMTkwZVhCbFgybHVabTlGQUFBQUFBd0dBQUFzQmdBQWJBUUFBSFZ1YzJsbmJtVmtJSE5vYjNKMEFIVnVjMmxuYm1Wa0lHbHVkQUJtYkc5aGRBQjFhVzUwTmpSZmRBQjFibk5wWjI1bFpDQmphR0Z5QUdKdmIyd0FkVzV6YVdkdVpXUWdiRzl1WndCemRHUTZPbmR6ZEhKcGJtY0FjM1JrT2pwemRISnBibWNBYzNSa09qcDFNVFp6ZEhKcGJtY0FjM1JrT2pwMU16SnpkSEpwYm1jQVpHOTFZbXhsQUhadmFXUUFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGMyaHZjblErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZ1YzJsbmJtVmtJSE5vYjNKMFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4cGJuUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BIVnVjMmxuYm1Wa0lHbHVkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhabXh2WVhRK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhWcGJuUTRYM1ErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQR2x1ZERoZmRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGRXbHVkREUyWDNRK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdsdWRERTJYM1ErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZwYm5RMk5GOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHBiblEyTkY5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWFXNTBNekpmZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YVc1ME16SmZkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhZMmhoY2o0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4ZFc1emFXZHVaV1FnWTJoaGNqNEFjM1JrT2pwaVlYTnBZMTl6ZEhKcGJtYzhkVzV6YVdkdVpXUWdZMmhoY2o0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YzJsbmJtVmtJR05vWVhJK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEd4dmJtYytBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BIVnVjMmxuYm1Wa0lHeHZibWMrQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQR1J2ZFdKc1pUNEFUbE4wTTE5Zk1qRXlZbUZ6YVdOZmMzUnlhVzVuU1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVNVRYemxoYkd4dlkyRjBiM0pKWTBWRlJVVUFBQUFBNUFVQUFKSUpBQUJPVTNRelgxOHlNVEppWVhOcFkxOXpkSEpwYm1kSmFFNVRYekV4WTJoaGNsOTBjbUZwZEhOSmFFVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsb1JVVkZSUUFBNUFVQUFOd0pBQUJPVTNRelgxOHlNVEppWVhOcFkxOXpkSEpwYm1kSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsM1JVVkZSUUFBNUFVQUFDUUtBQUJPVTNRelgxOHlNVEppWVhOcFkxOXpkSEpwYm1kSlJITk9VMTh4TVdOb1lYSmZkSEpoYVhSelNVUnpSVVZPVTE4NVlXeHNiMk5oZEc5eVNVUnpSVVZGUlFBQUFPUUZBQUJzQ2dBQVRsTjBNMTlmTWpFeVltRnphV05mYzNSeWFXNW5TVVJwVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxFYVVWRlRsTmZPV0ZzYkc5allYUnZja2xFYVVWRlJVVUFBQURrQlFBQXVBb0FBRTR4TUdWdGMyTnlhWEIwWlc0emRtRnNSUUFBNUFVQUFBUUxBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxqUlVVQUFPUUZBQUFnQ3dBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSllVVkZBQURrQlFBQVNBc0FBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV2hGUlFBQTVBVUFBSEFMQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBselJVVUFBT1FGQUFDWUN3QUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpkRVZGQUFEa0JRQUF3QXNBQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1dsRlJRQUE1QVVBQU9nTEFBQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHFSVVVBQU9RRkFBQVFEQUFBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYkVWRkFBRGtCUUFBT0F3QUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXMUZSUUFBNUFVQUFHQU1BQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGw0UlVVQUFPUUZBQUNJREFBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmVVVkZBQURrQlFBQXNBd0FBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV1pGUlFBQTVBVUFBTmdNQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsa1JVVUFBT1FGQUFBQURRQkJxQm9MQXpBUEFRPT0iO2Z1bmN0aW9uIGdldEJpbmFyeVN5bmMoZmlsZSl7aWYoZmlsZT09d2FzbUJpbmFyeUZpbGUmJndhc21CaW5hcnkpe3JldHVybiBuZXcgVWludDhBcnJheSh3YXNtQmluYXJ5KX12YXIgYmluYXJ5PXRyeVBhcnNlQXNEYXRhVVJJKGZpbGUpO2lmKGJpbmFyeSl7cmV0dXJuIGJpbmFyeX1pZihyZWFkQmluYXJ5KXtyZXR1cm4gcmVhZEJpbmFyeShmaWxlKX10aHJvdyAiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWQifWZ1bmN0aW9uIGdldEJpbmFyeVByb21pc2UoYmluYXJ5RmlsZSl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PmdldEJpbmFyeVN5bmMoYmluYXJ5RmlsZSkpfWZ1bmN0aW9uIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIoYmluYXJ5RmlsZSxpbXBvcnRzLHJlY2VpdmVyKXtyZXR1cm4gZ2V0QmluYXJ5UHJvbWlzZShiaW5hcnlGaWxlKS50aGVuKGJpbmFyeT0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYmluYXJ5LGltcG9ydHMpKS50aGVuKHJlY2VpdmVyLHJlYXNvbj0+e2VycihgZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogJHtyZWFzb259YCk7YWJvcnQocmVhc29uKTt9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKGJpbmFyeSxiaW5hcnlGaWxlLGltcG9ydHMsY2FsbGJhY2spe3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKGJpbmFyeUZpbGUsaW1wb3J0cyxjYWxsYmFjayl9ZnVuY3Rpb24gY3JlYXRlV2FzbSgpe3ZhciBpbmZvPXsiYSI6d2FzbUltcG9ydHN9O2Z1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSxtb2R1bGUpe3dhc21FeHBvcnRzPWluc3RhbmNlLmV4cG9ydHM7d2FzbU1lbW9yeT13YXNtRXhwb3J0c1siayJdO3VwZGF0ZU1lbW9yeVZpZXdzKCk7YWRkT25Jbml0KHdhc21FeHBvcnRzWyJsIl0pO3JlbW92ZVJ1bkRlcGVuZGVuY3koKTtyZXR1cm4gd2FzbUV4cG9ydHN9YWRkUnVuRGVwZW5kZW5jeSgpO2Z1bmN0aW9uIHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KHJlc3VsdCl7cmVjZWl2ZUluc3RhbmNlKHJlc3VsdFsiaW5zdGFuY2UiXSk7fWlmKE1vZHVsZVsiaW5zdGFudGlhdGVXYXNtIl0pe3RyeXtyZXR1cm4gTW9kdWxlWyJpbnN0YW50aWF0ZVdhc20iXShpbmZvLHJlY2VpdmVJbnN0YW5jZSl9Y2F0Y2goZSl7ZXJyKGBNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAke2V9YCk7cmVhZHlQcm9taXNlUmVqZWN0KGUpO319aW5zdGFudGlhdGVBc3luYyh3YXNtQmluYXJ5LHdhc21CaW5hcnlGaWxlLGluZm8scmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQpLmNhdGNoKHJlYWR5UHJvbWlzZVJlamVjdCk7cmV0dXJuIHt9fXZhciBjYWxsUnVudGltZUNhbGxiYWNrcz1jYWxsYmFja3M9Pnt3aGlsZShjYWxsYmFja3MubGVuZ3RoPjApe2NhbGxiYWNrcy5zaGlmdCgpKE1vZHVsZSk7fX07TW9kdWxlWyJub0V4aXRSdW50aW1lIl18fHRydWU7dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludD0ocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2UpPT57fTt2YXIgZW1iaW5kX2luaXRfY2hhckNvZGVzPSgpPT57dmFyIGNvZGVzPW5ldyBBcnJheSgyNTYpO2Zvcih2YXIgaT0wO2k8MjU2OysraSl7Y29kZXNbaV09U3RyaW5nLmZyb21DaGFyQ29kZShpKTt9ZW1iaW5kX2NoYXJDb2Rlcz1jb2Rlczt9O3ZhciBlbWJpbmRfY2hhckNvZGVzO3ZhciByZWFkTGF0aW4xU3RyaW5nPXB0cj0+e3ZhciByZXQ9IiI7dmFyIGM9cHRyO3doaWxlKEhFQVBVOFtjXSl7cmV0Kz1lbWJpbmRfY2hhckNvZGVzW0hFQVBVOFtjKytdXTt9cmV0dXJuIHJldH07dmFyIGF3YWl0aW5nRGVwZW5kZW5jaWVzPXt9O3ZhciByZWdpc3RlcmVkVHlwZXM9e307dmFyIEJpbmRpbmdFcnJvcjt2YXIgdGhyb3dCaW5kaW5nRXJyb3I9bWVzc2FnZT0+e3Rocm93IG5ldyBCaW5kaW5nRXJyb3IobWVzc2FnZSl9O2Z1bmN0aW9uIHNoYXJlZFJlZ2lzdGVyVHlwZShyYXdUeXBlLHJlZ2lzdGVyZWRJbnN0YW5jZSxvcHRpb25zPXt9KXt2YXIgbmFtZT1yZWdpc3RlcmVkSW5zdGFuY2UubmFtZTtpZighcmF3VHlwZSl7dGhyb3dCaW5kaW5nRXJyb3IoYHR5cGUgIiR7bmFtZX0iIG11c3QgaGF2ZSBhIHBvc2l0aXZlIGludGVnZXIgdHlwZWlkIHBvaW50ZXJgKTt9aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXtpZihvcHRpb25zLmlnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnMpe3JldHVybn1lbHNlIHt0aHJvd0JpbmRpbmdFcnJvcihgQ2Fubm90IHJlZ2lzdGVyIHR5cGUgJyR7bmFtZX0nIHR3aWNlYCk7fX1yZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV09cmVnaXN0ZXJlZEluc3RhbmNlO2lmKGF3YWl0aW5nRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXt2YXIgY2FsbGJhY2tzPWF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2RlbGV0ZSBhd2FpdGluZ0RlcGVuZGVuY2llc1tyYXdUeXBlXTtjYWxsYmFja3MuZm9yRWFjaChjYj0+Y2IoKSk7fX1mdW5jdGlvbiByZWdpc3RlclR5cGUocmF3VHlwZSxyZWdpc3RlcmVkSW5zdGFuY2Usb3B0aW9ucz17fSl7aWYoISgiYXJnUGFja0FkdmFuY2UiaW4gcmVnaXN0ZXJlZEluc3RhbmNlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcigicmVnaXN0ZXJUeXBlIHJlZ2lzdGVyZWRJbnN0YW5jZSByZXF1aXJlcyBhcmdQYWNrQWR2YW5jZSIpfXJldHVybiBzaGFyZWRSZWdpc3RlclR5cGUocmF3VHlwZSxyZWdpc3RlcmVkSW5zdGFuY2Usb3B0aW9ucyl9dmFyIEdlbmVyaWNXaXJlVHlwZVNpemU9ODt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfYm9vbD0ocmF3VHlwZSxuYW1lLHRydWVWYWx1ZSxmYWxzZVZhbHVlKT0+e25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLCJmcm9tV2lyZVR5cGUiOmZ1bmN0aW9uKHd0KXtyZXR1cm4gISF3dH0sInRvV2lyZVR5cGUiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe3JldHVybiBvP3RydWVWYWx1ZTpmYWxzZVZhbHVlfSwiYXJnUGFja0FkdmFuY2UiOkdlbmVyaWNXaXJlVHlwZVNpemUsInJlYWRWYWx1ZUZyb21Qb2ludGVyIjpmdW5jdGlvbihwb2ludGVyKXtyZXR1cm4gdGhpc1siZnJvbVdpcmVUeXBlIl0oSEVBUFU4W3BvaW50ZXJdKX0sZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KTt9O3ZhciBlbXZhbF9mcmVlbGlzdD1bXTt2YXIgZW12YWxfaGFuZGxlcz1bXTt2YXIgX19lbXZhbF9kZWNyZWY9aGFuZGxlPT57aWYoaGFuZGxlPjkmJjA9PT0tLWVtdmFsX2hhbmRsZXNbaGFuZGxlKzFdKXtlbXZhbF9oYW5kbGVzW2hhbmRsZV09dW5kZWZpbmVkO2VtdmFsX2ZyZWVsaXN0LnB1c2goaGFuZGxlKTt9fTt2YXIgY291bnRfZW12YWxfaGFuZGxlcz0oKT0+ZW12YWxfaGFuZGxlcy5sZW5ndGgvMi01LWVtdmFsX2ZyZWVsaXN0Lmxlbmd0aDt2YXIgaW5pdF9lbXZhbD0oKT0+e2VtdmFsX2hhbmRsZXMucHVzaCgwLDEsdW5kZWZpbmVkLDEsbnVsbCwxLHRydWUsMSxmYWxzZSwxKTtNb2R1bGVbImNvdW50X2VtdmFsX2hhbmRsZXMiXT1jb3VudF9lbXZhbF9oYW5kbGVzO307dmFyIEVtdmFsPXt0b1ZhbHVlOmhhbmRsZT0+e2lmKCFoYW5kbGUpe3Rocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSAiK2hhbmRsZSk7fXJldHVybiBlbXZhbF9oYW5kbGVzW2hhbmRsZV19LHRvSGFuZGxlOnZhbHVlPT57c3dpdGNoKHZhbHVlKXtjYXNlIHVuZGVmaW5lZDpyZXR1cm4gMjtjYXNlIG51bGw6cmV0dXJuIDQ7Y2FzZSB0cnVlOnJldHVybiA2O2Nhc2UgZmFsc2U6cmV0dXJuIDg7ZGVmYXVsdDp7Y29uc3QgaGFuZGxlPWVtdmFsX2ZyZWVsaXN0LnBvcCgpfHxlbXZhbF9oYW5kbGVzLmxlbmd0aDtlbXZhbF9oYW5kbGVzW2hhbmRsZV09dmFsdWU7ZW12YWxfaGFuZGxlc1toYW5kbGUrMV09MTtyZXR1cm4gaGFuZGxlfX19fTtmdW5jdGlvbiByZWFkUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gdGhpc1siZnJvbVdpcmVUeXBlIl0oSEVBUFUzMltwb2ludGVyPj4yXSl9dmFyIEVtVmFsVHlwZT17bmFtZToiZW1zY3JpcHRlbjo6dmFsIiwiZnJvbVdpcmVUeXBlIjpoYW5kbGU9Pnt2YXIgcnY9RW12YWwudG9WYWx1ZShoYW5kbGUpO19fZW12YWxfZGVjcmVmKGhhbmRsZSk7cmV0dXJuIHJ2fSwidG9XaXJlVHlwZSI6KGRlc3RydWN0b3JzLHZhbHVlKT0+RW12YWwudG9IYW5kbGUodmFsdWUpLCJhcmdQYWNrQWR2YW5jZSI6R2VuZXJpY1dpcmVUeXBlU2l6ZSwicmVhZFZhbHVlRnJvbVBvaW50ZXIiOnJlYWRQb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfTt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfZW12YWw9cmF3VHlwZT0+cmVnaXN0ZXJUeXBlKHJhd1R5cGUsRW1WYWxUeXBlKTt2YXIgZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcj0obmFtZSx3aWR0aCk9Pntzd2l0Y2god2lkdGgpe2Nhc2UgNDpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKEhFQVBGMzJbcG9pbnRlcj4+Ml0pfTtjYXNlIDg6cmV0dXJuIGZ1bmN0aW9uKHBvaW50ZXIpe3JldHVybiB0aGlzWyJmcm9tV2lyZVR5cGUiXShIRUFQRjY0W3BvaW50ZXI+PjNdKX07ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnZhbGlkIGZsb2F0IHdpZHRoICgke3dpZHRofSk6ICR7bmFtZX1gKX19O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdD0ocmF3VHlwZSxuYW1lLHNpemUpPT57bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsImZyb21XaXJlVHlwZSI6dmFsdWU9PnZhbHVlLCJ0b1dpcmVUeXBlIjooZGVzdHJ1Y3RvcnMsdmFsdWUpPT52YWx1ZSwiYXJnUGFja0FkdmFuY2UiOkdlbmVyaWNXaXJlVHlwZVNpemUsInJlYWRWYWx1ZUZyb21Qb2ludGVyIjpmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2l6ZSksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KTt9O3ZhciBpbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXI9KG5hbWUsd2lkdGgsc2lnbmVkKT0+e3N3aXRjaCh3aWR0aCl7Y2FzZSAxOnJldHVybiBzaWduZWQ/cG9pbnRlcj0+SEVBUDhbcG9pbnRlcl06cG9pbnRlcj0+SEVBUFU4W3BvaW50ZXJdO2Nhc2UgMjpyZXR1cm4gc2lnbmVkP3BvaW50ZXI9PkhFQVAxNltwb2ludGVyPj4xXTpwb2ludGVyPT5IRUFQVTE2W3BvaW50ZXI+PjFdO2Nhc2UgNDpyZXR1cm4gc2lnbmVkP3BvaW50ZXI9PkhFQVAzMltwb2ludGVyPj4yXTpwb2ludGVyPT5IRUFQVTMyW3BvaW50ZXI+PjJdO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBpbnRlZ2VyIHdpZHRoICgke3dpZHRofSk6ICR7bmFtZX1gKX19O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyPShwcmltaXRpdmVUeXBlLG5hbWUsc2l6ZSxtaW5SYW5nZSxtYXhSYW5nZSk9PntuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7dmFyIGZyb21XaXJlVHlwZT12YWx1ZT0+dmFsdWU7aWYobWluUmFuZ2U9PT0wKXt2YXIgYml0c2hpZnQ9MzItOCpzaXplO2Zyb21XaXJlVHlwZT12YWx1ZT0+dmFsdWU8PGJpdHNoaWZ0Pj4+Yml0c2hpZnQ7fXZhciBpc1Vuc2lnbmVkVHlwZT1uYW1lLmluY2x1ZGVzKCJ1bnNpZ25lZCIpO3ZhciBjaGVja0Fzc2VydGlvbnM9KHZhbHVlLHRvVHlwZU5hbWUpPT57fTt2YXIgdG9XaXJlVHlwZTtpZihpc1Vuc2lnbmVkVHlwZSl7dG9XaXJlVHlwZT1mdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7Y2hlY2tBc3NlcnRpb25zKHZhbHVlLHRoaXMubmFtZSk7cmV0dXJuIHZhbHVlPj4+MH07fWVsc2Uge3RvV2lyZVR5cGU9ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2NoZWNrQXNzZXJ0aW9ucyh2YWx1ZSx0aGlzLm5hbWUpO3JldHVybiB2YWx1ZX07fXJlZ2lzdGVyVHlwZShwcmltaXRpdmVUeXBlLHtuYW1lOm5hbWUsImZyb21XaXJlVHlwZSI6ZnJvbVdpcmVUeXBlLCJ0b1dpcmVUeXBlIjp0b1dpcmVUeXBlLCJhcmdQYWNrQWR2YW5jZSI6R2VuZXJpY1dpcmVUeXBlU2l6ZSwicmVhZFZhbHVlRnJvbVBvaW50ZXIiOmludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNpemUsbWluUmFuZ2UhPT0wKSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pO307dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3PShyYXdUeXBlLGRhdGFUeXBlSW5kZXgsbmFtZSk9Pnt2YXIgdHlwZU1hcHBpbmc9W0ludDhBcnJheSxVaW50OEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5XTt2YXIgVEE9dHlwZU1hcHBpbmdbZGF0YVR5cGVJbmRleF07ZnVuY3Rpb24gZGVjb2RlTWVtb3J5VmlldyhoYW5kbGUpe3ZhciBzaXplPUhFQVBVMzJbaGFuZGxlPj4yXTt2YXIgZGF0YT1IRUFQVTMyW2hhbmRsZSs0Pj4yXTtyZXR1cm4gbmV3IFRBKEhFQVA4LmJ1ZmZlcixkYXRhLHNpemUpfW5hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLCJmcm9tV2lyZVR5cGUiOmRlY29kZU1lbW9yeVZpZXcsImFyZ1BhY2tBZHZhbmNlIjpHZW5lcmljV2lyZVR5cGVTaXplLCJyZWFkVmFsdWVGcm9tUG9pbnRlciI6ZGVjb2RlTWVtb3J5Vmlld30se2lnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnM6dHJ1ZX0pO307dmFyIHN0cmluZ1RvVVRGOEFycmF5PShzdHIsaGVhcCxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKT0+e2lmKCEobWF4Qnl0ZXNUb1dyaXRlPjApKXJldHVybiAwO3ZhciBzdGFydElkeD1vdXRJZHg7dmFyIGVuZElkeD1vdXRJZHgrbWF4Qnl0ZXNUb1dyaXRlLTE7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIHU9c3RyLmNoYXJDb2RlQXQoaSk7aWYodT49NTUyOTYmJnU8PTU3MzQzKXt2YXIgdTE9c3RyLmNoYXJDb2RlQXQoKytpKTt1PTY1NTM2KygodSYxMDIzKTw8MTApfHUxJjEwMjM7fWlmKHU8PTEyNyl7aWYob3V0SWR4Pj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109dTt9ZWxzZSBpZih1PD0yMDQ3KXtpZihvdXRJZHgrMT49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTE5Mnx1Pj42O2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzO31lbHNlIGlmKHU8PTY1NTM1KXtpZihvdXRJZHgrMj49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTIyNHx1Pj4xMjtoZWFwW291dElkeCsrXT0xMjh8dT4+NiY2MztoZWFwW291dElkeCsrXT0xMjh8dSY2Mzt9ZWxzZSB7aWYob3V0SWR4KzM+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0yNDB8dT4+MTg7aGVhcFtvdXRJZHgrK109MTI4fHU+PjEyJjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1Pj42JjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzO319aGVhcFtvdXRJZHhdPTA7cmV0dXJuIG91dElkeC1zdGFydElkeH07dmFyIHN0cmluZ1RvVVRGOD0oc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpPT5zdHJpbmdUb1VURjhBcnJheShzdHIsSEVBUFU4LG91dFB0cixtYXhCeXRlc1RvV3JpdGUpO3ZhciBsZW5ndGhCeXRlc1VURjg9c3RyPT57dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjPXN0ci5jaGFyQ29kZUF0KGkpO2lmKGM8PTEyNyl7bGVuKys7fWVsc2UgaWYoYzw9MjA0Nyl7bGVuKz0yO31lbHNlIGlmKGM+PTU1Mjk2JiZjPD01NzM0Myl7bGVuKz00OysraTt9ZWxzZSB7bGVuKz0zO319cmV0dXJuIGxlbn07dmFyIFVURjhEZWNvZGVyPXR5cGVvZiBUZXh0RGVjb2RlciE9InVuZGVmaW5lZCI/bmV3IFRleHREZWNvZGVyKCJ1dGY4Iik6dW5kZWZpbmVkO3ZhciBVVEY4QXJyYXlUb1N0cmluZz0oaGVhcE9yQXJyYXksaWR4LG1heEJ5dGVzVG9SZWFkKT0+e3ZhciBlbmRJZHg9aWR4K21heEJ5dGVzVG9SZWFkO3ZhciBlbmRQdHI9aWR4O3doaWxlKGhlYXBPckFycmF5W2VuZFB0cl0mJiEoZW5kUHRyPj1lbmRJZHgpKSsrZW5kUHRyO2lmKGVuZFB0ci1pZHg+MTYmJmhlYXBPckFycmF5LmJ1ZmZlciYmVVRGOERlY29kZXIpe3JldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUoaGVhcE9yQXJyYXkuc3ViYXJyYXkoaWR4LGVuZFB0cikpfXZhciBzdHI9IiI7d2hpbGUoaWR4PGVuZFB0cil7dmFyIHUwPWhlYXBPckFycmF5W2lkeCsrXTtpZighKHUwJjEyOCkpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7Y29udGludWV9dmFyIHUxPWhlYXBPckFycmF5W2lkeCsrXSY2MztpZigodTAmMjI0KT09MTkyKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoKHUwJjMxKTw8Nnx1MSk7Y29udGludWV9dmFyIHUyPWhlYXBPckFycmF5W2lkeCsrXSY2MztpZigodTAmMjQwKT09MjI0KXt1MD0odTAmMTUpPDwxMnx1MTw8Nnx1Mjt9ZWxzZSB7dTA9KHUwJjcpPDwxOHx1MTw8MTJ8dTI8PDZ8aGVhcE9yQXJyYXlbaWR4KytdJjYzO31pZih1MDw2NTUzNil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTt9ZWxzZSB7dmFyIGNoPXUwLTY1NTM2O3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxjaD4+MTAsNTYzMjB8Y2gmMTAyMyk7fX1yZXR1cm4gc3RyfTt2YXIgVVRGOFRvU3RyaW5nPShwdHIsbWF4Qnl0ZXNUb1JlYWQpPT5wdHI/VVRGOEFycmF5VG9TdHJpbmcoSEVBUFU4LHB0cixtYXhCeXRlc1RvUmVhZCk6IiI7dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmc9KHJhd1R5cGUsbmFtZSk9PntuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7dmFyIHN0ZFN0cmluZ0lzVVRGOD1uYW1lPT09InN0ZDo6c3RyaW5nIjtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLCJmcm9tV2lyZVR5cGUiKHZhbHVlKXt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBwYXlsb2FkPXZhbHVlKzQ7dmFyIHN0cjtpZihzdGRTdHJpbmdJc1VURjgpe3ZhciBkZWNvZGVTdGFydFB0cj1wYXlsb2FkO2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj1wYXlsb2FkK2k7aWYoaT09bGVuZ3RofHxIRUFQVThbY3VycmVudEJ5dGVQdHJdPT0wKXt2YXIgbWF4UmVhZD1jdXJyZW50Qnl0ZVB0ci1kZWNvZGVTdGFydFB0cjt2YXIgc3RyaW5nU2VnbWVudD1VVEY4VG9TdHJpbmcoZGVjb2RlU3RhcnRQdHIsbWF4UmVhZCk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudDt9ZWxzZSB7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDApO3N0cis9c3RyaW5nU2VnbWVudDt9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrMTt9fX1lbHNlIHt2YXIgYT1uZXcgQXJyYXkobGVuZ3RoKTtmb3IodmFyIGk9MDtpPGxlbmd0aDsrK2kpe2FbaV09U3RyaW5nLmZyb21DaGFyQ29kZShIRUFQVThbcGF5bG9hZCtpXSk7fXN0cj1hLmpvaW4oIiIpO31fZnJlZSh2YWx1ZSk7cmV0dXJuIHN0cn0sInRvV2lyZVR5cGUiKGRlc3RydWN0b3JzLHZhbHVlKXtpZih2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YWx1ZT1uZXcgVWludDhBcnJheSh2YWx1ZSk7fXZhciBsZW5ndGg7dmFyIHZhbHVlSXNPZlR5cGVTdHJpbmc9dHlwZW9mIHZhbHVlPT0ic3RyaW5nIjtpZighKHZhbHVlSXNPZlR5cGVTdHJpbmd8fHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpKXt0aHJvd0JpbmRpbmdFcnJvcigiQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBzdGQ6OnN0cmluZyIpO31pZihzdGRTdHJpbmdJc1VURjgmJnZhbHVlSXNPZlR5cGVTdHJpbmcpe2xlbmd0aD1sZW5ndGhCeXRlc1VURjgodmFsdWUpO31lbHNlIHtsZW5ndGg9dmFsdWUubGVuZ3RoO312YXIgYmFzZT1fbWFsbG9jKDQrbGVuZ3RoKzEpO3ZhciBwdHI9YmFzZSs0O0hFQVBVMzJbYmFzZT4+Ml09bGVuZ3RoO2lmKHN0ZFN0cmluZ0lzVVRGOCYmdmFsdWVJc09mVHlwZVN0cmluZyl7c3RyaW5nVG9VVEY4KHZhbHVlLHB0cixsZW5ndGgrMSk7fWVsc2Uge2lmKHZhbHVlSXNPZlR5cGVTdHJpbmcpe2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7dmFyIGNoYXJDb2RlPXZhbHVlLmNoYXJDb2RlQXQoaSk7aWYoY2hhckNvZGU+MjU1KXtfZnJlZShwdHIpO3Rocm93QmluZGluZ0Vycm9yKCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHMiKTt9SEVBUFU4W3B0citpXT1jaGFyQ29kZTt9fWVsc2Uge2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7SEVBUFU4W3B0citpXT12YWx1ZVtpXTt9fX1pZihkZXN0cnVjdG9ycyE9PW51bGwpe2Rlc3RydWN0b3JzLnB1c2goX2ZyZWUsYmFzZSk7fXJldHVybiBiYXNlfSwiYXJnUGFja0FkdmFuY2UiOkdlbmVyaWNXaXJlVHlwZVNpemUsInJlYWRWYWx1ZUZyb21Qb2ludGVyIjpyZWFkUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpO319KTt9O3ZhciBVVEYxNkRlY29kZXI9dHlwZW9mIFRleHREZWNvZGVyIT0idW5kZWZpbmVkIj9uZXcgVGV4dERlY29kZXIoInV0Zi0xNmxlIik6dW5kZWZpbmVkO3ZhciBVVEYxNlRvU3RyaW5nPShwdHIsbWF4Qnl0ZXNUb1JlYWQpPT57dmFyIGVuZFB0cj1wdHI7dmFyIGlkeD1lbmRQdHI+PjE7dmFyIG1heElkeD1pZHgrbWF4Qnl0ZXNUb1JlYWQvMjt3aGlsZSghKGlkeD49bWF4SWR4KSYmSEVBUFUxNltpZHhdKSsraWR4O2VuZFB0cj1pZHg8PDE7aWYoZW5kUHRyLXB0cj4zMiYmVVRGMTZEZWNvZGVyKXJldHVybiBVVEYxNkRlY29kZXIuZGVjb2RlKEhFQVBVOC5zdWJhcnJheShwdHIsZW5kUHRyKSk7dmFyIHN0cj0iIjtmb3IodmFyIGk9MDshKGk+PW1heEJ5dGVzVG9SZWFkLzIpOysraSl7dmFyIGNvZGVVbml0PUhFQVAxNltwdHIraSoyPj4xXTtpZihjb2RlVW5pdD09MClicmVhaztzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVVuaXQpO31yZXR1cm4gc3RyfTt2YXIgc3RyaW5nVG9VVEYxNj0oc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpPT57bWF4Qnl0ZXNUb1dyaXRlPz89MjE0NzQ4MzY0NztpZihtYXhCeXRlc1RvV3JpdGU8MilyZXR1cm4gMDttYXhCeXRlc1RvV3JpdGUtPTI7dmFyIHN0YXJ0UHRyPW91dFB0cjt2YXIgbnVtQ2hhcnNUb1dyaXRlPW1heEJ5dGVzVG9Xcml0ZTxzdHIubGVuZ3RoKjI/bWF4Qnl0ZXNUb1dyaXRlLzI6c3RyLmxlbmd0aDtmb3IodmFyIGk9MDtpPG51bUNoYXJzVG9Xcml0ZTsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtIRUFQMTZbb3V0UHRyPj4xXT1jb2RlVW5pdDtvdXRQdHIrPTI7fUhFQVAxNltvdXRQdHI+PjFdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn07dmFyIGxlbmd0aEJ5dGVzVVRGMTY9c3RyPT5zdHIubGVuZ3RoKjI7dmFyIFVURjMyVG9TdHJpbmc9KHB0cixtYXhCeXRlc1RvUmVhZCk9Pnt2YXIgaT0wO3ZhciBzdHI9IiI7d2hpbGUoIShpPj1tYXhCeXRlc1RvUmVhZC80KSl7dmFyIHV0ZjMyPUhFQVAzMltwdHIraSo0Pj4yXTtpZih1dGYzMj09MClicmVhazsrK2k7aWYodXRmMzI+PTY1NTM2KXt2YXIgY2g9dXRmMzItNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKTt9ZWxzZSB7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHV0ZjMyKTt9fXJldHVybiBzdHJ9O3ZhciBzdHJpbmdUb1VURjMyPShzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSk9PnttYXhCeXRlc1RvV3JpdGU/Pz0yMTQ3NDgzNjQ3O2lmKG1heEJ5dGVzVG9Xcml0ZTw0KXJldHVybiAwO3ZhciBzdGFydFB0cj1vdXRQdHI7dmFyIGVuZFB0cj1zdGFydFB0cittYXhCeXRlc1RvV3JpdGUtNDtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgY29kZVVuaXQ9c3RyLmNoYXJDb2RlQXQoaSk7aWYoY29kZVVuaXQ+PTU1Mjk2JiZjb2RlVW5pdDw9NTczNDMpe3ZhciB0cmFpbFN1cnJvZ2F0ZT1zdHIuY2hhckNvZGVBdCgrK2kpO2NvZGVVbml0PTY1NTM2KygoY29kZVVuaXQmMTAyMyk8PDEwKXx0cmFpbFN1cnJvZ2F0ZSYxMDIzO31IRUFQMzJbb3V0UHRyPj4yXT1jb2RlVW5pdDtvdXRQdHIrPTQ7aWYob3V0UHRyKzQ+ZW5kUHRyKWJyZWFrfUhFQVAzMltvdXRQdHI+PjJdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn07dmFyIGxlbmd0aEJ5dGVzVVRGMzI9c3RyPT57dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtpZihjb2RlVW5pdD49NTUyOTYmJmNvZGVVbml0PD01NzM0MykrK2k7bGVuKz00O31yZXR1cm4gbGVufTt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmc9KHJhd1R5cGUsY2hhclNpemUsbmFtZSk9PntuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7dmFyIGRlY29kZVN0cmluZyxlbmNvZGVTdHJpbmcscmVhZENoYXJBdCxsZW5ndGhCeXRlc1VURjtpZihjaGFyU2l6ZT09PTIpe2RlY29kZVN0cmluZz1VVEYxNlRvU3RyaW5nO2VuY29kZVN0cmluZz1zdHJpbmdUb1VURjE2O2xlbmd0aEJ5dGVzVVRGPWxlbmd0aEJ5dGVzVVRGMTY7cmVhZENoYXJBdD1wb2ludGVyPT5IRUFQVTE2W3BvaW50ZXI+PjFdO31lbHNlIGlmKGNoYXJTaXplPT09NCl7ZGVjb2RlU3RyaW5nPVVURjMyVG9TdHJpbmc7ZW5jb2RlU3RyaW5nPXN0cmluZ1RvVVRGMzI7bGVuZ3RoQnl0ZXNVVEY9bGVuZ3RoQnl0ZXNVVEYzMjtyZWFkQ2hhckF0PXBvaW50ZXI9PkhFQVBVMzJbcG9pbnRlcj4+Ml07fXJlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsImZyb21XaXJlVHlwZSI6dmFsdWU9Pnt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBzdHI7dmFyIGRlY29kZVN0YXJ0UHRyPXZhbHVlKzQ7Zm9yKHZhciBpPTA7aTw9bGVuZ3RoOysraSl7dmFyIGN1cnJlbnRCeXRlUHRyPXZhbHVlKzQraSpjaGFyU2l6ZTtpZihpPT1sZW5ndGh8fHJlYWRDaGFyQXQoY3VycmVudEJ5dGVQdHIpPT0wKXt2YXIgbWF4UmVhZEJ5dGVzPWN1cnJlbnRCeXRlUHRyLWRlY29kZVN0YXJ0UHRyO3ZhciBzdHJpbmdTZWdtZW50PWRlY29kZVN0cmluZyhkZWNvZGVTdGFydFB0cixtYXhSZWFkQnl0ZXMpO2lmKHN0cj09PXVuZGVmaW5lZCl7c3RyPXN0cmluZ1NlZ21lbnQ7fWVsc2Uge3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnQ7fWRlY29kZVN0YXJ0UHRyPWN1cnJlbnRCeXRlUHRyK2NoYXJTaXplO319X2ZyZWUodmFsdWUpO3JldHVybiBzdHJ9LCJ0b1dpcmVUeXBlIjooZGVzdHJ1Y3RvcnMsdmFsdWUpPT57aWYoISh0eXBlb2YgdmFsdWU9PSJzdHJpbmciKSl7dGhyb3dCaW5kaW5nRXJyb3IoYENhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gQysrIHN0cmluZyB0eXBlICR7bmFtZX1gKTt9dmFyIGxlbmd0aD1sZW5ndGhCeXRlc1VURih2YWx1ZSk7dmFyIHB0cj1fbWFsbG9jKDQrbGVuZ3RoK2NoYXJTaXplKTtIRUFQVTMyW3B0cj4+Ml09bGVuZ3RoL2NoYXJTaXplO2VuY29kZVN0cmluZyh2YWx1ZSxwdHIrNCxsZW5ndGgrY2hhclNpemUpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpO31yZXR1cm4gcHRyfSwiYXJnUGFja0FkdmFuY2UiOkdlbmVyaWNXaXJlVHlwZVNpemUsInJlYWRWYWx1ZUZyb21Qb2ludGVyIjpyZWFkUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpO319KTt9O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl92b2lkPShyYXdUeXBlLG5hbWUpPT57bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtpc1ZvaWQ6dHJ1ZSxuYW1lOm5hbWUsImFyZ1BhY2tBZHZhbmNlIjowLCJmcm9tV2lyZVR5cGUiOigpPT51bmRlZmluZWQsInRvV2lyZVR5cGUiOihkZXN0cnVjdG9ycyxvKT0+dW5kZWZpbmVkfSk7fTt2YXIgZ2V0SGVhcE1heD0oKT0+MjE0NzQ4MzY0ODt2YXIgZ3Jvd01lbW9yeT1zaXplPT57dmFyIGI9d2FzbU1lbW9yeS5idWZmZXI7dmFyIHBhZ2VzPShzaXplLWIuYnl0ZUxlbmd0aCs2NTUzNSkvNjU1MzY7dHJ5e3dhc21NZW1vcnkuZ3JvdyhwYWdlcyk7dXBkYXRlTWVtb3J5Vmlld3MoKTtyZXR1cm4gMX1jYXRjaChlKXt9fTt2YXIgX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXA9cmVxdWVzdGVkU2l6ZT0+e3ZhciBvbGRTaXplPUhFQVBVOC5sZW5ndGg7cmVxdWVzdGVkU2l6ZT4+Pj0wO3ZhciBtYXhIZWFwU2l6ZT1nZXRIZWFwTWF4KCk7aWYocmVxdWVzdGVkU2l6ZT5tYXhIZWFwU2l6ZSl7cmV0dXJuIGZhbHNlfXZhciBhbGlnblVwPSh4LG11bHRpcGxlKT0+eCsobXVsdGlwbGUteCVtdWx0aXBsZSklbXVsdGlwbGU7Zm9yKHZhciBjdXREb3duPTE7Y3V0RG93bjw9NDtjdXREb3duKj0yKXt2YXIgb3Zlckdyb3duSGVhcFNpemU9b2xkU2l6ZSooMSsuMi9jdXREb3duKTtvdmVyR3Jvd25IZWFwU2l6ZT1NYXRoLm1pbihvdmVyR3Jvd25IZWFwU2l6ZSxyZXF1ZXN0ZWRTaXplKzEwMDY2MzI5Nik7dmFyIG5ld1NpemU9TWF0aC5taW4obWF4SGVhcFNpemUsYWxpZ25VcChNYXRoLm1heChyZXF1ZXN0ZWRTaXplLG92ZXJHcm93bkhlYXBTaXplKSw2NTUzNikpO3ZhciByZXBsYWNlbWVudD1ncm93TWVtb3J5KG5ld1NpemUpO2lmKHJlcGxhY2VtZW50KXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfTtlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKTtCaW5kaW5nRXJyb3I9TW9kdWxlWyJCaW5kaW5nRXJyb3IiXT1jbGFzcyBCaW5kaW5nRXJyb3IgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihtZXNzYWdlKXtzdXBlcihtZXNzYWdlKTt0aGlzLm5hbWU9IkJpbmRpbmdFcnJvciI7fX07TW9kdWxlWyJJbnRlcm5hbEVycm9yIl09Y2xhc3MgSW50ZXJuYWxFcnJvciBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKG1lc3NhZ2Upe3N1cGVyKG1lc3NhZ2UpO3RoaXMubmFtZT0iSW50ZXJuYWxFcnJvciI7fX07aW5pdF9lbXZhbCgpO3ZhciB3YXNtSW1wb3J0cz17ZjpfX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQsaDpfX2VtYmluZF9yZWdpc3Rlcl9ib29sLGc6X19lbWJpbmRfcmVnaXN0ZXJfZW12YWwsZTpfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdCxiOl9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIsYTpfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyxkOl9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmcsYzpfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZyxpOl9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQsajpfZW1zY3JpcHRlbl9yZXNpemVfaGVhcH07dmFyIHdhc21FeHBvcnRzPWNyZWF0ZVdhc20oKTtNb2R1bGVbIl9wYWNrIl09KGEwLGExLGEyLGEzLGE0LGE1LGE2LGE3LGE4LGE5LGExMCk9PihNb2R1bGVbIl9wYWNrIl09d2FzbUV4cG9ydHNbIm0iXSkoYTAsYTEsYTIsYTMsYTQsYTUsYTYsYTcsYTgsYTksYTEwKTt2YXIgX21hbGxvYz1Nb2R1bGVbIl9tYWxsb2MiXT1hMD0+KF9tYWxsb2M9TW9kdWxlWyJfbWFsbG9jIl09d2FzbUV4cG9ydHNbIm8iXSkoYTApO3ZhciBfZnJlZT1Nb2R1bGVbIl9mcmVlIl09YTA9PihfZnJlZT1Nb2R1bGVbIl9mcmVlIl09d2FzbUV4cG9ydHNbInAiXSkoYTApO3ZhciBjYWxsZWRSdW47ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFjYWxsZWRSdW4pcnVuKCk7aWYoIWNhbGxlZFJ1bilkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyO307ZnVuY3Rpb24gcnVuKCl7aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1wcmVSdW4oKTtpZihydW5EZXBlbmRlbmNpZXM+MCl7cmV0dXJufWZ1bmN0aW9uIGRvUnVuKCl7aWYoY2FsbGVkUnVuKXJldHVybjtjYWxsZWRSdW49dHJ1ZTtNb2R1bGVbImNhbGxlZFJ1biJdPXRydWU7aWYoQUJPUlQpcmV0dXJuO2luaXRSdW50aW1lKCk7cmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpO2lmKE1vZHVsZVsib25SdW50aW1lSW5pdGlhbGl6ZWQiXSlNb2R1bGVbIm9uUnVudGltZUluaXRpYWxpemVkIl0oKTtwb3N0UnVuKCk7fWlmKE1vZHVsZVsic2V0U3RhdHVzIl0pe01vZHVsZVsic2V0U3RhdHVzIl0oIlJ1bm5pbmcuLi4iKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe01vZHVsZVsic2V0U3RhdHVzIl0oIiIpO30sMSk7ZG9SdW4oKTt9LDEpO31lbHNlIHtkb1J1bigpO319aWYoTW9kdWxlWyJwcmVJbml0Il0pe2lmKHR5cGVvZiBNb2R1bGVbInByZUluaXQiXT09ImZ1bmN0aW9uIilNb2R1bGVbInByZUluaXQiXT1bTW9kdWxlWyJwcmVJbml0Il1dO3doaWxlKE1vZHVsZVsicHJlSW5pdCJdLmxlbmd0aD4wKXtNb2R1bGVbInByZUluaXQiXS5wb3AoKSgpO319cnVuKCk7CgoKICAgIHJldHVybiByZWFkeVByb21pc2UKICB9CiAgKTsKICB9KSgpOwoKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueQogIGxldCB3YXNtTW9kdWxlOwogIGFzeW5jIGZ1bmN0aW9uIGluaXRXYXNtKCkgewogICAgICB3YXNtTW9kdWxlID0gYXdhaXQgbG9hZFdhc20oKTsKICB9CiAgbGV0IGFsbG9jYXRlZFZlcnRleENvdW50ID0gMDsKICBjb25zdCB1cGRhdGVRdWV1ZSA9IG5ldyBBcnJheSgpOwogIGxldCBydW5uaW5nID0gZmFsc2U7CiAgbGV0IGxvYWRpbmcgPSBmYWxzZTsKICBsZXQgcG9zaXRpb25zUHRyOwogIGxldCByb3RhdGlvbnNQdHI7CiAgbGV0IHNjYWxlc1B0cjsKICBsZXQgY29sb3JzUHRyOwogIGxldCBzZWxlY3Rpb25QdHI7CiAgbGV0IGRhdGFQdHI7CiAgbGV0IHdvcmxkUG9zaXRpb25zUHRyOwogIGxldCB3b3JsZFJvdGF0aW9uc1B0cjsKICBsZXQgd29ybGRTY2FsZXNQdHI7CiAgY29uc3QgcGFjayA9IGFzeW5jIChzcGxhdCkgPT4gewogICAgICB3aGlsZSAobG9hZGluZykgewogICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpOwogICAgICB9CiAgICAgIGlmICghd2FzbU1vZHVsZSkgewogICAgICAgICAgbG9hZGluZyA9IHRydWU7CiAgICAgICAgICBhd2FpdCBpbml0V2FzbSgpOwogICAgICAgICAgbG9hZGluZyA9IGZhbHNlOwogICAgICB9CiAgICAgIGNvbnN0IHRhcmdldEFsbG9jYXRlZFZlcnRleENvdW50ID0gTWF0aC5wb3coMiwgTWF0aC5jZWlsKE1hdGgubG9nMihzcGxhdC52ZXJ0ZXhDb3VudCkpKTsKICAgICAgaWYgKHRhcmdldEFsbG9jYXRlZFZlcnRleENvdW50ID4gYWxsb2NhdGVkVmVydGV4Q291bnQpIHsKICAgICAgICAgIGlmIChhbGxvY2F0ZWRWZXJ0ZXhDb3VudCA+IDApIHsKICAgICAgICAgICAgICB3YXNtTW9kdWxlLl9mcmVlKHBvc2l0aW9uc1B0cik7CiAgICAgICAgICAgICAgd2FzbU1vZHVsZS5fZnJlZShyb3RhdGlvbnNQdHIpOwogICAgICAgICAgICAgIHdhc21Nb2R1bGUuX2ZyZWUoc2NhbGVzUHRyKTsKICAgICAgICAgICAgICB3YXNtTW9kdWxlLl9mcmVlKGNvbG9yc1B0cik7CiAgICAgICAgICAgICAgd2FzbU1vZHVsZS5fZnJlZShzZWxlY3Rpb25QdHIpOwogICAgICAgICAgICAgIHdhc21Nb2R1bGUuX2ZyZWUoZGF0YVB0cik7CiAgICAgICAgICAgICAgd2FzbU1vZHVsZS5fZnJlZSh3b3JsZFBvc2l0aW9uc1B0cik7CiAgICAgICAgICAgICAgd2FzbU1vZHVsZS5fZnJlZSh3b3JsZFJvdGF0aW9uc1B0cik7CiAgICAgICAgICAgICAgd2FzbU1vZHVsZS5fZnJlZSh3b3JsZFNjYWxlc1B0cik7CiAgICAgICAgICB9CiAgICAgICAgICBhbGxvY2F0ZWRWZXJ0ZXhDb3VudCA9IHRhcmdldEFsbG9jYXRlZFZlcnRleENvdW50OwogICAgICAgICAgcG9zaXRpb25zUHRyID0gd2FzbU1vZHVsZS5fbWFsbG9jKDMgKiBhbGxvY2F0ZWRWZXJ0ZXhDb3VudCAqIDQpOwogICAgICAgICAgcm90YXRpb25zUHRyID0gd2FzbU1vZHVsZS5fbWFsbG9jKDQgKiBhbGxvY2F0ZWRWZXJ0ZXhDb3VudCAqIDQpOwogICAgICAgICAgc2NhbGVzUHRyID0gd2FzbU1vZHVsZS5fbWFsbG9jKDMgKiBhbGxvY2F0ZWRWZXJ0ZXhDb3VudCAqIDQpOwogICAgICAgICAgY29sb3JzUHRyID0gd2FzbU1vZHVsZS5fbWFsbG9jKDQgKiBhbGxvY2F0ZWRWZXJ0ZXhDb3VudCk7CiAgICAgICAgICBzZWxlY3Rpb25QdHIgPSB3YXNtTW9kdWxlLl9tYWxsb2MoYWxsb2NhdGVkVmVydGV4Q291bnQpOwogICAgICAgICAgZGF0YVB0ciA9IHdhc21Nb2R1bGUuX21hbGxvYyg4ICogYWxsb2NhdGVkVmVydGV4Q291bnQgKiA0KTsKICAgICAgICAgIHdvcmxkUG9zaXRpb25zUHRyID0gd2FzbU1vZHVsZS5fbWFsbG9jKDMgKiBhbGxvY2F0ZWRWZXJ0ZXhDb3VudCAqIDQpOwogICAgICAgICAgd29ybGRSb3RhdGlvbnNQdHIgPSB3YXNtTW9kdWxlLl9tYWxsb2MoNCAqIGFsbG9jYXRlZFZlcnRleENvdW50ICogNCk7CiAgICAgICAgICB3b3JsZFNjYWxlc1B0ciA9IHdhc21Nb2R1bGUuX21hbGxvYygzICogYWxsb2NhdGVkVmVydGV4Q291bnQgKiA0KTsKICAgICAgfQogICAgICB3YXNtTW9kdWxlLkhFQVBGMzIuc2V0KHNwbGF0LnBvc2l0aW9ucywgcG9zaXRpb25zUHRyIC8gNCk7CiAgICAgIHdhc21Nb2R1bGUuSEVBUEYzMi5zZXQoc3BsYXQucm90YXRpb25zLCByb3RhdGlvbnNQdHIgLyA0KTsKICAgICAgd2FzbU1vZHVsZS5IRUFQRjMyLnNldChzcGxhdC5zY2FsZXMsIHNjYWxlc1B0ciAvIDQpOwogICAgICB3YXNtTW9kdWxlLkhFQVBVOC5zZXQoc3BsYXQuY29sb3JzLCBjb2xvcnNQdHIpOwogICAgICB3YXNtTW9kdWxlLkhFQVBVOC5zZXQoc3BsYXQuc2VsZWN0aW9uLCBzZWxlY3Rpb25QdHIpOwogICAgICB3YXNtTW9kdWxlLl9wYWNrKHNwbGF0LnNlbGVjdGVkLCBzcGxhdC52ZXJ0ZXhDb3VudCwgcG9zaXRpb25zUHRyLCByb3RhdGlvbnNQdHIsIHNjYWxlc1B0ciwgY29sb3JzUHRyLCBzZWxlY3Rpb25QdHIsIGRhdGFQdHIsIHdvcmxkUG9zaXRpb25zUHRyLCB3b3JsZFJvdGF0aW9uc1B0ciwgd29ybGRTY2FsZXNQdHIpOwogICAgICBjb25zdCBvdXREYXRhID0gbmV3IFVpbnQzMkFycmF5KHdhc21Nb2R1bGUuSEVBUFUzMi5idWZmZXIsIGRhdGFQdHIsIHNwbGF0LnZlcnRleENvdW50ICogOCk7CiAgICAgIGNvbnN0IGRldGFjaGVkRGF0YSA9IG5ldyBVaW50MzJBcnJheShvdXREYXRhLnNsaWNlKCkuYnVmZmVyKTsKICAgICAgY29uc3Qgd29ybGRQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHdhc21Nb2R1bGUuSEVBUEYzMi5idWZmZXIsIHdvcmxkUG9zaXRpb25zUHRyLCBzcGxhdC52ZXJ0ZXhDb3VudCAqIDMpOwogICAgICBjb25zdCBkZXRhY2hlZFdvcmxkUG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSh3b3JsZFBvc2l0aW9ucy5zbGljZSgpLmJ1ZmZlcik7CiAgICAgIGNvbnN0IHdvcmxkUm90YXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSh3YXNtTW9kdWxlLkhFQVBGMzIuYnVmZmVyLCB3b3JsZFJvdGF0aW9uc1B0ciwgc3BsYXQudmVydGV4Q291bnQgKiA0KTsKICAgICAgY29uc3QgZGV0YWNoZWRXb3JsZFJvdGF0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkod29ybGRSb3RhdGlvbnMuc2xpY2UoKS5idWZmZXIpOwogICAgICBjb25zdCB3b3JsZFNjYWxlcyA9IG5ldyBGbG9hdDMyQXJyYXkod2FzbU1vZHVsZS5IRUFQRjMyLmJ1ZmZlciwgd29ybGRTY2FsZXNQdHIsIHNwbGF0LnZlcnRleENvdW50ICogMyk7CiAgICAgIGNvbnN0IGRldGFjaGVkV29ybGRTY2FsZXMgPSBuZXcgRmxvYXQzMkFycmF5KHdvcmxkU2NhbGVzLnNsaWNlKCkuYnVmZmVyKTsKICAgICAgY29uc3QgcmVzcG9uc2UgPSB7CiAgICAgICAgICBkYXRhOiBkZXRhY2hlZERhdGEsCiAgICAgICAgICB3b3JsZFBvc2l0aW9uczogZGV0YWNoZWRXb3JsZFBvc2l0aW9ucywKICAgICAgICAgIHdvcmxkUm90YXRpb25zOiBkZXRhY2hlZFdvcmxkUm90YXRpb25zLAogICAgICAgICAgd29ybGRTY2FsZXM6IGRldGFjaGVkV29ybGRTY2FsZXMsCiAgICAgICAgICBvZmZzZXQ6IHNwbGF0Lm9mZnNldCwKICAgICAgICAgIHZlcnRleENvdW50OiBzcGxhdC52ZXJ0ZXhDb3VudCwKICAgICAgICAgIHBvc2l0aW9uczogc3BsYXQucG9zaXRpb25zLmJ1ZmZlciwKICAgICAgICAgIHJvdGF0aW9uczogc3BsYXQucm90YXRpb25zLmJ1ZmZlciwKICAgICAgICAgIHNjYWxlczogc3BsYXQuc2NhbGVzLmJ1ZmZlciwKICAgICAgICAgIGNvbG9yczogc3BsYXQuY29sb3JzLmJ1ZmZlciwKICAgICAgICAgIHNlbGVjdGlvbjogc3BsYXQuc2VsZWN0aW9uLmJ1ZmZlciwKICAgICAgfTsKICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IHJlc3BvbnNlOiByZXNwb25zZSB9LCBbCiAgICAgICAgICByZXNwb25zZS5kYXRhLmJ1ZmZlciwKICAgICAgICAgIHJlc3BvbnNlLndvcmxkUG9zaXRpb25zLmJ1ZmZlciwKICAgICAgICAgIHJlc3BvbnNlLndvcmxkUm90YXRpb25zLmJ1ZmZlciwKICAgICAgICAgIHJlc3BvbnNlLndvcmxkU2NhbGVzLmJ1ZmZlciwKICAgICAgICAgIHJlc3BvbnNlLnBvc2l0aW9ucywKICAgICAgICAgIHJlc3BvbnNlLnJvdGF0aW9ucywKICAgICAgICAgIHJlc3BvbnNlLnNjYWxlcywKICAgICAgICAgIHJlc3BvbnNlLmNvbG9ycywKICAgICAgICAgIHJlc3BvbnNlLnNlbGVjdGlvbiwKICAgICAgXSk7CiAgICAgIHJ1bm5pbmcgPSBmYWxzZTsKICB9OwogIGNvbnN0IHBhY2tUaHJvdHRsZWQgPSAoKSA9PiB7CiAgICAgIGlmICh1cGRhdGVRdWV1ZS5sZW5ndGggPT09IDApCiAgICAgICAgICByZXR1cm47CiAgICAgIGlmICghcnVubmluZykgewogICAgICAgICAgcnVubmluZyA9IHRydWU7CiAgICAgICAgICBjb25zdCBzcGxhdCA9IHVwZGF0ZVF1ZXVlLnNoaWZ0KCk7CiAgICAgICAgICBwYWNrKHNwbGF0KTsKICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTsKICAgICAgICAgICAgICBwYWNrVGhyb3R0bGVkKCk7CiAgICAgICAgICB9LCAwKTsKICAgICAgfQogIH07CiAgc2VsZi5vbm1lc3NhZ2UgPSAoZSkgPT4gewogICAgICBpZiAoZS5kYXRhLnNwbGF0KSB7CiAgICAgICAgICBjb25zdCBzcGxhdCA9IGUuZGF0YS5zcGxhdDsKICAgICAgICAgIGZvciAoY29uc3QgW2luZGV4LCBleGlzdGluZ10gb2YgdXBkYXRlUXVldWUuZW50cmllcygpKSB7CiAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nLm9mZnNldCA9PT0gc3BsYXQub2Zmc2V0KSB7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZVF1ZXVlW2luZGV4XSA9IHNwbGF0OwogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdXBkYXRlUXVldWUucHVzaChzcGxhdCk7CiAgICAgICAgICBwYWNrVGhyb3R0bGVkKCk7CiAgICAgIH0KICB9OwoKfSkoKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGF0YVdvcmtlci5qcy5tYXAKCg==",null,!1),E=function(t={}){var F,l,U,n=t,e=new Promise(((t,U)=>{F=t,l=U})),Q=Object.assign({},n),d="";d=(d=self.location.href).startsWith("blob:")?"":d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1),U=t=>{var F=new XMLHttpRequest;return F.open("GET",t,!1),F.responseType="arraybuffer",F.send(null),new Uint8Array(F.response)},n.print||console.log.bind(console);var A,B,V=n.printErr||console.error.bind(console);function a(t){if(E(t))return function(t){for(var F=atob(t),l=new Uint8Array(F.length),U=0;U<F.length;++U)l[U]=F.charCodeAt(U);return l}(t.slice(G.length))}Object.assign(n,Q),Q=null,n.arguments&&n.arguments,n.thisProgram&&n.thisProgram,n.quit&&n.quit,n.wasmBinary&&(A=n.wasmBinary);var i,Z,R,s,c,o,r,h,W=!1;function I(){var t=B.buffer;n.HEAP8=i=new Int8Array(t),n.HEAP16=R=new Int16Array(t),n.HEAPU8=Z=new Uint8Array(t),n.HEAPU16=s=new Uint16Array(t),n.HEAP32=c=new Int32Array(t),n.HEAPU32=o=new Uint32Array(t),n.HEAPF32=r=new Float32Array(t),n.HEAPF64=h=new Float64Array(t)}var m,J=[],b=[],g=[],C=0,N=null,G="data:application/octet-stream;base64,",E=t=>t.startsWith(G);function p(t){return Promise.resolve().then((()=>function(t){if(t==m&&A)return new Uint8Array(A);var F=a(t);if(F)return F;if(U)return U(t);throw"both async and sync fetching of the wasm failed"}(t)))}function X(t,F,U){return p(t).then((t=>WebAssembly.instantiate(t,F))).then(U,(t=>{V(`failed to asynchronously prepare wasm: ${t}`),function(t){n.onAbort?.(t),V(t="Aborted("+t+")"),W=!0,t+=". Build with -sASSERTIONS for more info.";var F=new WebAssembly.RuntimeError(t);throw l(F),F}(t)}))}m="data:application/octet-stream;base64,";var y=t=>{for(;t.length>0;)t.shift()(n)};n.noExitRuntime;var Y,S,u=t=>{for(var F="",l=t;Z[l];)F+=Y[Z[l++]];return F},T={},k={},H=t=>{throw new S(t)};function x(t,F,l={}){if(!("argPackAdvance"in F))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(t,F,l={}){var U=F.name;if(t||H(`type "${U}" must have a positive integer typeid pointer`),k.hasOwnProperty(t)){if(l.ignoreDuplicateRegistrations)return;H(`Cannot register type '${U}' twice`)}if(k[t]=F,T.hasOwnProperty(t)){var n=T[t];delete T[t],n.forEach((t=>t()))}}(t,F,l)}var f=[],D=[],w=()=>D.length/2-5-f.length,v=t=>(t||H("Cannot use deleted val. handle = "+t),D[t]),z=t=>{switch(t){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:{const F=f.pop()||D.length;return D[F]=t,D[F+1]=1,F}}};function M(t){return this.fromWireType(o[t>>2])}var K={name:"emscripten::val",fromWireType:t=>{var F=v(t);return(t=>{t>9&&0==--D[t+1]&&(D[t]=void 0,f.push(t))})(t),F},toWireType:(t,F)=>z(F),argPackAdvance:8,readValueFromPointer:M,destructorFunction:null},j=(t,F)=>{switch(F){case 4:return function(t){return this.fromWireType(r[t>>2])};case 8:return function(t){return this.fromWireType(h[t>>3])};default:throw new TypeError(`invalid float width (${F}): ${t}`)}},O=(t,F,l)=>{switch(F){case 1:return l?t=>i[t]:t=>Z[t];case 2:return l?t=>R[t>>1]:t=>s[t>>1];case 4:return l?t=>c[t>>2]:t=>o[t>>2];default:throw new TypeError(`invalid integer width (${F}): ${t}`)}},L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,P=(t,F)=>t?((t,F,l)=>{for(var U=F+l,n=F;t[n]&&!(n>=U);)++n;if(n-F>16&&t.buffer&&L)return L.decode(t.subarray(F,n));for(var e="";F<n;){var Q=t[F++];if(128&Q){var d=63&t[F++];if(192!=(224&Q)){var A=63&t[F++];if((Q=224==(240&Q)?(15&Q)<<12|d<<6|A:(7&Q)<<18|d<<12|A<<6|63&t[F++])<65536)e+=String.fromCharCode(Q);else{var B=Q-65536;e+=String.fromCharCode(55296|B>>10,56320|1023&B)}}else e+=String.fromCharCode((31&Q)<<6|d)}else e+=String.fromCharCode(Q)}return e})(Z,t,F):"",_="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,q=(t,F)=>{for(var l=t,U=l>>1,n=U+F/2;!(U>=n)&&s[U];)++U;if((l=U<<1)-t>32&&_)return _.decode(Z.subarray(t,l));for(var e="",Q=0;!(Q>=F/2);++Q){var d=R[t+2*Q>>1];if(0==d)break;e+=String.fromCharCode(d)}return e},$=(t,F,l)=>{if(l??=2147483647,l<2)return 0;for(var U=F,n=(l-=2)<2*t.length?l/2:t.length,e=0;e<n;++e){var Q=t.charCodeAt(e);R[F>>1]=Q,F+=2}return R[F>>1]=0,F-U},tt=t=>2*t.length,Ft=(t,F)=>{for(var l=0,U="";!(l>=F/4);){var n=c[t+4*l>>2];if(0==n)break;if(++l,n>=65536){var e=n-65536;U+=String.fromCharCode(55296|e>>10,56320|1023&e)}else U+=String.fromCharCode(n)}return U},lt=(t,F,l)=>{if(l??=2147483647,l<4)return 0;for(var U=F,n=U+l-4,e=0;e<t.length;++e){var Q=t.charCodeAt(e);if(Q>=55296&&Q<=57343&&(Q=65536+((1023&Q)<<10)|1023&t.charCodeAt(++e)),c[F>>2]=Q,(F+=4)+4>n)break}return c[F>>2]=0,F-U},Ut=t=>{for(var F=0,l=0;l<t.length;++l){var U=t.charCodeAt(l);U>=55296&&U<=57343&&++l,F+=4}return F},nt=t=>{var F=(t-B.buffer.byteLength+65535)/65536;try{return B.grow(F),I(),1}catch(t){}};(()=>{for(var t=new Array(256),F=0;F<256;++F)t[F]=String.fromCharCode(F);Y=t})(),S=n.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},n.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},D.push(0,1,void 0,1,null,1,!0,1,!1,1),n.count_emval_handles=w;var et={f:(t,F,l,U,n)=>{},h:(t,F,l,U)=>{x(t,{name:F=u(F),fromWireType:function(t){return!!t},toWireType:function(t,F){return F?l:U},argPackAdvance:8,readValueFromPointer:function(t){return this.fromWireType(Z[t])},destructorFunction:null})},g:t=>x(t,K),e:(t,F,l)=>{x(t,{name:F=u(F),fromWireType:t=>t,toWireType:(t,F)=>F,argPackAdvance:8,readValueFromPointer:j(F,l),destructorFunction:null})},b:(t,F,l,U,n)=>{F=u(F);var e=t=>t;if(0===U){var Q=32-8*l;e=t=>t<<Q>>>Q}var d=F.includes("unsigned");x(t,{name:F,fromWireType:e,toWireType:d?function(t,F){return this.name,F>>>0}:function(t,F){return this.name,F},argPackAdvance:8,readValueFromPointer:O(F,l,0!==U),destructorFunction:null})},a:(t,F,l)=>{var U=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][F];function n(t){var F=o[t>>2],l=o[t+4>>2];return new U(i.buffer,l,F)}x(t,{name:l=u(l),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{ignoreDuplicateRegistrations:!0})},d:(t,F)=>{var l="std::string"===(F=u(F));x(t,{name:F,fromWireType(t){var F,U=o[t>>2],n=t+4;if(l)for(var e=n,Q=0;Q<=U;++Q){var d=n+Q;if(Q==U||0==Z[d]){var A=P(e,d-e);void 0===F?F=A:(F+=String.fromCharCode(0),F+=A),e=d+1}}else{var B=new Array(U);for(Q=0;Q<U;++Q)B[Q]=String.fromCharCode(Z[n+Q]);F=B.join("")}return Bt(t),F},toWireType(t,F){var U;F instanceof ArrayBuffer&&(F=new Uint8Array(F));var n="string"==typeof F;n||F instanceof Uint8Array||F instanceof Uint8ClampedArray||F instanceof Int8Array||H("Cannot pass non-string to std::string"),U=l&&n?(t=>{for(var F=0,l=0;l<t.length;++l){var U=t.charCodeAt(l);U<=127?F++:U<=2047?F+=2:U>=55296&&U<=57343?(F+=4,++l):F+=3}return F})(F):F.length;var e=At(4+U+1),Q=e+4;if(o[e>>2]=U,l&&n)((t,F,l,U)=>{if(!(U>0))return 0;for(var n=l+U-1,e=0;e<t.length;++e){var Q=t.charCodeAt(e);if(Q>=55296&&Q<=57343&&(Q=65536+((1023&Q)<<10)|1023&t.charCodeAt(++e)),Q<=127){if(l>=n)break;F[l++]=Q}else if(Q<=2047){if(l+1>=n)break;F[l++]=192|Q>>6,F[l++]=128|63&Q}else if(Q<=65535){if(l+2>=n)break;F[l++]=224|Q>>12,F[l++]=128|Q>>6&63,F[l++]=128|63&Q}else{if(l+3>=n)break;F[l++]=240|Q>>18,F[l++]=128|Q>>12&63,F[l++]=128|Q>>6&63,F[l++]=128|63&Q}}F[l]=0})(F,Z,Q,U+1);else if(n)for(var d=0;d<U;++d){var A=F.charCodeAt(d);A>255&&(Bt(Q),H("String has UTF-16 code units that do not fit in 8 bits")),Z[Q+d]=A}else for(d=0;d<U;++d)Z[Q+d]=F[d];return null!==t&&t.push(Bt,e),e},argPackAdvance:8,readValueFromPointer:M,destructorFunction(t){Bt(t)}})},c:(t,F,l)=>{var U,n,e,Q;l=u(l),2===F?(U=q,n=$,Q=tt,e=t=>s[t>>1]):4===F&&(U=Ft,n=lt,Q=Ut,e=t=>o[t>>2]),x(t,{name:l,fromWireType:t=>{for(var l,n=o[t>>2],Q=t+4,d=0;d<=n;++d){var A=t+4+d*F;if(d==n||0==e(A)){var B=U(Q,A-Q);void 0===l?l=B:(l+=String.fromCharCode(0),l+=B),Q=A+F}}return Bt(t),l},toWireType:(t,U)=>{"string"!=typeof U&&H(`Cannot pass non-string to C++ string type ${l}`);var e=Q(U),d=At(4+e+F);return o[d>>2]=e/F,n(U,d+4,e+F),null!==t&&t.push(Bt,d),d},argPackAdvance:8,readValueFromPointer:M,destructorFunction(t){Bt(t)}})},i:(t,F)=>{x(t,{isVoid:!0,name:F=u(F),argPackAdvance:0,fromWireType:()=>{},toWireType:(t,F)=>{}})},j:t=>{var F=Z.length,l=2147483648;if((t>>>=0)>l)return!1;for(var U,n,e=1;e<=4;e*=2){var Q=F*(1+.2/e);Q=Math.min(Q,t+100663296);var d=Math.min(l,(U=Math.max(t,Q))+((n=65536)-U%n)%n);if(nt(d))return!0}return!1}},Qt=function(){var t,F,U,e={a:et};function Q(t,F){var l;return Qt=t.exports,B=Qt.k,I(),l=Qt.l,b.unshift(l),function(t){if(C--,n.monitorRunDependencies?.(C),0==C&&N){var F=N;N=null,F()}}(),Qt}if(C++,n.monitorRunDependencies?.(C),n.instantiateWasm)try{return n.instantiateWasm(e,Q)}catch(t){V(`Module.instantiateWasm callback failed with error: ${t}`),l(t)}return(t=m,F=e,U=function(t){Q(t.instance)},X(t,F,U)).catch(l),{}}();n._pack=(t,F,l,U,e,Q,d,A,B,V,a)=>(n._pack=Qt.m)(t,F,l,U,e,Q,d,A,B,V,a);var dt,At=n._malloc=t=>(At=n._malloc=Qt.o)(t),Bt=n._free=t=>(Bt=n._free=Qt.p)(t);function Vt(){function t(){dt||(dt=!0,n.calledRun=!0,W||(y(b),F(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)t=n.postRun.shift(),g.unshift(t);var t;y(g)}()))}C>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)t=n.preRun.shift(),J.unshift(t);var t;y(J)}(),C>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(N=function t(){dt||Vt(),dt||(N=t)},n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Vt(),e};class p{constructor(t){this.dataChanged=!1,this.transformsChanged=!1,this.colorTransformsChanged=!1,this._updating=new Set,this._dirty=new Set;let F=0,l=0;this._splatIndices=new Map,this._offsets=new Map;const n=new Map;for(const U of t.objects)U instanceof Z&&(this._splatIndices.set(U,l),this._offsets.set(U,F),n.set(F,U),F+=U.data.vertexCount,l++);this._vertexCount=F,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=n.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._colorTransformsWidth=4,this._colorTransformsHeight=64,this._colorTransforms=new Float32Array(this._colorTransformsWidth*this._colorTransformsHeight*4),this._colorTransforms.fill(0),this._colorTransforms[0]=1,this._colorTransforms[5]=1,this._colorTransforms[10]=1,this._colorTransforms[15]=1,this._colorTransformIndicesWidth=1024,this._colorTransformIndicesHeight=Math.ceil(this.vertexCount/this._colorTransformIndicesWidth),this._colorTransformIndices=new Uint32Array(this._colorTransformIndicesWidth*this._colorTransformIndicesHeight),this.colorTransformIndices.fill(0),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new G;const e=t=>{const F=this._splatIndices.get(t);this._transforms.set(t.transform.buffer,20*F),this._transforms[20*F+16]=t.selected?1:0,t.positionChanged=!1,t.rotationChanged=!1,t.scaleChanged=!1,t.selectedChanged=!1,this.transformsChanged=!0},Q=()=>{let t=!1;for(const F of this._splatIndices.keys())if(F.colorTransformChanged){t=!0;break}if(!t)return;const F=[new U];this._colorTransformIndices.fill(0);let l=1;for(const t of this._splatIndices.keys()){const U=this._offsets.get(t);for(const U of t.colorTransforms)F.includes(U)||(F.push(U),l++);for(const F of t.colorTransformsMap.keys()){const n=t.colorTransformsMap.get(F);this._colorTransformIndices[F+U]=n+l-1}t.colorTransformChanged=!1}for(let t=0;t<F.length;t++){const l=F[t];this._colorTransforms.set(l.buffer,16*t)}this.colorTransformsChanged=!0};let d;this._worker.onmessage=t=>{if(t.data.response){const F=t.data.response,l=n.get(F.offset);e(l),Q();const U=this._splatIndices.get(l);for(let t=0;t<l.data.vertexCount;t++)this._transformIndices[F.offset+t]=U;this._data.set(F.data,8*F.offset),l.data.reattach(F.positions,F.rotations,F.scales,F.colors,F.selection),this._positions.set(F.worldPositions,3*F.offset),this._rotations.set(F.worldRotations,4*F.offset),this._scales.set(F.worldScales,3*F.offset),this._updating.delete(l),l.selectedChanged=!1,this.dataChanged=!0}},async function(){d=await E()}();const A=t=>{if(!d)return void async function(){for(;!d;)await new Promise((t=>setTimeout(t,0)))}().then((()=>{A(t)}));e(t);const F=d._malloc(3*t.data.vertexCount*4),l=d._malloc(4*t.data.vertexCount*4),U=d._malloc(3*t.data.vertexCount*4),n=d._malloc(4*t.data.vertexCount),Q=d._malloc(t.data.vertexCount),B=d._malloc(8*t.data.vertexCount*4),V=d._malloc(3*t.data.vertexCount*4),a=d._malloc(4*t.data.vertexCount*4),i=d._malloc(3*t.data.vertexCount*4);d.HEAPF32.set(t.data.positions,F/4),d.HEAPF32.set(t.data.rotations,l/4),d.HEAPF32.set(t.data.scales,U/4),d.HEAPU8.set(t.data.colors,n),d.HEAPU8.set(t.data.selection,Q),d._pack(t.selected,t.data.vertexCount,F,l,U,n,Q,B,V,a,i);const Z=new Uint32Array(d.HEAPU32.buffer,B,8*t.data.vertexCount),R=new Float32Array(d.HEAPF32.buffer,V,3*t.data.vertexCount),s=new Float32Array(d.HEAPF32.buffer,a,4*t.data.vertexCount),c=new Float32Array(d.HEAPF32.buffer,i,3*t.data.vertexCount),o=this._splatIndices.get(t),r=this._offsets.get(t);for(let F=0;F<t.data.vertexCount;F++)this._transformIndices[r+F]=o;this._data.set(Z,8*r),this._positions.set(R,3*r),this._rotations.set(s,4*r),this._scales.set(c,3*r),d._free(F),d._free(l),d._free(U),d._free(n),d._free(Q),d._free(B),d._free(V),d._free(a),d._free(i),this.dataChanged=!0,this.colorTransformsChanged=!0},B=t=>{if((t.positionChanged||t.rotationChanged||t.scaleChanged||t.selectedChanged)&&e(t),t.colorTransformChanged&&Q(),!t.data.changed||t.data.detached)return;const F={position:new Float32Array(t.position.flat()),rotation:new Float32Array(t.rotation.flat()),scale:new Float32Array(t.scale.flat()),selected:t.selected,vertexCount:t.data.vertexCount,positions:t.data.positions,rotations:t.data.rotations,scales:t.data.scales,colors:t.data.colors,selection:t.data.selection,offset:this._offsets.get(t)};this._worker.postMessage({splat:F},[F.position.buffer,F.rotation.buffer,F.scale.buffer,F.positions.buffer,F.rotations.buffer,F.scales.buffer,F.colors.buffer,F.selection.buffer]),this._updating.add(t),t.data.detached=!0};this.getSplat=t=>{let F=null;for(const[l,U]of this._offsets){if(!(t>=U))break;F=l}return F},this.getLocalIndex=(t,F)=>F-this._offsets.get(t),this.markDirty=t=>{this._dirty.add(t)},this.rebuild=()=>{for(const t of this._dirty)B(t);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const t of this._splatIndices.keys())A(t);Q()}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get colorTransforms(){return this._colorTransforms}get colorTransformsWidth(){return this._colorTransformsWidth}get colorTransformsHeight(){return this._colorTransformsHeight}get colorTransformIndices(){return this._colorTransformIndices}get colorTransformIndicesWidth(){return this._colorTransformIndicesWidth}get colorTransformIndicesHeight(){return this._colorTransformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class X{constructor(t=0,F=0,l=0,U=255){this.r=t,this.g=F,this.b=l,this.a=U}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map((t=>t.toString(16).padStart(2,"0"))).join("")}toString(){return`[${this.flat().join(", ")}]`}}class y extends N{constructor(t,F){super(t,F),this._outlineThickness=10,this._outlineColor=new X(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null,this._worker=null;const l=t.canvas,U=t.gl;let n,e,Q,d,A,B,V,a,i,R,s,c,o,r,h,W,I,m,J;this._resize=()=>{this._camera&&(this._camera.data.setSize(l.width,l.height),this._camera.update(),n=U.getUniformLocation(this.program,"projection"),U.uniformMatrix4fv(n,!1,this._camera.data.projectionMatrix.buffer),e=U.getUniformLocation(this.program,"viewport"),U.uniform2fv(e,new Float32Array([l.width,l.height])))};const b=()=>{this._worker=new C,this._worker.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:F}=t.data;this._depthIndex=F,U.bindBuffer(U.ARRAY_BUFFER,J),U.bufferData(U.ARRAY_BUFFER,F,U.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",g),this._scene.addEventListener("objectRemoved",N);for(const t of this._scene.objects)t instanceof Z&&t.addEventListener("objectChanged",G);this._renderData=new p(this._scene),Q=U.getUniformLocation(this.program,"focal"),U.uniform2fv(Q,new Float32Array([this._camera.data.fx,this._camera.data.fy])),d=U.getUniformLocation(this.program,"view"),U.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),R=U.getUniformLocation(this.program,"outlineThickness"),U.uniform1f(R,this.outlineThickness),s=U.getUniformLocation(this.program,"outlineColor"),U.uniform4fv(s,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=U.createTexture(),A=U.getUniformLocation(this.program,"u_texture"),U.uniform1i(A,0),r=U.createTexture(),B=U.getUniformLocation(this.program,"u_transforms"),U.uniform1i(B,1),h=U.createTexture(),V=U.getUniformLocation(this.program,"u_transformIndices"),U.uniform1i(V,2),W=U.createTexture(),a=U.getUniformLocation(this.program,"u_colorTransforms"),U.uniform1i(a,3),I=U.createTexture(),i=U.getUniformLocation(this.program,"u_colorTransformIndices"),U.uniform1i(i,4),m=U.createBuffer(),U.bindBuffer(U.ARRAY_BUFFER,m),U.bufferData(U.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),U.STATIC_DRAW),c=U.getAttribLocation(this.program,"position"),U.enableVertexAttribArray(c),U.vertexAttribPointer(c,2,U.FLOAT,!1,0,0),J=U.createBuffer(),o=U.getAttribLocation(this.program,"index"),U.enableVertexAttribArray(o),U.bindBuffer(U.ARRAY_BUFFER,J),b()}else console.error("Cannot render without scene and camera")};const g=t=>{const F=t;F.object instanceof Z&&F.object.addEventListener("objectChanged",G),E()},N=t=>{const F=t;F.object instanceof Z&&F.object.removeEventListener("objectChanged",G),E()},G=t=>{const F=t;F.object instanceof Z&&this._renderData&&this._renderData.markDirty(F.object)},E=()=>{var t,F;null===(t=this._renderData)||void 0===t||t.dispose(),this._renderData=new p(this._scene),null===(F=this._worker)||void 0===F||F.terminate(),b()};this._render=()=>{var t,F;if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged||this.renderData.colorTransformsChanged){this.renderData.dataChanged&&(U.activeTexture(U.TEXTURE0),U.bindTexture(U.TEXTURE_2D,this.splatTexture),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.RGBA32UI,this.renderData.width,this.renderData.height,0,U.RGBA_INTEGER,U.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(U.activeTexture(U.TEXTURE1),U.bindTexture(U.TEXTURE_2D,r),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,U.RGBA,U.FLOAT,this.renderData.transforms),U.activeTexture(U.TEXTURE2),U.bindTexture(U.TEXTURE_2D,h),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,U.RED_INTEGER,U.UNSIGNED_INT,this.renderData.transformIndices)),this.renderData.colorTransformsChanged&&(U.activeTexture(U.TEXTURE3),U.bindTexture(U.TEXTURE_2D,W),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.RGBA32F,this.renderData.colorTransformsWidth,this.renderData.colorTransformsHeight,0,U.RGBA,U.FLOAT,this.renderData.colorTransforms),U.activeTexture(U.TEXTURE4),U.bindTexture(U.TEXTURE_2D,I),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.R32UI,this.renderData.colorTransformIndicesWidth,this.renderData.colorTransformIndicesHeight,0,U.RED_INTEGER,U.UNSIGNED_INT,this.renderData.colorTransformIndices));const F=new Float32Array(this.renderData.positions.slice().buffer),l=new Float32Array(this.renderData.transforms.slice().buffer),n=new Uint32Array(this.renderData.transformIndices.slice().buffer);null===(t=this._worker)||void 0===t||t.postMessage({sortData:{positions:F,transforms:l,transformIndices:n,vertexCount:this.renderData.vertexCount}},[F.buffer,l.buffer,n.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1,this.renderData.colorTransformsChanged=!1}this._camera.update(),null===(F=this._worker)||void 0===F||F.postMessage({viewProj:this._camera.data.viewProj.buffer}),U.viewport(0,0,l.width,l.height),U.clearColor(0,0,0,0),U.clear(U.COLOR_BUFFER_BIT),U.disable(U.DEPTH_TEST),U.enable(U.BLEND),U.blendFuncSeparate(U.ONE_MINUS_DST_ALPHA,U.ONE,U.ONE_MINUS_DST_ALPHA,U.ONE),U.blendEquationSeparate(U.FUNC_ADD,U.FUNC_ADD),U.uniformMatrix4fv(n,!1,this._camera.data.projectionMatrix.buffer),U.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),U.bindBuffer(U.ARRAY_BUFFER,m),U.vertexAttribPointer(c,2,U.FLOAT,!1,0,0),U.bindBuffer(U.ARRAY_BUFFER,J),U.bufferData(U.ARRAY_BUFFER,this.depthIndex,U.STATIC_DRAW),U.vertexAttribIPointer(o,1,U.INT,0,0),U.vertexAttribDivisor(o,1),U.drawArraysInstanced(U.TRIANGLE_FAN,0,4,this.depthIndex.length)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{var t;if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",g),this._scene.removeEventListener("objectRemoved",N);for(const t of this._scene.objects)t instanceof Z&&t.removeEventListener("objectChanged",G);null===(t=this._worker)||void 0===t||t.terminate(),this.renderData.dispose(),U.deleteTexture(this.splatTexture),U.deleteTexture(r),U.deleteTexture(h),U.deleteBuffer(J),U.deleteBuffer(m)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=t=>{this._outlineThickness=t,this._initialized&&U.uniform1f(R,t)},this._setOutlineColor=t=>{this._outlineColor=t,this._initialized&&U.uniform4fv(s,new Float32Array(t.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(t){this._setOutlineThickness(t)}get outlineColor(){return this._outlineColor}set outlineColor(t){this._setOutlineColor(t)}get worker(){return this._worker}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n"}}class Y{constructor(t=1){let F,l,U,n,e=0,Q=!1;this.initialize=t=>{if(!(t instanceof y))throw new Error("FadeInPass requires a RenderProgram");e=t.started?1:0,Q=!0,F=t,l=t.renderer.gl,U=l.getUniformLocation(F.program,"useDepthFade"),l.uniform1i(U,1),n=l.getUniformLocation(F.program,"depthFade"),l.uniform1f(n,e)},this.render=()=>{var d;Q&&!(null===(d=F.renderData)||void 0===d?void 0:d.updating)&&(l.useProgram(F.program),e=Math.min(e+.01*t,1),e>=1&&(Q=!1,l.uniform1i(U,0)),l.uniform1f(n,e))}}dispose(){}}class S{constructor(t=null,F=null){this._backgroundColor=new X;const l=t||document.createElement("canvas");t||(l.style.display="block",l.style.boxSizing="border-box",l.style.width="100%",l.style.height="100%",l.style.margin="0",l.style.padding="0",document.body.appendChild(l)),l.style.background=this._backgroundColor.toHexString(),this._canvas=l,this._gl=l.getContext("webgl2",{antialias:!1});const U=F||[];F||U.push(new Y),this._renderProgram=new y(this,U);const n=[this._renderProgram];this.resize=()=>{const t=l.clientWidth,F=l.clientHeight;l.width===t&&l.height===F||this.setSize(t,F)},this.setSize=(t,F)=>{l.width=t,l.height=F,this._gl.viewport(0,0,l.width,l.height);for(const t of n)t.resize()},this.render=(t,F)=>{for(const l of n)l.render(t,F)},this.dispose=()=>{for(const t of n)t.dispose()},this.addProgram=t=>{n.push(t)},this.removeProgram=t=>{const F=n.indexOf(t);if(F<0)throw new Error("Program not found");n.splice(F,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this._canvas.style.background=t.toHexString()}}class u{constructor(l,U,n=.5,e=.5,Q=5,d=!0,B=new t){this.enabled=!0,this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let V=B.clone(),a=V.clone(),i=n,Z=e,R=Q,s=!1,c=!1,o=0,r=0,h=0;const W={};let I=!1;l.addEventListener("objectChanged",(()=>{if(I)return;const F=l.rotation.toEuler();i=-F.y,Z=-F.x;const U=l.position.x-R*Math.sin(i)*Math.cos(Z),n=l.position.y+R*Math.sin(Z),e=l.position.z+R*Math.cos(i)*Math.cos(Z);a=new t(U,n,e)})),this.setCameraTarget=F=>{const U=F.x-l.position.x,n=F.y-l.position.y,e=F.z-l.position.z;R=Math.sqrt(U*U+n*n+e*e),Z=Math.atan2(n,Math.sqrt(U*U+e*e)),i=-Math.atan2(U,e),a=new t(F.x,F.y,F.z)};const m=()=>.1+.9*(R-this.minZoom)/(this.maxZoom-this.minZoom),J=t=>{W[t.code]=!0,"ArrowUp"===t.code&&(W.KeyW=!0),"ArrowDown"===t.code&&(W.KeyS=!0),"ArrowLeft"===t.code&&(W.KeyA=!0),"ArrowRight"===t.code&&(W.KeyD=!0)},b=t=>{W[t.code]=!1,"ArrowUp"===t.code&&(W.KeyW=!1),"ArrowDown"===t.code&&(W.KeyS=!1),"ArrowLeft"===t.code&&(W.KeyA=!1),"ArrowRight"===t.code&&(W.KeyD=!1)},g=t=>{Y(t),this.enabled&&(s=!0,c=2===t.button,r=t.clientX,h=t.clientY,window.addEventListener("mouseup",C))},C=t=>{Y(t),s=!1,c=!1,window.removeEventListener("mouseup",C)},N=F=>{if(Y(F),!this.enabled||!s||!l)return;const U=F.clientX-r,n=F.clientY-h;if(c){const F=m(),e=-U*this.panSpeed*.01*F,Q=-n*this.panSpeed*.01*F,d=A.RotationFromQuaternion(l.rotation).buffer,B=new t(d[0],d[3],d[6]),V=new t(d[1],d[4],d[7]);a=a.add(B.multiply(e)),a=a.add(V.multiply(Q))}else i-=U*this.orbitSpeed*.003,Z+=n*this.orbitSpeed*.003,Z=Math.min(Math.max(Z,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);r=F.clientX,h=F.clientY},G=t=>{Y(t);const F=m();R+=t.deltaY*this.zoomSpeed*.025*F,R=Math.min(Math.max(R,this.minZoom),this.maxZoom)},E=t=>{if(Y(t),1===t.touches.length)s=!0,c=!1,r=t.touches[0].clientX,h=t.touches[0].clientY,o=0;else if(2===t.touches.length){s=!0,c=!0,r=(t.touches[0].clientX+t.touches[1].clientX)/2,h=(t.touches[0].clientY+t.touches[1].clientY)/2;const F=t.touches[0].clientX-t.touches[1].clientX,l=t.touches[0].clientY-t.touches[1].clientY;o=Math.sqrt(F*F+l*l)}},p=t=>{Y(t),s=!1,c=!1},X=F=>{if(Y(F),s&&l)if(c){const U=m(),n=F.touches[0].clientX-F.touches[1].clientX,e=F.touches[0].clientY-F.touches[1].clientY,Q=Math.sqrt(n*n+e*e);R+=(o-Q)*this.zoomSpeed*.1*U,R=Math.min(Math.max(R,this.minZoom),this.maxZoom),o=Q;const d=(F.touches[0].clientX+F.touches[1].clientX)/2,B=(F.touches[0].clientY+F.touches[1].clientY)/2,V=d-r,i=B-h,Z=A.RotationFromQuaternion(l.rotation).buffer,s=new t(Z[0],Z[3],Z[6]),c=new t(Z[1],Z[4],Z[7]);a=a.add(s.multiply(-V*this.panSpeed*.025*U)),a=a.add(c.multiply(-i*this.panSpeed*.025*U)),r=d,h=B}else{const t=F.touches[0].clientX-r,l=F.touches[0].clientY-h;i-=t*this.orbitSpeed*.003,Z+=l*this.orbitSpeed*.003,Z=Math.min(Math.max(Z,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),r=F.touches[0].clientX,h=F.touches[0].clientY}},y=(t,F,l)=>(1-l)*t+l*F;this.update=()=>{I=!0,n=y(n,i,this.dampening),e=y(e,Z,this.dampening),Q=y(Q,R,this.dampening),V=V.lerp(a,this.dampening);const U=V.x+Q*Math.sin(n)*Math.cos(e),d=V.y-Q*Math.sin(e),B=V.z-Q*Math.cos(n)*Math.cos(e);l.position=new t(U,d,B);const s=V.subtract(l.position).normalize(),c=Math.asin(-s.y),o=Math.atan2(s.x,s.z);l.rotation=F.FromEuler(new t(c,o,0));const r=.025,h=.01,m=A.RotationFromQuaternion(l.rotation).buffer,J=new t(-m[2],-m[5],-m[8]),b=new t(m[0],m[3],m[6]);W.KeyS&&(a=a.add(J.multiply(r))),W.KeyW&&(a=a.subtract(J.multiply(r))),W.KeyA&&(a=a.subtract(b.multiply(r))),W.KeyD&&(a=a.add(b.multiply(r))),W.KeyE&&(i+=h),W.KeyQ&&(i-=h),W.KeyR&&(Z+=h),W.KeyF&&(Z-=h),I=!1};const Y=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{U.removeEventListener("dragenter",Y),U.removeEventListener("dragover",Y),U.removeEventListener("dragleave",Y),U.removeEventListener("contextmenu",Y),U.removeEventListener("mousedown",g),U.removeEventListener("mousemove",N),U.removeEventListener("wheel",G),U.removeEventListener("touchstart",E),U.removeEventListener("touchend",p),U.removeEventListener("touchmove",X),d&&(window.removeEventListener("keydown",J),window.removeEventListener("keyup",b))},d&&(window.addEventListener("keydown",J),window.addEventListener("keyup",b)),U.addEventListener("dragenter",Y),U.addEventListener("dragover",Y),U.addEventListener("dragleave",Y),U.addEventListener("contextmenu",Y),U.addEventListener("mousedown",g),U.addEventListener("mousemove",N),U.addEventListener("wheel",G),U.addEventListener("touchstart",E),U.addEventListener("touchend",p),U.addEventListener("touchmove",X),this.update()}}class T{constructor(l,U){this.moveSpeed=1.5,this.lookSpeed=.7,this.dampening=.5;const n={};let e=l.rotation.toEuler().x,Q=l.rotation.toEuler().y,d=l.position,B=!1;const V=()=>{U.requestPointerLock()},a=()=>{B=document.pointerLockElement===U,B?U.addEventListener("mousemove",i):U.removeEventListener("mousemove",i)},i=t=>{const F=t.movementX,l=t.movementY;Q+=F*this.lookSpeed*.001,e-=l*this.lookSpeed*.001,e=Math.max(-Math.PI/2,Math.min(Math.PI/2,e))},Z=t=>{n[t.code]=!0,"ArrowUp"===t.code&&(n.KeyW=!0),"ArrowDown"===t.code&&(n.KeyS=!0),"ArrowLeft"===t.code&&(n.KeyA=!0),"ArrowRight"===t.code&&(n.KeyD=!0)},R=t=>{n[t.code]=!1,"ArrowUp"===t.code&&(n.KeyW=!1),"ArrowDown"===t.code&&(n.KeyS=!1),"ArrowLeft"===t.code&&(n.KeyA=!1),"ArrowRight"===t.code&&(n.KeyD=!1),"Escape"===t.code&&document.exitPointerLock()};this.update=()=>{const U=A.RotationFromQuaternion(l.rotation).buffer,B=new t(-U[2],-U[5],-U[8]),V=new t(U[0],U[3],U[6]);let a=new t(0,0,0);n.KeyS&&(a=a.add(B)),n.KeyW&&(a=a.subtract(B)),n.KeyA&&(a=a.subtract(V)),n.KeyD&&(a=a.add(V)),a=new t(a.x,0,a.z),a.magnitude()>0&&(a=a.normalize()),d=d.add(a.multiply(.01*this.moveSpeed)),l.position=l.position.add(d.subtract(l.position).multiply(this.dampening)),l.rotation=F.FromEuler(new t(e,Q,0))};const s=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{U.removeEventListener("dragenter",s),U.removeEventListener("dragover",s),U.removeEventListener("dragleave",s),U.removeEventListener("contextmenu",s),U.removeEventListener("mousedown",V),document.removeEventListener("pointerlockchange",a),window.removeEventListener("keydown",Z),window.removeEventListener("keyup",R)},window.addEventListener("keydown",Z),window.addEventListener("keyup",R),U.addEventListener("dragenter",s),U.addEventListener("dragover",s),U.addEventListener("dragleave",s),U.addEventListener("contextmenu",s),U.addEventListener("mousedown",V),document.addEventListener("pointerlockchange",a),this.update()}}class k{constructor(t,F){this.normal=t,this.point=F}intersect(t,F){const l=this.normal.dot(F);if(Math.abs(l)<1e-4)return null;const U=this.normal.dot(this.point.subtract(t))/l;return U<0?null:t.add(F.multiply(U))}}class H{initialize(t){}render(){}dispose(){}}class x extends N{constructor(t,F=[]){super(t,F),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null;const l=t.canvas,n=t.gl;let e,Q,d,A,B,V,a,i,Z,s,c;this._resize=()=>{this._camera&&(this._camera.data.setSize(l.width,l.height),this._camera.update(),Q=n.getUniformLocation(this.program,"projection"),n.uniformMatrix4fv(Q,!1,this._camera.data.projectionMatrix.buffer),d=n.getUniformLocation(this.program,"viewport"),n.uniform2fv(d,new Float32Array([l.width,l.height])))};const o=()=>{null!==t.renderProgram.worker?(e=t.renderProgram.worker,e.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:F}=t.data;this._depthIndex=F,n.bindBuffer(n.ARRAY_BUFFER,c),n.bufferData(n.ARRAY_BUFFER,F,n.STATIC_DRAW)}}):console.error("Render program is not initialized. Cannot render without worker")};this._initialize=()=>{if(!this._scene||!this._camera)return void console.error("Cannot render without scene and camera");this._resize(),this._scene.addEventListener("objectAdded",r),this._scene.addEventListener("objectRemoved",h);for(const t of this._scene.objects)t instanceof R&&(null===this._renderData?(this._renderData=t.data,t.addEventListener("objectChanged",W)):console.warn("Multiple Splatv objects are not currently supported"));if(null===this._renderData)return void console.error("Cannot render without Splatv object");A=n.getUniformLocation(this.program,"focal"),n.uniform2fv(A,new Float32Array([this._camera.data.fx,this._camera.data.fy])),B=n.getUniformLocation(this.program,"view"),n.uniformMatrix4fv(B,!1,this._camera.data.viewMatrix.buffer),this._splatTexture=n.createTexture(),V=n.getUniformLocation(this.program,"u_texture"),n.uniform1i(V,0),a=n.getUniformLocation(this.program,"time"),n.uniform1f(a,Math.sin(Date.now()/1e3)/2+.5),s=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),n.STATIC_DRAW),i=n.getAttribLocation(this.program,"position"),n.enableVertexAttribArray(i),n.vertexAttribPointer(i,2,n.FLOAT,!1,0,0),c=n.createBuffer(),Z=n.getAttribLocation(this.program,"index"),n.enableVertexAttribArray(Z),n.bindBuffer(n.ARRAY_BUFFER,c),o(),n.activeTexture(n.TEXTURE0),n.bindTexture(n.TEXTURE_2D,this._splatTexture),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texImage2D(n.TEXTURE_2D,0,n.RGBA32UI,this._renderData.width,this._renderData.height,0,n.RGBA_INTEGER,n.UNSIGNED_INT,this._renderData.data);const t=this._renderData.positions,F=new Float32Array((new U).buffer),l=new Uint32Array(this._renderData.vertexCount);l.fill(0),e.postMessage({sortData:{positions:t,transforms:F,transformIndices:l,vertexCount:this._renderData.vertexCount}},[t.buffer,F.buffer,l.buffer])};const r=t=>{const F=t;F.object instanceof R&&(null===this._renderData?(this._renderData=F.object.data,F.object.addEventListener("objectChanged",W)):console.warn("Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.")),this.dispose()},h=t=>{const F=t;F.object instanceof R&&this._renderData===F.object.data&&(this._renderData=null,F.object.removeEventListener("objectChanged",W)),this.dispose()},W=t=>{const F=t;F.object instanceof R&&this._renderData===F.object.data&&this.dispose()};this._render=()=>{this._scene&&this._camera?this._renderData?(this._camera.update(),e.postMessage({viewProj:this._camera.data.viewProj.buffer}),n.viewport(0,0,l.width,l.height),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.disable(n.DEPTH_TEST),n.enable(n.BLEND),n.blendFuncSeparate(n.ONE_MINUS_DST_ALPHA,n.ONE,n.ONE_MINUS_DST_ALPHA,n.ONE),n.blendEquationSeparate(n.FUNC_ADD,n.FUNC_ADD),n.uniformMatrix4fv(Q,!1,this._camera.data.projectionMatrix.buffer),n.uniformMatrix4fv(B,!1,this._camera.data.viewMatrix.buffer),n.uniform1f(a,Math.sin(Date.now()/1e3)/2+.5),n.bindBuffer(n.ARRAY_BUFFER,s),n.vertexAttribPointer(i,2,n.FLOAT,!1,0,0),n.bindBuffer(n.ARRAY_BUFFER,c),n.bufferData(n.ARRAY_BUFFER,this._depthIndex,n.STATIC_DRAW),n.vertexAttribIPointer(Z,1,n.INT,0,0),n.vertexAttribDivisor(Z,1),n.drawArraysInstanced(n.TRIANGLE_FAN,0,4,this._renderData.vertexCount)):console.warn("Cannot render without Splatv object"):console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera){this._scene.removeEventListener("objectAdded",r),this._scene.removeEventListener("objectRemoved",h);for(const t of this._scene.objects)t instanceof R&&this._renderData===t.data&&(this._renderData=null,t.removeEventListener("objectChanged",W));null==e||e.terminate(),n.deleteTexture(this._splatTexture),n.deleteBuffer(c),n.deleteBuffer(s)}else console.error("Cannot dispose without scene and camera")}}get renderData(){return this._renderData}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"}}class f{constructor(t,F,l){this.bounds=t,this.boxes=F,this.left=null,this.right=null,this.pointIndices=[],l.length>1?this.split(t,F,l):l.length>0&&(this.pointIndices=l)}split(t,F,l){const U=t.size().maxComponent();l.sort(((t,l)=>F[t].center().getComponent(U)-F[l].center().getComponent(U)));const n=Math.floor(l.length/2),e=l.slice(0,n),Q=l.slice(n);this.left=new f(t,F,e),this.right=new f(t,F,Q)}queryRange(t){return this.bounds.intersects(t)?null!==this.left&&null!==this.right?this.left.queryRange(t).concat(this.right.queryRange(t)):this.pointIndices.filter((F=>t.intersects(this.boxes[F]))):[]}}class D{constructor(t,F){const l=F.map(((t,F)=>F));this.root=new f(t,F,l)}queryRange(t){return this.root.queryRange(t)}}class w{constructor(F,l=100,U=1){let n=0,e=null,Q=[];this.testPoint=(d,A)=>{if(null===F.renderData||null===F.camera)return console.error("IntersectionTester cannot be called before renderProgram has been initialized"),null;if((()=>{if(null===F.renderData)return void console.error("IntersectionTester cannot be called before renderProgram has been initialized");Q=[];const l=F.renderData,U=new Array(l.offsets.size);let d=0;const A=new i(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(const t of l.offsets.keys()){const F=t.bounds;U[d++]=F,A.expand(F.min),A.expand(F.max),Q.push(t)}A.permute(),e=new D(A,U),n=l.vertexCount})(),null===e)return console.error("Failed to build octree for IntersectionTester"),null;const B=F.renderData,V=F.camera;n!==B.vertexCount&&console.warn("IntersectionTester has not been rebuilt since the last render");const a=V.screenPointToRay(d,A);for(let F=0;F<l;F+=U){const l=V.position.add(a.multiply(F)),n=new t(l.x-U/2,l.y-U/2,l.z-U/2),d=new t(l.x+U/2,l.y+U/2,l.z+U/2),A=new i(n,d),B=e.queryRange(A);if(B.length>0)return Q[B[0]]}return null}}}export{o as Camera,s as CameraData,X as Color32,T as FPSControls,Y as FadeInPass,w as IntersectionTester,I as Loader,A as Matrix3,U as Matrix4,d as Object3D,u as OrbitControls,m as PLYLoader,k as Plane,F as Quaternion,p as RenderData,y as RenderProgram,r as Scene,H as ShaderPass,N as ShaderProgram,Z as Splat,B as SplatData,R as Splatv,V as SplatvData,J as SplatvLoader,t as Vector3,c as Vector4,x as VideoRenderProgram,S as WebGLRenderer};
//# sourceMappingURL=index.js.map
