class t{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}equals(t){return this.x===t.x&&(this.y===t.y&&this.z===t.z)}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}add(e){return"number"==typeof e?new t(this.x+e,this.y+e,this.z+e):new t(this.x+e.x,this.y+e.y,this.z+e.z)}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}subtract(e){return"number"==typeof e?new t(this.x-e,this.y-e,this.z-e):new t(this.x-e.x,this.y-e.y,this.z-e.z)}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}multiply(e){return"number"==typeof e?new t(this.x*e,this.y*e,this.z*e):e instanceof t?new t(this.x*e.x,this.y*e.y,this.z*e.z):new t(this.x*e.buffer[0]+this.y*e.buffer[4]+this.z*e.buffer[8]+e.buffer[12],this.x*e.buffer[1]+this.y*e.buffer[5]+this.z*e.buffer[9]+e.buffer[13],this.x*e.buffer[2]+this.y*e.buffer[6]+this.z*e.buffer[10]+e.buffer[14])}divide(e){return"number"==typeof e?new t(this.x/e,this.y/e,this.z/e):new t(this.x/e.x,this.y/e.y,this.z/e.z)}cross(e){const n=this.y*e.z-this.z*e.y,l=this.z*e.x-this.x*e.z,i=this.x*e.y-this.y*e.x;return new t(n,l,i)}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,l=this.z-t.z;return e*e+n*n+l*l}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lerp(e,n){return new t(this.x+(e.x-this.x)*n,this.y+(e.y-this.y)*n,this.z+(e.z-this.z)*n)}min(e){return new t(Math.min(this.x,e.x),Math.min(this.y,e.y),Math.min(this.z,e.z))}max(e){return new t(Math.max(this.x,e.x),Math.max(this.y,e.y),Math.max(this.z,e.z))}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${t}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2)}normalize(){const e=this.magnitude();return new t(this.x/e,this.y/e,this.z/e)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}flat(){return[this.x,this.y,this.z]}clone(){return new t(this.x,this.y,this.z)}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}toString(){return`[${this.flat().join(", ")}]`}static One(e=1){return new t(e,e,e)}}class e{constructor(t=0,e=0,n=0,l=1){this.x=t,this.y=e,this.z=n,this.w=l}equals(t){return this.x===t.x&&(this.y===t.y&&(this.z===t.z&&this.w===t.w))}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new e(this.x/t,this.y/t,this.z/t,this.w/t)}multiply(t){const n=this.w,l=this.x,i=this.y,F=this.z,s=t.w,U=t.x,a=t.y,d=t.z;return new e(n*U+l*s+i*d-F*a,n*a-l*d+i*s+F*U,n*d+l*a-i*U+F*s,n*s-l*U-i*a-F*d)}inverse(){const t=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new e(-this.x/t,-this.y/t,-this.z/t,this.w/t)}apply(n){const l=new e(n.x,n.y,n.z,0),i=new e(-this.x,-this.y,-this.z,this.w),F=this.multiply(l).multiply(i);return new t(F.x,F.y,F.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new e(this.x,this.y,this.z,this.w)}static FromEuler(t){const n=t.x/2,l=t.y/2,i=t.z/2,F=Math.cos(l),s=Math.sin(l),U=Math.cos(n),a=Math.sin(n),d=Math.cos(i),r=Math.sin(i);return new e(F*a*d+s*U*r,s*U*d-F*a*r,F*U*r-s*a*d,F*U*d+s*a*r)}toEuler(){const e=2*(this.w*this.x+this.y*this.z),n=1-2*(this.x*this.x+this.y*this.y),l=Math.atan2(e,n);let i;const F=2*(this.w*this.y-this.z*this.x);i=Math.abs(F)>=1?Math.sign(F)*Math.PI/2:Math.asin(F);const s=2*(this.w*this.z+this.x*this.y),U=1-2*(this.y*this.y+this.z*this.z),a=Math.atan2(s,U);return new t(l,i,a)}static FromMatrix3(t){const n=t.buffer,l=n[0]+n[4]+n[8];let i,F,s,U;if(l>0){const t=.5/Math.sqrt(l+1);U=.25/t,i=(n[7]-n[5])*t,F=(n[2]-n[6])*t,s=(n[3]-n[1])*t}else if(n[0]>n[4]&&n[0]>n[8]){const t=2*Math.sqrt(1+n[0]-n[4]-n[8]);U=(n[7]-n[5])/t,i=.25*t,F=(n[1]+n[3])/t,s=(n[2]+n[6])/t}else if(n[4]>n[8]){const t=2*Math.sqrt(1+n[4]-n[0]-n[8]);U=(n[2]-n[6])/t,i=(n[1]+n[3])/t,F=.25*t,s=(n[5]+n[7])/t}else{const t=2*Math.sqrt(1+n[8]-n[0]-n[4]);U=(n[3]-n[1])/t,i=(n[2]+n[6])/t,F=(n[5]+n[7])/t,s=.25*t}return new e(i,F,s,U)}static FromAxisAngle(t,n){const l=n/2,i=Math.sin(l),F=Math.cos(l);return new e(t.x*i,t.y*i,t.z*i,F)}static LookRotation(n){const l=new t(0,0,1),i=l.dot(n);if(Math.abs(i- -1)<1e-6)return new e(0,1,0,Math.PI);if(Math.abs(i-1)<1e-6)return new e;const F=Math.acos(i),s=l.cross(n).normalize();return e.FromAxisAngle(s,F)}toString(){return`[${this.flat().join(", ")}]`}}class n{constructor(){const t=new Map;this.addEventListener=(e,n)=>{t.has(e)||t.set(e,new Set),t.get(e).add(n)},this.removeEventListener=(e,n)=>{t.has(e)&&t.get(e).delete(n)},this.hasEventListener=(e,n)=>!!t.has(e)&&t.get(e).has(n),this.dispatchEvent=e=>{if(t.has(e.type))for(const n of t.get(e.type))n(e)}}}class l{constructor(t=1,e=0,n=0,l=0,i=0,F=1,s=0,U=0,a=0,d=0,r=1,Q=0,o=0,A=0,c=0,B=1){this.buffer=[t,e,n,l,i,F,s,U,a,d,r,Q,o,A,c,B]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let e=0;e<this.buffer.length;e++)if(this.buffer[e]!==t.buffer[e])return!1;return!0}multiply(t){const e=this.buffer,n=t.buffer;return new l(n[0]*e[0]+n[1]*e[4]+n[2]*e[8]+n[3]*e[12],n[0]*e[1]+n[1]*e[5]+n[2]*e[9]+n[3]*e[13],n[0]*e[2]+n[1]*e[6]+n[2]*e[10]+n[3]*e[14],n[0]*e[3]+n[1]*e[7]+n[2]*e[11]+n[3]*e[15],n[4]*e[0]+n[5]*e[4]+n[6]*e[8]+n[7]*e[12],n[4]*e[1]+n[5]*e[5]+n[6]*e[9]+n[7]*e[13],n[4]*e[2]+n[5]*e[6]+n[6]*e[10]+n[7]*e[14],n[4]*e[3]+n[5]*e[7]+n[6]*e[11]+n[7]*e[15],n[8]*e[0]+n[9]*e[4]+n[10]*e[8]+n[11]*e[12],n[8]*e[1]+n[9]*e[5]+n[10]*e[9]+n[11]*e[13],n[8]*e[2]+n[9]*e[6]+n[10]*e[10]+n[11]*e[14],n[8]*e[3]+n[9]*e[7]+n[10]*e[11]+n[11]*e[15],n[12]*e[0]+n[13]*e[4]+n[14]*e[8]+n[15]*e[12],n[12]*e[1]+n[13]*e[5]+n[14]*e[9]+n[15]*e[13],n[12]*e[2]+n[13]*e[6]+n[14]*e[10]+n[15]*e[14],n[12]*e[3]+n[13]*e[7]+n[14]*e[11]+n[15]*e[15])}clone(){const t=this.buffer;return new l(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}determinant(){const t=this.buffer;return t[12]*t[9]*t[6]*t[3]-t[8]*t[13]*t[6]*t[3]-t[12]*t[5]*t[10]*t[3]+t[4]*t[13]*t[10]*t[3]+t[8]*t[5]*t[14]*t[3]-t[4]*t[9]*t[14]*t[3]-t[12]*t[9]*t[2]*t[7]+t[8]*t[13]*t[2]*t[7]+t[12]*t[1]*t[10]*t[7]-t[0]*t[13]*t[10]*t[7]-t[8]*t[1]*t[14]*t[7]+t[0]*t[9]*t[14]*t[7]+t[12]*t[5]*t[2]*t[11]-t[4]*t[13]*t[2]*t[11]-t[12]*t[1]*t[6]*t[11]+t[0]*t[13]*t[6]*t[11]+t[4]*t[1]*t[14]*t[11]-t[0]*t[5]*t[14]*t[11]-t[8]*t[5]*t[2]*t[15]+t[4]*t[9]*t[2]*t[15]+t[8]*t[1]*t[6]*t[15]-t[0]*t[9]*t[6]*t[15]-t[4]*t[1]*t[10]*t[15]+t[0]*t[5]*t[10]*t[15]}invert(){const t=this.buffer,e=this.determinant();if(0===e)throw new Error("Matrix is not invertible.");const n=1/e;return new l(n*(t[5]*t[10]*t[15]-t[5]*t[11]*t[14]-t[9]*t[6]*t[15]+t[9]*t[7]*t[14]+t[13]*t[6]*t[11]-t[13]*t[7]*t[10]),n*(-t[1]*t[10]*t[15]+t[1]*t[11]*t[14]+t[9]*t[2]*t[15]-t[9]*t[3]*t[14]-t[13]*t[2]*t[11]+t[13]*t[3]*t[10]),n*(t[1]*t[6]*t[15]-t[1]*t[7]*t[14]-t[5]*t[2]*t[15]+t[5]*t[3]*t[14]+t[13]*t[2]*t[7]-t[13]*t[3]*t[6]),n*(-t[1]*t[6]*t[11]+t[1]*t[7]*t[10]+t[5]*t[2]*t[11]-t[5]*t[3]*t[10]-t[9]*t[2]*t[7]+t[9]*t[3]*t[6]),n*(-t[4]*t[10]*t[15]+t[4]*t[11]*t[14]+t[8]*t[6]*t[15]-t[8]*t[7]*t[14]-t[12]*t[6]*t[11]+t[12]*t[7]*t[10]),n*(t[0]*t[10]*t[15]-t[0]*t[11]*t[14]-t[8]*t[2]*t[15]+t[8]*t[3]*t[14]+t[12]*t[2]*t[11]-t[12]*t[3]*t[10]),n*(-t[0]*t[6]*t[15]+t[0]*t[7]*t[14]+t[4]*t[2]*t[15]-t[4]*t[3]*t[14]-t[12]*t[2]*t[7]+t[12]*t[3]*t[6]),n*(t[0]*t[6]*t[11]-t[0]*t[7]*t[10]-t[4]*t[2]*t[11]+t[4]*t[3]*t[10]+t[8]*t[2]*t[7]-t[8]*t[3]*t[6]),n*(t[4]*t[9]*t[15]-t[4]*t[11]*t[13]-t[8]*t[5]*t[15]+t[8]*t[7]*t[13]+t[12]*t[5]*t[11]-t[12]*t[7]*t[9]),n*(-t[0]*t[9]*t[15]+t[0]*t[11]*t[13]+t[8]*t[1]*t[15]-t[8]*t[3]*t[13]-t[12]*t[1]*t[11]+t[12]*t[3]*t[9]),n*(t[0]*t[5]*t[15]-t[0]*t[7]*t[13]-t[4]*t[1]*t[15]+t[4]*t[3]*t[13]+t[12]*t[1]*t[7]-t[12]*t[3]*t[5]),n*(-t[0]*t[5]*t[11]+t[0]*t[7]*t[9]+t[4]*t[1]*t[11]-t[4]*t[3]*t[9]-t[8]*t[1]*t[7]+t[8]*t[3]*t[5]),n*(-t[4]*t[9]*t[14]+t[4]*t[10]*t[13]+t[8]*t[5]*t[14]-t[8]*t[6]*t[13]-t[12]*t[5]*t[10]+t[12]*t[6]*t[9]),n*(t[0]*t[9]*t[14]-t[0]*t[10]*t[13]-t[8]*t[1]*t[14]+t[8]*t[2]*t[13]+t[12]*t[1]*t[10]-t[12]*t[2]*t[9]),n*(-t[0]*t[5]*t[14]+t[0]*t[6]*t[13]+t[4]*t[1]*t[14]-t[4]*t[2]*t[13]-t[12]*t[1]*t[6]+t[12]*t[2]*t[5]),n*(t[0]*t[5]*t[10]-t[0]*t[6]*t[9]-t[4]*t[1]*t[10]+t[4]*t[2]*t[9]+t[8]*t[1]*t[6]-t[8]*t[2]*t[5]))}static Compose(t,e,n){const i=e.x,F=e.y,s=e.z,U=e.w,a=i+i,d=F+F,r=s+s,Q=i*a,o=i*d,A=i*r,c=F*d,B=F*r,h=s*r,V=U*a,R=U*d,Z=U*r,W=n.x,m=n.y,g=n.z;return new l((1-(c+h))*W,(o+Z)*W,(A-R)*W,0,(o-Z)*m,(1-(Q+h))*m,(B+V)*m,0,(A+R)*g,(B-V)*g,(1-(Q+c))*g,0,t.x,t.y,t.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class i extends Event{constructor(t){super("objectAdded"),this.object=t}}class F extends Event{constructor(t){super("objectRemoved"),this.object=t}}class s extends Event{constructor(t){super("objectChanged"),this.object=t}}class U extends Event{constructor(t){super("renderedSplatsChanged"),this.object=t}}class a extends n{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new t,this._rotation=new e,this._scale=new t(1,1,1),this._transform=new l,this._changeEvent=new s(this),this._renderedSplatsChanged=new U(this),this.update=()=>{},this.applyPosition=()=>{this.position=new t},this.applyRotation=()=>{this.rotation=new e},this.applyScale=()=>{this.scale=new t(1,1,1)},this.raiseChangeEvent=()=>{this.dispatchEvent(this._changeEvent)}}_updateMatrix(){this._transform=l.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(t){this._position.equals(t)||(this._position=t,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(t){this._rotation.equals(t)||(this._rotation=t,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(t){this._scale.equals(t)||(this._scale=t,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let e=new t(0,0,1);return e=this.rotation.apply(e),e}get transform(){return this._transform}}class d{constructor(t=0,e=null,n=null,l=null,i=null,F=null){this.changed=!1,this.detached=!1,this._vertexCount=t,this._positions=e||new Float32Array(0),this._rotations=n||new Float32Array(0),this._scales=l||new Float32Array(0),this._colors=i||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this._rendered=new Uint8Array(this.vertexCount).fill(1),this._renderedSplats=t,this.resetRendering=()=>{this._rendered=new Uint8Array(this.vertexCount).fill(0)},this.translate=t=>{for(let e=0;e<this.vertexCount;e++)this.positions[3*e+0]+=t.x,this.positions[3*e+1]+=t.y,this.positions[3*e+2]+=t.z;this.changed=!0},this.removeVertex=t=>{if(t<0||t>=this._vertexCount)throw new Error("Index out od bounds");this._positions=this.removeItemsFromArray(this._positions,3*t,3),this._rotations=this.removeItemsFromArray(this._rotations,4*t,4),this._scales=this.removeItemsFromArray(this._scales,3*t,3),this._colors=this.removeItemsFromArray(this._colors,4*t,4),this._vertexCount--,this.changed=!0},this.removeVertexRange=(t,e)=>{if(t<0||t+e>this._vertexCount)throw new Error("Index range out of bounds");this._positions=this.removeItemsFromArray(this._positions,3*t,3*e),this._rotations=this.removeItemsFromArray(this._rotations,4*t,4*e),this._scales=this.removeItemsFromArray(this._scales,3*t,3*e),this._colors=this.removeItemsFromArray(this._colors,4*t,4*e),this._vertexCount-=e,this.changed=!0},this.removeItemsFromArray=(t,e,n)=>{let l=t.subarray(0,e),i=t.subarray(e+n,t.length),F=new t.constructor(l.length+i.length);return F.set(l,0),F.set(i,l.length),F},this.serialize=()=>{const t=new Uint8Array(this.vertexCount*d.RowLength),e=new Float32Array(t.buffer),n=new Uint8Array(t.buffer);for(let t=0;t<this.vertexCount;t++)e[8*t+0]=this.positions[3*t+0],e[8*t+1]=this.positions[3*t+1],e[8*t+2]=this.positions[3*t+2],n[32*t+24+0]=this.colors[4*t+0],n[32*t+24+1]=this.colors[4*t+1],n[32*t+24+2]=this.colors[4*t+2],n[32*t+24+3]=this.colors[4*t+3],e[8*t+3+0]=this.scales[3*t+0],e[8*t+3+1]=this.scales[3*t+1],e[8*t+3+2]=this.scales[3*t+2],n[32*t+28+0]=128*this.rotations[4*t+0]+128&255,n[32*t+28+1]=128*this.rotations[4*t+1]+128&255,n[32*t+28+2]=128*this.rotations[4*t+2]+128&255,n[32*t+28+3]=128*this.rotations[4*t+3]+128&255;return t},this.reattach=(t,e,n,l,i,F)=>{const s=new Uint8Array(F);let U=0;for(let t=0;t<s.length;t++)0!==s[t]&&U++;console.assert(t.byteLength===3*U*4,`Expected ${3*U*4} bytes, got ${t.byteLength} bytes which are ${t.byteLength/3/4} splats`);const a=new Float32Array(t),d=new Float32Array(e),r=new Float32Array(n),Q=new Uint8Array(l),o=new Uint8Array(i);let A=0;for(let t=0;t<s.length;t++)if(1===s[t]){const e=3*t,n=4*t,l=3*t,i=4*t;this._positions.set(a.subarray(3*A,3*A+3),e),this._rotations.set(d.subarray(4*A,4*A+4),n),this._scales.set(r.subarray(3*A,3*A+3),l),this._colors.set(Q.subarray(4*A,4*A+4),i),this._selection[t]=o[A],A++}this.detached=!1},this.countRenderedSplats=()=>{let t=0;for(let e=0;e<this._rendered.length;e++)0!==this._rendered[e]&&t++;this._renderedSplats=t}}static Deserialize(t){const e=t.length/d.RowLength,n=new Float32Array(3*e),l=new Float32Array(4*e),i=new Float32Array(3*e),F=new Uint8Array(4*e),s=new Float32Array(t.buffer),U=new Uint8Array(t.buffer);for(let t=0;t<e;t++)n[3*t+0]=s[8*t+0],n[3*t+1]=s[8*t+1],n[3*t+2]=s[8*t+2],l[4*t+0]=(U[32*t+28+0]-128)/128,l[4*t+1]=(U[32*t+28+1]-128)/128,l[4*t+2]=(U[32*t+28+2]-128)/128,l[4*t+3]=(U[32*t+28+3]-128)/128,i[3*t+0]=s[8*t+3+0],i[3*t+1]=s[8*t+3+1],i[3*t+2]=s[8*t+3+2],F[4*t+0]=U[32*t+24+0],F[4*t+1]=U[32*t+24+1],F[4*t+2]=U[32*t+24+2],F[4*t+3]=U[32*t+24+3];return new d(e,n,l,i,F)}get vertexCount(){return this._vertexCount}get renderedSplats(){return this._renderedSplats}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}get rendered(){return this._rendered}}d.RowLength=32;class r{constructor(t,e,n,l,i){this._vertexCount=t,this._positions=e,this._data=n,this._width=l,this._height=i,this.serialize=()=>new Uint8Array(this._data.buffer)}static Deserialize(t,e,n){const l=new Uint32Array(t.buffer),i=new Float32Array(t.buffer),F=Math.floor(i.byteLength/this.RowLength),s=new Float32Array(3*F);for(let t=0;t<F;t++)s[3*t+0]=i[16*t+0],s[3*t+1]=i[16*t+1],s[3*t+2]=i[16*t+2],s[3*t+0]=i[16*t+3];return new r(F,s,l,e,n)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get data(){return this._data}get width(){return this._width}get height(){return this._height}}r.RowLength=64;class Q{static SplatToPLY(t,n){let l="ply\nformat binary_little_endian 1.0\n";l+=`element vertex ${n}\n`;const i=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let t=0;t<45;t++)i.push(`f_rest_${t}`);i.push("opacity"),i.push("scale_0"),i.push("scale_1"),i.push("scale_2"),i.push("rot_0"),i.push("rot_1"),i.push("rot_2"),i.push("rot_3");for(const t of i)l+=`property float ${t}\n`;l+="end_header\n";const F=(new TextEncoder).encode(l),s=248,U=n*s,a=new DataView(new ArrayBuffer(F.length+U));new Uint8Array(a.buffer).set(F,0);const d=new Float32Array(t),r=new Uint8Array(t),Q=F.length,o=220,A=232;for(let t=0;t<n;t++){const n=d[8*t+0],l=d[8*t+1],i=d[8*t+2],F=(r[32*t+24+0]/255-.5)/this.SH_C0,U=(r[32*t+24+1]/255-.5)/this.SH_C0,c=(r[32*t+24+2]/255-.5)/this.SH_C0,B=r[32*t+24+3]/255,h=Math.log(B/(1-B)),V=Math.log(d[8*t+3+0]),R=Math.log(d[8*t+3+1]),Z=Math.log(d[8*t+3+2]);let W=new e((r[32*t+28+1]-128)/128,(r[32*t+28+2]-128)/128,(r[32*t+28+3]-128)/128,(r[32*t+28+0]-128)/128);W=W.normalize();const m=W.w,g=W.x,I=W.y,b=W.z;a.setFloat32(Q+s*t+0,n,!0),a.setFloat32(Q+s*t+4,l,!0),a.setFloat32(Q+s*t+8,i,!0),a.setFloat32(Q+s*t+24+0,F,!0),a.setFloat32(Q+s*t+24+4,U,!0),a.setFloat32(Q+s*t+24+8,c,!0),a.setFloat32(Q+s*t+216,h,!0),a.setFloat32(Q+s*t+o+0,V,!0),a.setFloat32(Q+s*t+o+4,R,!0),a.setFloat32(Q+s*t+o+8,Z,!0),a.setFloat32(Q+s*t+A+0,m,!0),a.setFloat32(Q+s*t+A+4,g,!0),a.setFloat32(Q+s*t+A+8,I,!0),a.setFloat32(Q+s*t+A+12,b,!0)}return a.buffer}}Q.SH_C0=.28209479177387814;class o{constructor(t,e){this.min=t,this.max=e}contains(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}intersects(t){return this.max.x>=t.min.x&&this.min.x<=t.max.x&&this.max.y>=t.min.y&&this.min.y<=t.max.y&&this.max.z>=t.min.z&&this.min.z<=t.max.z}intersectsBox(t){return this.max.x>=t.min.x&&this.min.x<=t.max.x&&this.max.y>=t.min.y&&this.min.y<=t.max.y&&this.max.z>=t.min.z&&this.min.z<=t.max.z}intersectsBasedOnCenter(t){const e=this.center(),n=t.center(),l=this.size(),i=t.size();return Math.abs(e.x-n.x)<=l.x/2+i.x/2&&Math.abs(e.y-n.y)<=l.y/2+i.y/2&&Math.abs(e.z-n.z)<=l.z/2+i.z/2}size(){return this.max.subtract(this.min)}center(){return this.min.add(this.max).divide(2)}expand(t){this.min=this.min.min(t),this.max=this.max.max(t)}permute(){const e=this.min,n=this.max;this.min=new t(Math.min(e.x,n.x),Math.min(e.y,n.y),Math.min(e.z,n.z)),this.max=new t(Math.max(e.x,n.x),Math.max(e.y,n.y),Math.max(e.z,n.z))}surfaceArea(){const t=this.max.x-this.min.x,e=this.max.y-this.min.y,n=this.max.z-this.min.z;return 2*(t*e+t*n+e*n)}}class A{constructor(t=1,e=0,n=0,l=0,i=1,F=0,s=0,U=0,a=1){this.buffer=[t,e,n,l,i,F,s,U,a]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let e=0;e<this.buffer.length;e++)if(this.buffer[e]!==t.buffer[e])return!1;return!0}multiply(t){const e=this.buffer,n=t.buffer;return new A(n[0]*e[0]+n[3]*e[1]+n[6]*e[2],n[1]*e[0]+n[4]*e[1]+n[7]*e[2],n[2]*e[0]+n[5]*e[1]+n[8]*e[2],n[0]*e[3]+n[3]*e[4]+n[6]*e[5],n[1]*e[3]+n[4]*e[4]+n[7]*e[5],n[2]*e[3]+n[5]*e[4]+n[8]*e[5],n[0]*e[6]+n[3]*e[7]+n[6]*e[8],n[1]*e[6]+n[4]*e[7]+n[7]*e[8],n[2]*e[6]+n[5]*e[7]+n[8]*e[8])}clone(){const t=this.buffer;return new A(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}static Eye(t=1){return new A(t,0,0,0,t,0,0,0,t)}static Diagonal(t){return new A(t.x,0,0,0,t.y,0,0,0,t.z)}static RotationFromQuaternion(t){return new A(1-2*t.y*t.y-2*t.z*t.z,2*t.x*t.y-2*t.z*t.w,2*t.x*t.z+2*t.y*t.w,2*t.x*t.y+2*t.z*t.w,1-2*t.x*t.x-2*t.z*t.z,2*t.y*t.z-2*t.x*t.w,2*t.x*t.z-2*t.y*t.w,2*t.y*t.z+2*t.x*t.w,1-2*t.x*t.x-2*t.y*t.y)}static RotationFromEuler(t){const e=Math.cos(t.x),n=Math.sin(t.x),l=Math.cos(t.y),i=Math.sin(t.y),F=Math.cos(t.z),s=Math.sin(t.z);return new A(...[l*F+i*n*s,-l*s+i*n*F,i*e,e*s,e*F,-n,-i*F+l*n*s,i*s+l*n*F,l*e])}toString(){return`[${this.buffer.join(", ")}]`}}class c{constructor(n,l){this._index=n,this._data=l,this._bounds=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),this._defaultColor=new Uint8Array(l.colors.subarray(4*n,4*n+4)),this.recalculateBounds=()=>{const e=this.Position,n=this.Scale;this._bounds.min=new t(e[0]-n[0],e[1]-n[1],e[2]-n[2]),this._bounds.max=new t(e[0]+n[0],e[1]+n[1],e[2]+n[2])},this.translate=t=>{const e=this.Position;e[0]+=t.x,e[1]+=t.y,e[2]+=t.z},this.rotate=t=>{const n=A.RotationFromQuaternion(t).buffer,l=this.Position,i=l[0],F=l[1],s=l[2];l[0]=n[0]*i+n[1]*F+n[2]*s,l[1]=n[3]*i+n[4]*F+n[5]*s,l[2]=n[6]*i+n[7]*F+n[8]*s;const U=this.Rotation,a=new e(U[1],U[2],U[3],U[0]),d=t.multiply(a);U[0]=d.w,U[1]=d.x,U[2]=d.y,U[3]=d.z},this.scale=t=>{const e=this.Position,n=this.Scale;e[0]*=t.x,e[1]*=t.y,e[2]*=t.z,n[0]*=t.x,n[1]*=t.y,n[2]*=t.z},this.recalculateBounds()}reattach(t,e,n,l,i){this._data.positions.set(t,3*this._index),this._data.rotations.set(e,4*this._index),this._data.scales.set(n,3*this._index),this._data.colors.set(l,4*this._index),this._data.selection.set(i,this._index)}get Selected(){return this._data.selection[this._index]}set Selected(t){this._data.selection[this._index]=t}get Rendered(){return this._data.rendered[this._index]}set Rendered(t){this._data.rendered[this._index]=t}get Position(){const t=3*this._index;return this._data.positions.subarray(t,t+3)}get Rotation(){const t=4*this._index;return this._data.rotations.subarray(t,t+4)}get Scale(){const t=3*this._index;return this._data.scales.subarray(t,t+3)}set Color(t){const e=4*this._index;this._data.colors.set(t,e)}get Color(){const t=4*this._index;return this._data.colors.subarray(t,t+4)}ResetColor(){const t=4*this._index;this._data.colors.set(this._defaultColor,t)}get bounds(){return this._bounds}get PositionVec3(){const e=this.Position;return new t(e[0],e[1],e[2])}get ScaleVec3(){const e=this.Scale;return new t(e[0],e[1],e[2])}}class B{}B.BYTE_OFFSET_FLOAT=4,B.BYTE_OFFSET_DOUBLE=8,B.BYTE_OFFSET_INT=4;const h=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));class V{constructor(t,e=null){this.root=t,this.region=e,this.reset()}reset(){const t=this.root;return this.trace=[],this.indices=[],null!==t&&(h.min=t.min,h.max=t.max,(null===this.region||this.region.intersectsBox(h))&&(this.trace.push(t),this.indices.push(0))),this.result={done:!1},this}next(){const t=this.region,e=this.indices,n=this.trace;let l=null,i=n.length-1;for(;null===l&&i>=0;){const F=e[i]++,s=n[i].children;if(F<8)if(null!=s){const l=s[F];if(null!==t&&(h.min=l.min,h.max=l.max,!t.intersectsBox(h)))continue;n.push(l),e.push(0),++i}else l=n.pop(),e.pop();else n.pop(),e.pop(),--i}return this.result.value=l,this.result.done=null===l,this.result}[Symbol.iterator](){return this}}const R=new t;const Z=new t,W=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),m=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),g=new class{constructor(e=new t,n=new t(0,0,-1)){this.origin=e,this.direction=n}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,R)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=R.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(R.copy(this.origin).addScaledVector(this.direction,e),R.distanceToSquared(t))}intersectBox(t,e){let n,l,i,F,s,U;const a=1/this.direction.x,d=1/this.direction.y,r=1/this.direction.z,Q=this.origin;return a>=0?(n=(t.min.x-Q.x)*a,l=(t.max.x-Q.x)*a):(n=(t.max.x-Q.x)*a,l=(t.min.x-Q.x)*a),d>=0?(i=(t.min.y-Q.y)*d,F=(t.max.y-Q.y)*d):(i=(t.max.y-Q.y)*d,F=(t.min.y-Q.y)*d),n>F||i>l?null:((i>n||isNaN(n))&&(n=i),(F<l||isNaN(l))&&(l=F),r>=0?(s=(t.min.z-Q.z)*r,U=(t.max.z-Q.z)*r):(s=(t.max.z-Q.z)*r,U=(t.min.z-Q.z)*r),n>U||s>l?null:((s>n||n!=n)&&(n=s),(U<l||l!=l)&&(l=U),l<0?null:this.at(n>=0?n:l,e)))}intersectsBox(t){return null!==this.intersectBox(t,R)}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new(0,this.constructor)).copy(this)}};const I=new class{constructor(){this.value=0}},b=[new Uint8Array([4,2,1]),new Uint8Array([5,3,8]),new Uint8Array([6,8,3]),new Uint8Array([7,8,8]),new Uint8Array([8,6,5]),new Uint8Array([8,7,8]),new Uint8Array([8,8,7]),new Uint8Array([8,8,8])];function J(t,e,n,l){let i,F;return e<n?(i=e,F=0):(i=n,F=1),l<i&&(F=2),b[t][F]}function C(t,e,n,l,i,F,s,U){if(i>=0&&F>=0&&s>=0){const a=t.children;if(null==a)U.push(t);else{const t=.5*(e+i),d=.5*(n+F),r=.5*(l+s),Q=I.value;let o=function(t,e,n,l,i,F){let s=0;return t>e&&t>n?(i<t&&(s|=2),F<t&&(s|=1)):e>n?(l<e&&(s|=4),F<e&&(s|=1)):(l<n&&(s|=4),i<n&&(s|=2)),s}(e,n,l,t,d,r);for(;o<8;)switch(o){case 0:C(a[Q],e,n,l,t,d,r,U),o=J(o,t,d,r);break;case 1:C(a[1^Q],e,n,r,t,d,s,U),o=J(o,t,d,s);break;case 2:C(a[2^Q],e,d,l,t,F,r,U),o=J(o,t,F,r);break;case 3:C(a[3^Q],e,d,r,t,F,s,U),o=J(o,t,F,s);break;case 4:C(a[4^Q],t,n,l,i,d,r,U),o=J(o,i,d,r);break;case 5:C(a[5^Q],t,n,r,i,d,s,U),o=J(o,i,d,s);break;case 6:C(a[6^Q],t,d,l,i,F,r,U),o=J(o,i,F,r);break;case 7:C(a[7^Q],t,d,r,i,F,s,U),o=8}}}}class u{static intersectOctree(t,e){const n=[],l=function(t,e,n){const l=W.min.set(0,0,0),i=W.max.subVectors(t.max,t.min),F=t.getDimensions(m.min),s=m.max.copy(F).multiply(.5),U=g.origin.copy(e.origin),a=g.direction.copy(e.direction);U.sub(t.getCenter(Z)).add(s),n.value=0,a.x<0?(U.x=F.x-U.x,a.x=-a.x,n.value|=4):0===a.x&&(a.x=Number.EPSILON),a.y<0?(U.y=F.y-U.y,a.y=-a.y,n.value|=2):0===a.y&&(a.y=Number.EPSILON),a.z<0?(U.z=F.z-U.z,a.z=-a.z,n.value|=1):0===a.z&&(a.z=Number.EPSILON);const d=1/a.x,r=1/a.y,Q=1/a.z,o=(l.x-U.x)*d,A=(i.x-U.x)*d,c=(l.y-U.y)*r,B=(i.y-U.y)*r,h=(l.z-U.z)*Q,V=(i.z-U.z)*Q;return Math.max(o,c,h)<Math.min(A,B,V)?[o,c,h,A,B,V]:null}(t,e,I);return null!==l&&C(t,l[0],l[1],l[2],l[3],l[4],l[5],n),n}}const p=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));function N(t){const e=t.children;let n=0;if(null!=e)for(let t=0;t<e.length;++t){const l=1+N(e[t]);l>n&&(n=l)}return n}function E(t,e,n){const l=t.children;if(p.min=t.min,p.max=t.max,e.intersectsBox(p))if(null!=l)for(let t=0;t<l.length;++t)E(l[t],e,n);else n.push(t)}function y(t,e,n,l){const i=t.children;if(n===e)l.push(t);else if(null!=i){++n;for(let t=0;t<i.length;++t)y(i[t],e,n,l)}}class G{constructor(t){this.root=t}get min(){return this.root.min}get max(){return this.root.max}get children(){return this.root.children||null}getCenter(t){return this.root.getCenter(t)}getDimensions(t){return this.root.getDimensions(t)}cull(t){const e=[];return E(this.root,t,e),e}getDepth(){return N(this.root)}findNodesByLevel(t){const e=[];return y(this.root,t,0,e),e}getIntersectingNodes(t){return u.intersectOctree(this.root,t.ray)}leaves(t=null){return new V(this.root,t)}[Symbol.iterator](){return new V(this.root)}}const S=[new Uint8Array([0,0,0]),new Uint8Array([0,0,1]),new Uint8Array([0,1,0]),new Uint8Array([0,1,1]),new Uint8Array([1,0,0]),new Uint8Array([1,0,1]),new Uint8Array([1,1,0]),new Uint8Array([1,1,1])],X=new t;class Y{constructor(e=new t,n=new t){this.min=e,this.max=n,this.children=null,this.data=null}getCenter(t){return t.addVectors(this.min,this.max).multiply(.5)}getDimensions(t){return t.subVectors(this.max,this.min)}split(){const t=this.min,e=this.max,n=this.getCenter(X),l=this.children=[];for(let i=0;i<8;++i){const F=S[i],s=new this.constructor;s.min.set(0===F[0]?t.x:n.x,0===F[1]?t.y:n.y,0===F[2]?t.z:n.z),s.max.set(0===F[0]?n.x:e.x,0===F[1]?n.y:e.y,0===F[2]?n.z:e.z),l[i]=s}}}class T{constructor(t=null,e=null,n=0){this.point=t,this.data=e,this.distance=n}}class k extends T{constructor(t,e,n,l=null){super(n,l,t),this.distanceToRay=e}}class f{constructor(){this.points=[],this.data=[]}testPoints(e,n){const l=void 0!==e.params.Points?e.params.Points.threshold:0,i=l*l,F=e.ray,s=this.points,U=this.data;for(let l=0,a=s.length;l<a;++l){const a=s[l],d=F.distanceSqToPoint(a);if(d<i){const i=F.closestPointToPoint(a,new t),s=F.origin.distanceTo(i);s>=e.near&&s<=e.far&&n.push(new k(s,Math.sqrt(d),i,U[l]))}}}}const x=new t;class H extends Y{constructor(t,e){super(t,e)}distanceToSquared(t){return x.copy(t).clamp(this.min,this.max).sub(t).lengthSq()}distanceToCenterSquared(t){const e=this.getCenter(x),n=t.x-e.x,l=t.y-e.x,i=t.z-e.z;return n*n+l*l+i*i}contains(t,e){const n=this.min,l=this.max;return t.x>=n.x-e&&t.y>=n.y-e&&t.z>=n.z-e&&t.x<=l.x+e&&t.y<=l.y+e&&t.z<=l.z+e}redistribute(t){const e=this.children,n=this.data;if(null!==e&&null!==n){const l=n.points,i=n.data;for(let n=0,F=l.length;n<F;++n){const F=l[n],s=i[n];for(let n=0,l=e.length;n<l;++n){const l=e[n];if(l.contains(F,t)){null===l.data&&(l.data=new f);const t=l.data;t.points.push(F),t.data.push(s);break}}}this.data=null}}merge(){const t=this.children;if(null!==t){const e=new f;for(let n=0,l=t.length;n<l;++n){const l=t[n].data;null!==l&&(e.points=e.points.concat(l.points),e.data=e.data.concat(l.data))}this.children=null,this.data=e}}}function w(t){const e=t.children;let n=0;if(null!==e)for(let t=0,l=e.length;t<l;++t)n+=w(e[t]);else if(null!==t.data){n=t.data.points.length}return n}function D(t,e,n,l,i){let F=!1,s=!1;if(null!==l&&l.contains(t,n.getBias())){let U=l.children;if(null===U){let a=0;if(null===l.data)l.data=new f;else{const e=l.data.points;for(let n=0,l=e.length;!F&&n<l;++n)F=e[n].equals(t),a=n}const d=l.data;F?(d.data[a]=e,s=!0):d.points.length<n.getMaxPoints()||i===n.getMaxDepth()?(d.points.push(t.clone()),d.data.push(e),s=!0):(l.split(),l.redistribute(n.getBias()),U=l.children)}if(null!==U){++i;for(let l=0,F=U.length;!s&&l<F;++l)s=D(t,e,n,U[l],i)}}return s}function v(t,e,n,l){const i=n.children;let F=null;if(n.contains(t,e.getBias()))if(null!==i)for(let l=0,s=i.length;null===F&&l<s;++l)F=v(t,e,i[l],n);else if(null!==n.data){const i=n.data,s=i.points,U=i.data;for(let n=0,i=s.length;n<i;++n)if(s[n].equals(t)){const t=i-1;F=U[n],n<t&&(s[n]=s[t],U[n]=U[t]),s.pop(),U.pop(),null!==l&&w(l)<=e.getMaxPoints()&&l.merge();break}}return F}function z(t,e,n){const l=n.children;let i=null;if(n.contains(t,e.getBias()))if(null!==l)for(let n=0,F=l.length;null===i&&n<F;++n)i=z(t,e,l[n]);else if(null!==n.data){const e=n.data,l=e.points,F=e.data;for(let e=0,n=l.length;null===i&&e<n;++e)t.equals(l[e])&&(i=F[e])}return i}function M(t,e,n,l,i,F){const s=l.children;let U=null;if(l.contains(t,n.getBias()))if(l.contains(e,n.getBias())){if(null!==s){++F;for(let i=0,a=s.length;null===U&&i<a;++i){U=M(t,e,n,s[i],l,F)}}else if(null!==l.data){const n=l.data,i=n.points,F=n.data;for(let n=0,l=i.length;n<l;++n)if(t.equals(i[n])){i[n].copy(e),U=F[n];break}}}else U=v(t,n,l,i),D(e,U,n,i,F-1);return U}function j(t,e,n,l){let i=null,F=e;if(null!==l.children){const e=l.children.map((e=>{const n=e;return{distance:n.distanceToCenterSquared(t),octant:n}})).sort(((t,e)=>t.distance-e.distance));for(let l=0,s=e.length;l<s;++l){const s=e[l].octant;if(s.contains(t,F)){const e=j(t,F,n,s);if(null!==e&&(F=e.distance,i=e,0===F))break}}}else if(null!==l.data){const e=l.data,s=e.points,U=e.data;let a=-1;for(let e=0,l=s.length;e<l;++e)if(s[e].equals(t)){if(!n){F=0,a=e;break}}else{const n=t.distanceTo(s[e]);n<F&&(F=n,a=e)}a>=0&&(i=new T(s[a],U[a],F))}return i}function K(t,e,n,l,i){const F=l.children;if(null!==F)for(let l=0,s=F.length;l<s;++l){const s=F[l];s.contains(t,e)&&K(t,e,n,s,i)}else if(null!==l.data){const F=l.data,s=F.points,U=F.data;for(let l=0,F=s.length;l<F;++l){const F=s[l];if(F.equals(t))n||i.push(new T(F.clone(),U[l],0));else{const n=e*e,s=F.distanceToSquared(t);s<=n&&i.push(new T(F.clone(),U[l],Math.sqrt(s)))}}}}class _ extends G{constructor(t,e,n=0,l=8,i=8){super(new H(t,e)),this.bias=Math.max(0,n),this.maxPoints=Math.max(1,Math.round(l)),this.maxDepth=Math.max(0,Math.round(i))}getBias(){return this.bias}getMaxPoints(){return this.maxPoints}getMaxDepth(){return this.maxDepth}countPoints(t=this.root){return w(t)}set(t,e){return D(t,e,this,this.root,0)}remove(t){return v(t,this,this.root,null)}get(t){return z(t,this,this.root)}move(t,e){return M(t,e,this,this.root,null,0)}findNearestPoint(t,e=Number.POSITIVE_INFINITY,n=!1){const l=j(t,e,n,this.root);return null!==l&&null!==l.point&&(l.point=l.point.clone()),l}findPoints(t,e,n=!1){const l=[];return K(t,e,n,this.root,l),l}raycast(t){const e=[],n=super.getIntersectingNodes(t);if(n.length>0)for(let l=0,i=n.length;l<i;++l){const i=n[l].data;null!==i&&i.testPoints(t,e)}return e}}class O extends a{constructor(n=void 0){super(),this.selectedChanged=!1,this.renderNumberChanged=!1,this.colorTransformChanged=!1,this._splats=[],this._selected=!1,this._colorTransforms=[],this._colorTransformsMap=new Map,this.serialize=()=>{const t=new Uint8Array(this._numberOfSplats*d.RowLength),e=new Float32Array(t.buffer),n=new Uint8Array(t.buffer);for(let t=0;t<this._numberOfSplats;t++)e[8*t+0]=this._splats[t].Position[0],e[8*t+1]=this._splats[t].Position[1],e[8*t+2]=this._splats[t].Position[2],n[32*t+24+0]=this._splats[t].Color[0],n[32*t+24+1]=this._splats[t].Color[1],n[32*t+24+2]=this._splats[t].Color[2],n[32*t+24+3]=this._splats[t].Color[3],e[8*t+3+0]=this._splats[t].Scale[0],e[8*t+3+1]=this._splats[t].Scale[1],e[8*t+3+2]=this._splats[t].Scale[2],n[32*t+28+0]=128*this._splats[t].Rotation[0]+128&255,n[32*t+28+1]=128*this._splats[t].Rotation[1]+128&255,n[32*t+28+2]=128*this._splats[t].Rotation[2]+128&255,n[32*t+28+3]=128*this._splats[t].Rotation[3]+128&255;return t},this.reattach=(t,e,n,l,i)=>{console.assert(t.byteLength===3*this._numberOfRenderedSplats*4,`Expected ${3*this._numberOfRenderedSplats*4} bytes, got ${t.byteLength} bytes`);for(let F=0;F<this._numberOfSplats;F++)if(1===this._splats[F].Rendered){let s=new Float32Array(t,3*F*B.BYTE_OFFSET_FLOAT,3),U=new Float32Array(e,4*F*B.BYTE_OFFSET_FLOAT,4),a=new Float32Array(n,3*F*B.BYTE_OFFSET_FLOAT,3),d=new Uint8Array(l,1*F*B.BYTE_OFFSET_INT,4),r=new Uint8Array(i,F,1);this._splats[F].reattach(s,U,a,d,r)}this._data.detached=!1},this._splats=new Array,this._data=n||new d,this._bounds=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),this._numberOfSplats=0,this._numberOfRenderedSplats=0,this.createSplatsData=()=>{if(null!=n){this._numberOfSplats=n.vertexCount,this._numberOfRenderedSplats=n.vertexCount,console.time("Splats creation");for(let t=0;t<n.vertexCount;t++){let e=new c(t,this._data);this._splats.push(e)}console.timeEnd("Splats creation")}},this.recalculateBounds=()=>{console.time("Bounds calculation");for(let e=0;e<this._numberOfSplats;e++){const n=this._splats[e].Position;this._bounds.expand(new t(n[0],n[1],n[2]))}console.timeEnd("Bounds calculation")},this.createOctree=()=>{this._octree=new _(this._bounds.min,this._bounds.max,0,8,8),console.time("Octree creation");const e=new t;for(let t=0;t<this._numberOfSplats;t++){const n=this._splats[t].Position;e.set(n[0],n[1],n[2]),this._octree.set(e,this._splats[t])}console.timeEnd("Octree creation"),console.log("Depth: "+this._octree.getDepth());let n=new t;this._octree.getDimensions(n),console.log("Dimension: "+n)},this.applyPosition=()=>{this.data.translate(this.position),this.position=new t},this.applyRotation=()=>{this._splats.forEach(((t,e)=>{t.rotate(this.rotation)})),this.rotation=new e,this.data.changed=!0},this.applyScale=()=>{this._splats.forEach(((t,e)=>{t.scale(this.scale)})),this.scale=new t(1,1,1)},this.applySelection=()=>{this.selectedChanged=!0,this.dispatchEvent(this._changeEvent),this.data.changed=!0},this.applyRendering=()=>{this.data.countRenderedSplats(),this.dispatchEvent(this._changeEvent),this.data.changed=!0},this.createSplatsData(),this.recalculateBounds(),this.createOctree(),this.data.changed=!0}saveToFile(t=null,e=null){if(!document)return;if(e){if("splat"!==e&&"ply"!==e)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else e="splat";if(!t){const n=new Date;t=`splat-${n.getFullYear()}-${n.getMonth()+1}-${n.getDate()}.${e}`}this.applyRotation(),this.applyScale(),this.applyPosition();const n=this.serialize();let l;if("ply"===e){const t=Q.SplatToPLY(n.buffer,this._numberOfSplats);l=new Blob([t],{type:"application/octet-stream"})}else l=new Blob([n.buffer],{type:"application/octet-stream"});const i=document.createElement("a");i.download=t,i.href=URL.createObjectURL(l),i.click()}get data(){return this._data}get splats(){return this._splats}getSplatAtIndex(t){if(!(t<0||t>=this._numberOfSplats))return this._splats[t];console.error("Index out of bounds")}get selected(){return this._selected}set selected(t){this._selected!==t&&(this._selected=t,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}selectSplat(t,e){this._splats[t].Selected=e,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent)}renderSplat(t,e){this._data.rendered[t]=e}updateRenderingOfSplats(){this.data.changed=!0}get colorTransforms(){return this._colorTransforms}get colorTransformsMap(){return this._colorTransformsMap}get bounds(){let t=this._bounds.center();t=t.add(this.position);let e=this._bounds.size();return e=e.multiply(this.scale),new o(t.subtract(e.divide(2)),t.add(e.divide(2)))}get splatCount(){return this._numberOfSplats}get numberOfRenderedSplats(){return this._numberOfRenderedSplats}get Positions(){let t=[];return this._splats.forEach((e=>{1===e.Rendered&&t.push(...e.Position)})),new Float32Array(t)}get Scales(){let t=[];return this._splats.forEach((e=>{1===e.Rendered&&t.push(...e.Scale)})),new Float32Array(t)}get Rotations(){let t=[];return this._splats.forEach((e=>{1===e.Rendered&&t.push(...e.Rotation)})),new Float32Array(t)}get Colors(){let t=[];return this._splats.forEach((e=>{1===e.Rendered&&t.push(...e.Color)})),new Uint8Array(t)}get Selections(){const t=[];return this._splats.forEach((e=>{1===e.Rendered&&t.push(e.Selected)})),new Uint8Array(t)}get Rendered(){return this.data.rendered}}class P extends a{constructor(t){super(),this._data=t}get data(){return this._data}}class L{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=30,this._width=512,this._height=512,this._projectionMatrix=new l,this._viewMatrix=new l,this._viewProj=new l,this._updateProjectionMatrix=()=>{this._projectionMatrix=new l(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(t,e)=>{const n=A.RotationFromQuaternion(e).buffer,i=t.flat();this._viewMatrix=new l(n[0],n[1],n[2],0,n[3],n[4],n[5],0,n[6],n[7],n[8],0,-i[0]*n[0]-i[1]*n[3]-i[2]*n[6],-i[0]*n[1]-i[1]*n[4]-i[2]*n[7],-i[0]*n[2]-i[1]*n[5]-i[2]*n[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(t,e)=>{this._width=t,this._height=e,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(t){this._fx!==t&&(this._fx=t,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(t){this._fy!==t&&(this._fy=t,this._updateProjectionMatrix())}get near(){return this._near}set near(t){this._near!==t&&(this._near=t,this._updateProjectionMatrix())}get far(){return this._far}set far(t){this._far!==t&&(this._far=t,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class q{constructor(t=0,e=0,n=0,l=0){this.x=t,this.y=e,this.z=n,this.w=l}equals(t){return this.x===t.x&&(this.y===t.y&&(this.z===t.z&&this.w===t.w))}add(t){return"number"==typeof t?new q(this.x+t,this.y+t,this.z+t,this.w+t):new q(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}subtract(t){return"number"==typeof t?new q(this.x-t,this.y-t,this.z-t,this.w-t):new q(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}multiply(t){return"number"==typeof t?new q(this.x*t,this.y*t,this.z*t,this.w*t):t instanceof q?new q(this.x*t.x,this.y*t.y,this.z*t.z,this.w*t.w):new q(this.x*t.buffer[0]+this.y*t.buffer[4]+this.z*t.buffer[8]+this.w*t.buffer[12],this.x*t.buffer[1]+this.y*t.buffer[5]+this.z*t.buffer[9]+this.w*t.buffer[13],this.x*t.buffer[2]+this.y*t.buffer[6]+this.z*t.buffer[10]+this.w*t.buffer[14],this.x*t.buffer[3]+this.y*t.buffer[7]+this.z*t.buffer[11]+this.w*t.buffer[15])}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lerp(t,e){return new q(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e,this.w+(t.w-this.w)*e)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2+(this.w-t.w)**2)}normalize(){const t=this.magnitude();return new q(this.x/t,this.y/t,this.z/t,this.w/t)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new q(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class $ extends a{constructor(e=void 0){super(),this._data=e||new L,this._position=new t(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(e,n)=>{const l=new q(e,n,-1,1),i=this._data.projectionMatrix.invert(),F=l.multiply(i),s=this._data.viewMatrix.invert(),U=F.multiply(s);return new t(U.x/U.w,U.y/U.w,U.z/U.w).subtract(this.position).normalize()}}get data(){return this._data}}class tt extends n{constructor(){super(),this._objects=[],this.addObject=t=>{this.objects.push(t),this.dispatchEvent(new i(t))},this.removeObject=t=>{const e=this.objects.indexOf(t);if(e<0)throw new Error("Object not found in scene");this.objects.splice(e,1),this.dispatchEvent(new F(t))},this.findObject=t=>{for(const e of this.objects)if(t(e))return e},this.findObjectOfType=t=>{for(const e of this.objects)if(e instanceof t)return e},this.reset=()=>{const t=this.objects.slice();for(const e of t)this.removeObject(e)},this.reset()}saveToFile(t=null,e=null){if(!document)return;if(e){if("splat"!==e&&"ply"!==e)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else e="splat";if(!t){const n=new Date;t=`scene-${n.getFullYear()}-${n.getMonth()+1}-${n.getDate()}.${e}`}const n=[];let l=0;for(const t of this.objects)if(t.applyRotation(),t.applyScale(),t.applyPosition(),t instanceof O){const e=t.serialize();n.push(e),l+=t.splatCount}const i=new Uint8Array(l*d.RowLength);let F,s=0;for(const t of n)i.set(t,s),s+=t.length;if("ply"===e){const t=Q.SplatToPLY(i.buffer,l);F=new Blob([t],{type:"application/octet-stream"})}else F=new Blob([i.buffer],{type:"application/octet-stream"});const U=document.createElement("a");U.download=t,U.href=URL.createObjectURL(F),U.click()}get objects(){return this._objects}}async function et(t,e){const n=await fetch(t,{mode:"cors",credentials:"omit",cache:e?"force-cache":"default"});if(200!=n.status)throw new Error(n.status+" Unable to load "+n.url);return n}async function nt(t,e){return t.headers.has("content-length")?async function(t,e){const n=t.body.getReader(),l=parseInt(t.headers.get("content-length")),i=new Uint8Array(l);let F=0;for(;;){const{done:t,value:s}=await n.read();if(t)break;i.set(s,F),F+=s.length,null==e||e(F/l)}return i}(t,e):async function(t,e){const n=t.body.getReader(),l=[];let i=0;for(;;){const{done:t,value:e}=await n.read();if(t)break;l.push(e),i+=e.length}const F=new Uint8Array(i);let s=0;for(const t of l)F.set(t,s),s+=t.length,null==e||e(s/i);return F}(t,e)}class lt{static async LoadAsync(t,e,n,l=!1){const i=await et(t,l),F=await nt(i,n);return this.LoadFromArrayBuffer(F,e)}static async LoadFromFileAsync(t,e,n){const l=new FileReader;let i=new O;return l.onload=t=>{i=this.LoadFromArrayBuffer(t.target.result,e)},l.onprogress=t=>{null==n||n(t.loaded/t.total)},l.readAsArrayBuffer(t),await new Promise((t=>{l.onloadend=()=>{t()}})),i}static LoadFromArrayBuffer(t,e){const n=new Uint8Array(t),l=d.Deserialize(n),i=new O(l);return e.addObject(i),i}}class it{static async LoadAsync(t,e,n,l="",i=!1){const F=await et(t,i),s=await nt(F,n);if(112!==s[0]||108!==s[1]||121!==s[2]||10!==s[3])throw new Error("Invalid PLY file");return this.LoadFromArrayBuffer(s.buffer,e,l)}static async LoadFromFileAsync(t,e,n,l=""){const i=new FileReader;let F=new O;return i.onload=t=>{F=this.LoadFromArrayBuffer(t.target.result,e,l)},i.onprogress=t=>{null==n||n(t.loaded/t.total)},i.readAsArrayBuffer(t),await new Promise((t=>{i.onloadend=()=>{t()}})),F}static LoadFromArrayBuffer(t,e,n=""){const l=new Uint8Array(this._ParsePLYBuffer(t,n)),i=d.Deserialize(l),F=new O(i);return e.addObject(F),F}static _ParsePLYBuffer(n,l){const i=new Uint8Array(n),F=(new TextDecoder).decode(i.slice(0,10240)),s="end_header\n",U=F.indexOf(s);if(U<0)throw new Error("Unable to read .ply file header");const a=parseInt(/element vertex (\d+)\n/.exec(F)[1]);let r=0;const o={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},A=[];for(const t of F.slice(0,U).split("\n").filter((t=>t.startsWith("property ")))){const[e,n,l]=t.split(" ");if(A.push({name:l,type:n,offset:r}),!o[n])throw new Error(`Unsupported property type: ${n}`);r+=o[n]}const c=new DataView(n,U+11),B=new ArrayBuffer(d.RowLength*a),h=e.FromEuler(new t(Math.PI/2,0,0));for(let t=0;t<a;t++){const n=new Float32Array(B,t*d.RowLength,3),i=new Float32Array(B,t*d.RowLength+12,3),F=new Uint8ClampedArray(B,t*d.RowLength+24,4),s=new Uint8ClampedArray(B,t*d.RowLength+28,4);let U=255,a=0,o=0,V=0;A.forEach((e=>{let l;switch(e.type){case"float":l=c.getFloat32(e.offset+t*r,!0);break;case"int":l=c.getInt32(e.offset+t*r,!0);break;default:throw new Error(`Unsupported property type: ${e.type}`)}switch(e.name){case"x":n[0]=l;break;case"y":n[1]=l;break;case"z":n[2]=l;break;case"scale_0":case"scaling_0":i[0]=Math.exp(l);break;case"scale_1":case"scaling_1":i[1]=Math.exp(l);break;case"scale_2":case"scaling_2":i[2]=Math.exp(l);break;case"red":F[0]=l;break;case"green":F[1]=l;break;case"blue":F[2]=l;break;case"f_dc_0":case"features_0":F[0]=255*(.5+Q.SH_C0*l);break;case"f_dc_1":case"features_1":F[1]=255*(.5+Q.SH_C0*l);break;case"f_dc_2":case"features_2":F[2]=255*(.5+Q.SH_C0*l);break;case"f_dc_3":F[3]=255*(.5+Q.SH_C0*l);break;case"opacity":case"opacity_0":F[3]=1/(1+Math.exp(-l))*255;break;case"rot_0":case"rotation_0":U=l;break;case"rot_1":case"rotation_1":a=l;break;case"rot_2":case"rotation_2":o=l;break;case"rot_3":case"rotation_3":V=l}}));let R=new e(a,o,V,U);switch(l){case"polycam":{const t=n[1];n[1]=-n[2],n[2]=t,R=h.multiply(R);break}case"":break;default:throw new Error(`Unsupported format: ${l}`)}R=R.normalize(),s[0]=128*R.w+128,s[1]=128*R.x+128,s[2]=128*R.y+128,s[3]=128*R.z+128}return B}}class Ft{static async LoadAsync(t,e,n,l,i=!1){const F=await et(t,i),s=await nt(F,l);return this._ParseSplatvBuffer(s.buffer,e,n)}static async LoadFromFileAsync(t,e,n,l){const i=new FileReader;let F=null;if(i.onload=t=>{F=this._ParseSplatvBuffer(t.target.result,e,n)},i.onprogress=t=>{null==l||l(t.loaded/t.total)},i.readAsArrayBuffer(t),await new Promise((t=>{i.onloadend=()=>{t()}})),!F)throw new Error("Failed to load splatv file");return F}static _ParseSplatvBuffer(n,l,i){let F=null;const s=(n,s,U)=>{if("magic"===n.type){const t=new Int32Array(s.buffer);if(26443!==t[0])throw new Error("Invalid splatv file");U.push({size:t[1],type:"chunks"})}else if("chunks"===n.type){const n=JSON.parse(new TextDecoder("utf-8").decode(s));if(0==n.length)throw new Error("Invalid splatv file");n.length>1&&console.warn("Splatv file contains more than one chunk, only the first one will be loaded");const l=n[0],F=l.cameras;if(i&&F&&F.length){const n=F[0],l=new t(n.position[0],n.position[1],n.position[2]),s=e.FromMatrix3(new A(n.rotation[0][0],n.rotation[0][1],n.rotation[0][2],n.rotation[1][0],n.rotation[1][1],n.rotation[1][2],n.rotation[2][0],n.rotation[2][1],n.rotation[2][2]));i.position=l,i.rotation=s}U.push(l)}else if("splat"===n.type){const t=r.Deserialize(s,n.texwidth,n.texheight),e=new P(t);l.addObject(e),F=e}},U=new Uint8Array(n),a=[{size:8,type:"magic",texwidth:0,texheight:0}];let d=a.shift(),Q=new Uint8Array(d.size),o=0,c=0;for(;d;){for(;o<d.size;){const t=Math.min(d.size-o,U.length-c);Q.set(U.subarray(c,c+t),o),o+=t,c+=t}if(s(d,Q,a),F)return F;d=a.shift(),d&&(Q=new Uint8Array(d.size),o=0)}throw new Error("Invalid splatv file")}}function st(t,e,n){var l=void 0===e?null:e,i=function(t,e){var n=atob(t);if(e){for(var l=new Uint8Array(n.length),i=0,F=n.length;i<F;++i)l[i]=n.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(l.buffer))}return n}(t,void 0!==n&&n),F=i.indexOf("\n",10)+1,s=i.substring(F)+(l?"//# sourceMappingURL="+l:""),U=new Blob([s],{type:"application/javascript"});return URL.createObjectURL(U)}function Ut(t,e,n){var l;return function(i){return l=l||st(t,e,n),new Worker(l,i)}}var at=Ut("",null,!1);class dt{constructor(t,e){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=t;const n=t.gl;this._program=n.createProgram(),this._passes=e||[];const l=n.createShader(n.VERTEX_SHADER);n.shaderSource(l,this._getVertexSource()),n.compileShader(l),n.getShaderParameter(l,n.COMPILE_STATUS)||console.error(n.getShaderInfoLog(l));const i=n.createShader(n.FRAGMENT_SHADER);n.shaderSource(i,this._getFragmentSource()),n.compileShader(i),n.getShaderParameter(i,n.COMPILE_STATUS)||console.error(n.getShaderInfoLog(i)),n.attachShader(this.program,l),n.attachShader(this.program,i),n.linkProgram(this.program),n.getProgramParameter(this.program,n.LINK_STATUS)||console.error(n.getProgramInfoLog(this.program)),this.resize=()=>{n.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),n.useProgram(this._program),this._initialize();for(const t of this.passes)t.initialize(this);this._initialized=!0,this._started=!0},this.render=(t,e)=>{n.useProgram(this._program),this._scene===t&&this._camera===e||(this.dispose(),this._scene=t,this._camera=e,this.initialize());for(const t of this.passes)t.render();this._render()},this.dispose=()=>{if(this._initialized){n.useProgram(this._program);for(const t of this.passes)t.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var rt=Ut("",null,!1),Qt=function(t={}){var e,n,l,i=t,F=new Promise(((t,l)=>{e=t,n=l})),s=Object.assign({},i),U="";U=(U=self.location.href).startsWith("blob:")?"":U.substr(0,U.replace(/[?#].*/,"").lastIndexOf("/")+1),l=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)},i.print||console.log.bind(console);var a,d,r=i.printErr||console.error.bind(console);function Q(t){if(N(t))return function(t){for(var e=atob(t),n=new Uint8Array(e.length),l=0;l<e.length;++l)n[l]=e.charCodeAt(l);return n}(t.slice(p.length))}Object.assign(i,s),s=null,i.arguments&&i.arguments,i.thisProgram&&i.thisProgram,i.quit&&i.quit,i.wasmBinary&&(a=i.wasmBinary);var o,A,c,B,h,V,R,Z,W=!1;function m(){var t=d.buffer;i.HEAP8=o=new Int8Array(t),i.HEAP16=c=new Int16Array(t),i.HEAPU8=A=new Uint8Array(t),i.HEAPU16=B=new Uint16Array(t),i.HEAP32=h=new Int32Array(t),i.HEAPU32=V=new Uint32Array(t),i.HEAPF32=R=new Float32Array(t),i.HEAPF64=Z=new Float64Array(t)}var g,I=[],b=[],J=[],C=0,u=null,p="data:application/octet-stream;base64,",N=t=>t.startsWith(p);function E(t){return Promise.resolve().then((()=>function(t){if(t==g&&a)return new Uint8Array(a);var e=Q(t);if(e)return e;if(l)return l(t);throw"both async and sync fetching of the wasm failed"}(t)))}function y(t,e,l){return E(t).then((t=>WebAssembly.instantiate(t,e))).then(l,(t=>{r(`failed to asynchronously prepare wasm: ${t}`),function(t){i.onAbort?.(t),r(t="Aborted("+t+")"),W=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw n(e),e}(t)}))}g="data:application/octet-stream;base64,";var G=t=>{for(;t.length>0;)t.shift()(i)};i.noExitRuntime;var S,X,Y=t=>{for(var e="",n=t;A[n];)e+=S[A[n++]];return e},T={},k={},f=t=>{throw new X(t)};function x(t,e,n={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(t,e,n={}){var l=e.name;if(t||f(`type "${l}" must have a positive integer typeid pointer`),k.hasOwnProperty(t)){if(n.ignoreDuplicateRegistrations)return;f(`Cannot register type '${l}' twice`)}if(k[t]=e,T.hasOwnProperty(t)){var i=T[t];delete T[t],i.forEach((t=>t()))}}(t,e,n)}var H=[],w=[],D=()=>w.length/2-5-H.length,v=t=>(t||f("Cannot use deleted val. handle = "+t),w[t]),z=t=>{switch(t){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:{const e=H.pop()||w.length;return w[e]=t,w[e+1]=1,e}}};function M(t){return this.fromWireType(V[t>>2])}var j={name:"emscripten::val",fromWireType:t=>{var e=v(t);return(t=>{t>9&&0==--w[t+1]&&(w[t]=void 0,H.push(t))})(t),e},toWireType:(t,e)=>z(e),argPackAdvance:8,readValueFromPointer:M,destructorFunction:null},K=(t,e)=>{switch(e){case 4:return function(t){return this.fromWireType(R[t>>2])};case 8:return function(t){return this.fromWireType(Z[t>>3])};default:throw new TypeError(`invalid float width (${e}): ${t}`)}},_=(t,e,n)=>{switch(e){case 1:return n?t=>o[t]:t=>A[t];case 2:return n?t=>c[t>>1]:t=>B[t>>1];case 4:return n?t=>h[t>>2]:t=>V[t>>2];default:throw new TypeError(`invalid integer width (${e}): ${t}`)}},O="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,P=(t,e)=>t?((t,e,n)=>{for(var l=e+n,i=e;t[i]&&!(i>=l);)++i;if(i-e>16&&t.buffer&&O)return O.decode(t.subarray(e,i));for(var F="";e<i;){var s=t[e++];if(128&s){var U=63&t[e++];if(192!=(224&s)){var a=63&t[e++];if((s=224==(240&s)?(15&s)<<12|U<<6|a:(7&s)<<18|U<<12|a<<6|63&t[e++])<65536)F+=String.fromCharCode(s);else{var d=s-65536;F+=String.fromCharCode(55296|d>>10,56320|1023&d)}}else F+=String.fromCharCode((31&s)<<6|U)}else F+=String.fromCharCode(s)}return F})(A,t,e):"",L="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,q=(t,e)=>{for(var n=t,l=n>>1,i=l+e/2;!(l>=i)&&B[l];)++l;if((n=l<<1)-t>32&&L)return L.decode(A.subarray(t,n));for(var F="",s=0;!(s>=e/2);++s){var U=c[t+2*s>>1];if(0==U)break;F+=String.fromCharCode(U)}return F},$=(t,e,n)=>{if(n??=2147483647,n<2)return 0;for(var l=e,i=(n-=2)<2*t.length?n/2:t.length,F=0;F<i;++F){var s=t.charCodeAt(F);c[e>>1]=s,e+=2}return c[e>>1]=0,e-l},tt=t=>2*t.length,et=(t,e)=>{for(var n=0,l="";!(n>=e/4);){var i=h[t+4*n>>2];if(0==i)break;if(++n,i>=65536){var F=i-65536;l+=String.fromCharCode(55296|F>>10,56320|1023&F)}else l+=String.fromCharCode(i)}return l},nt=(t,e,n)=>{if(n??=2147483647,n<4)return 0;for(var l=e,i=l+n-4,F=0;F<t.length;++F){var s=t.charCodeAt(F);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&t.charCodeAt(++F)),h[e>>2]=s,(e+=4)+4>i)break}return h[e>>2]=0,e-l},lt=t=>{for(var e=0,n=0;n<t.length;++n){var l=t.charCodeAt(n);l>=55296&&l<=57343&&++n,e+=4}return e},it=t=>{var e=(t-d.buffer.byteLength+65535)/65536;try{return d.grow(e),m(),1}catch(t){}};(()=>{for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);S=t})(),X=i.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},i.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},w.push(0,1,void 0,1,null,1,!0,1,!1,1),i.count_emval_handles=D;var Ft={f:(t,e,n,l,i)=>{},h:(t,e,n,l)=>{x(t,{name:e=Y(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:l},argPackAdvance:8,readValueFromPointer:function(t){return this.fromWireType(A[t])},destructorFunction:null})},g:t=>x(t,j),e:(t,e,n)=>{x(t,{name:e=Y(e),fromWireType:t=>t,toWireType:(t,e)=>e,argPackAdvance:8,readValueFromPointer:K(e,n),destructorFunction:null})},b:(t,e,n,l,i)=>{e=Y(e);var F=t=>t;if(0===l){var s=32-8*n;F=t=>t<<s>>>s}var U=e.includes("unsigned");x(t,{name:e,fromWireType:F,toWireType:U?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:_(e,n,0!==l),destructorFunction:null})},a:(t,e,n)=>{var l=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function i(t){var e=V[t>>2],n=V[t+4>>2];return new l(o.buffer,n,e)}x(t,{name:n=Y(n),fromWireType:i,argPackAdvance:8,readValueFromPointer:i},{ignoreDuplicateRegistrations:!0})},d:(t,e)=>{var n="std::string"===(e=Y(e));x(t,{name:e,fromWireType(t){var e,l=V[t>>2],i=t+4;if(n)for(var F=i,s=0;s<=l;++s){var U=i+s;if(s==l||0==A[U]){var a=P(F,U-F);void 0===e?e=a:(e+=String.fromCharCode(0),e+=a),F=U+1}}else{var d=new Array(l);for(s=0;s<l;++s)d[s]=String.fromCharCode(A[i+s]);e=d.join("")}return dt(t),e},toWireType(t,e){var l;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var i="string"==typeof e;i||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||f("Cannot pass non-string to std::string"),l=n&&i?(t=>{for(var e=0,n=0;n<t.length;++n){var l=t.charCodeAt(n);l<=127?e++:l<=2047?e+=2:l>=55296&&l<=57343?(e+=4,++n):e+=3}return e})(e):e.length;var F=at(4+l+1),s=F+4;if(V[F>>2]=l,n&&i)((t,e,n,l)=>{if(!(l>0))return 0;for(var i=n+l-1,F=0;F<t.length;++F){var s=t.charCodeAt(F);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&t.charCodeAt(++F)),s<=127){if(n>=i)break;e[n++]=s}else if(s<=2047){if(n+1>=i)break;e[n++]=192|s>>6,e[n++]=128|63&s}else if(s<=65535){if(n+2>=i)break;e[n++]=224|s>>12,e[n++]=128|s>>6&63,e[n++]=128|63&s}else{if(n+3>=i)break;e[n++]=240|s>>18,e[n++]=128|s>>12&63,e[n++]=128|s>>6&63,e[n++]=128|63&s}}e[n]=0})(e,A,s,l+1);else if(i)for(var U=0;U<l;++U){var a=e.charCodeAt(U);a>255&&(dt(s),f("String has UTF-16 code units that do not fit in 8 bits")),A[s+U]=a}else for(U=0;U<l;++U)A[s+U]=e[U];return null!==t&&t.push(dt,F),F},argPackAdvance:8,readValueFromPointer:M,destructorFunction(t){dt(t)}})},c:(t,e,n)=>{var l,i,F,s;n=Y(n),2===e?(l=q,i=$,s=tt,F=t=>B[t>>1]):4===e&&(l=et,i=nt,s=lt,F=t=>V[t>>2]),x(t,{name:n,fromWireType:t=>{for(var n,i=V[t>>2],s=t+4,U=0;U<=i;++U){var a=t+4+U*e;if(U==i||0==F(a)){var d=l(s,a-s);void 0===n?n=d:(n+=String.fromCharCode(0),n+=d),s=a+e}}return dt(t),n},toWireType:(t,l)=>{"string"!=typeof l&&f(`Cannot pass non-string to C++ string type ${n}`);var F=s(l),U=at(4+F+e);return V[U>>2]=F/e,i(l,U+4,F+e),null!==t&&t.push(dt,U),U},argPackAdvance:8,readValueFromPointer:M,destructorFunction(t){dt(t)}})},i:(t,e)=>{x(t,{isVoid:!0,name:e=Y(e),argPackAdvance:0,fromWireType:()=>{},toWireType:(t,e)=>{}})},j:t=>{var e=A.length,n=2147483648;if((t>>>=0)>n)return!1;for(var l,i,F=1;F<=4;F*=2){var s=e*(1+.2/F);s=Math.min(s,t+100663296);var U=Math.min(n,(l=Math.max(t,s))+((i=65536)-l%i)%i);if(it(U))return!0}return!1}},st=function(){var t,e,l,F={a:Ft};function s(t,e){var n;return st=t.exports,d=st.k,m(),n=st.l,b.unshift(n),function(t){if(C--,i.monitorRunDependencies?.(C),0==C&&u){var e=u;u=null,e()}}(),st}if(C++,i.monitorRunDependencies?.(C),i.instantiateWasm)try{return i.instantiateWasm(F,s)}catch(t){r(`Module.instantiateWasm callback failed with error: ${t}`),n(t)}return(t=g,e=F,l=function(t){s(t.instance)},y(t,e,l)).catch(n),{}}();i._pack=(t,e,n,l,F,s,U,a,d,r,Q,o)=>(i._pack=st.m)(t,e,n,l,F,s,U,a,d,r,Q,o);var Ut,at=i._malloc=t=>(at=i._malloc=st.o)(t),dt=i._free=t=>(dt=i._free=st.p)(t);function rt(){function t(){Ut||(Ut=!0,i.calledRun=!0,W||(G(b),e(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)t=i.postRun.shift(),J.unshift(t);var t;G(J)}()))}C>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)t=i.preRun.shift(),I.unshift(t);var t;G(I)}(),C>0||(i.setStatus?(i.setStatus("Running..."),setTimeout((function(){setTimeout((function(){i.setStatus("")}),1),t()}),1)):t()))}if(u=function t(){Ut||rt(),Ut||(u=t)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return rt(),F};class ot{constructor(t){this.dataChanged=!1,this.transformsChanged=!1,this.colorTransformsChanged=!1,this._updating=new Set,this._dirty=new Set;let e=0,n=0;this._splatIndices=new Map,this._singleSplatIndices=new Map,this._offsets=new Map,this._singleOffsets=new Map;const i=new Map,F=new Map;for(const l of t.objects)if(l instanceof O){this._splatIndices.set(l,n),this._offsets.set(l,e),i.set(e,l),e+=l.splatCount,n++;for(let t of l.splats)this._singleSplatIndices.set(t,n),this._singleOffsets.set(t,n),F.set(e,t),n++}this._vertexCount=e,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=i.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._colorTransformsWidth=4,this._colorTransformsHeight=64,this._colorTransforms=new Float32Array(this._colorTransformsWidth*this._colorTransformsHeight*4),this._colorTransforms.fill(0),this._colorTransforms[0]=1,this._colorTransforms[5]=1,this._colorTransforms[10]=1,this._colorTransforms[15]=1,this._colorTransformIndicesWidth=1024,this._colorTransformIndicesHeight=Math.ceil(this.vertexCount/this._colorTransformIndicesWidth),this._colorTransformIndices=new Uint32Array(this._colorTransformIndicesWidth*this._colorTransformIndicesHeight),this.colorTransformIndices.fill(0),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new rt;const s=t=>{const e=this._splatIndices.get(t);this._transforms.set(t.transform.buffer,20*e),this._transforms[20*e+16]=t.selected?1:0,t.positionChanged=!1,t.rotationChanged=!1,t.scaleChanged=!1,t.selectedChanged=!1,t.renderNumberChanged=!1,this.transformsChanged=!0},U=()=>{let t=!1;for(const e of this._splatIndices.keys())if(e.colorTransformChanged){t=!0;break}if(!t)return;const e=[new l];this._colorTransformIndices.fill(0);let n=1;for(const t of this._splatIndices.keys()){const l=this._offsets.get(t);for(const l of t.colorTransforms)e.includes(l)||(e.push(l),n++);for(const e of t.colorTransformsMap.keys()){const i=t.colorTransformsMap.get(e);this._colorTransformIndices[e+l]=i+n-1}t.colorTransformChanged=!1}for(let t=0;t<e.length;t++){const n=e[t];this._colorTransforms.set(n.buffer,16*t)}this.colorTransformsChanged=!0};let a;this._worker.onmessage=t=>{if(t.data.response){const e=t.data.response,n=i.get(e.offset);s(n),U();const l=this._splatIndices.get(n);for(let t=0;t<n.splatCount;t++)this._transformIndices[e.offset+t]=l;this._data.set(e.data,8*e.offset),n.data.reattach(e.positions,e.rotations,e.scales,e.colors,e.selection,e.rendered),this._positions.set(e.worldPositions,3*e.offset),this._rotations.set(e.worldRotations,4*e.offset),this._scales.set(e.worldScales,3*e.offset),this._updating.delete(n),n.selectedChanged=!1,n.renderNumberChanged=!1,this.dataChanged=!0}},async function(){a=await Qt()}();const d=t=>{if(!a)return void async function(){for(;!a;)await new Promise((t=>setTimeout(t,0)))}().then((()=>{d(t)}));s(t);const e=a._malloc(3*t.splatCount*4),n=a._malloc(4*t.splatCount*4),l=a._malloc(3*t.splatCount*4),i=a._malloc(4*t.splatCount),F=a._malloc(t.splatCount),U=a._malloc(t.splatCount),r=a._malloc(8*t.splatCount*4),Q=a._malloc(3*t.splatCount*4),o=a._malloc(4*t.splatCount*4),A=a._malloc(3*t.splatCount*4);a.HEAPF32.set(t.Positions,e/4),a.HEAPF32.set(t.Rotations,n/4),a.HEAPF32.set(t.Scales,l/4),a.HEAPU8.set(t.Colors,i),a.HEAPU8.set(t.Selections,F),a.HEAPU8.set(t.Rendered,U),a._pack(t.selected,t.splatCount,e,n,l,i,F,U,r,Q,o,A);const c=new Uint32Array(a.HEAPU32.buffer,r,8*t.splatCount),B=new Float32Array(a.HEAPF32.buffer,Q,3*t.splatCount),h=new Float32Array(a.HEAPF32.buffer,o,4*t.splatCount),V=new Float32Array(a.HEAPF32.buffer,A,3*t.splatCount),R=this._splatIndices.get(t),Z=this._offsets.get(t);for(let e=0;e<t.splatCount;e++)this._transformIndices[Z+e]=R;this._data.set(c,8*Z),this._positions.set(B,3*Z),this._rotations.set(h,4*Z),this._scales.set(V,3*Z),a._free(e),a._free(n),a._free(l),a._free(i),a._free(F),a._free(U),a._free(r),a._free(Q),a._free(o),a._free(A),this.dataChanged=!0,this.colorTransformsChanged=!0},r=t=>{if((t.positionChanged||t.rotationChanged||t.scaleChanged||t.selectedChanged)&&s(t),t.colorTransformChanged&&U(),!t.data.changed||t.data.detached||t.renderNumberChanged)return;const e={position:new Float32Array(t.position.flat()),rotation:new Float32Array(t.rotation.flat()),scale:new Float32Array(t.scale.flat()),selected:t.selected,vertexCount:t.splatCount,positions:t.Positions,rotations:t.Rotations,scales:t.Scales,colors:t.Colors,selection:t.Selections,rendered:t.Rendered,offset:this._offsets.get(t)};this._worker.postMessage({splat:e},[e.position.buffer,e.rotation.buffer,e.scale.buffer,e.positions.buffer,e.rotations.buffer,e.scales.buffer,e.colors.buffer,e.selection.buffer,e.rendered.buffer]),this._updating.add(t),t.data.detached=!0};this.getSplat=t=>{let e=null;for(const[n,l]of this._offsets){if(!(t>=l))break;e=n}return e},this.getLocalIndex=(t,e)=>e-this._offsets.get(t),this.markDirty=t=>{this._dirty.add(t)},this.rebuild=()=>{for(const t of this._dirty)r(t);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const t of this._splatIndices.keys())d(t);U()}get offsets(){return this._offsets}get singleOffsets(){return this._singleOffsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get colorTransforms(){return this._colorTransforms}get colorTransformsWidth(){return this._colorTransformsWidth}get colorTransformsHeight(){return this._colorTransformsHeight}get colorTransformIndices(){return this._colorTransformIndices}get colorTransformIndicesWidth(){return this._colorTransformIndicesWidth}get colorTransformIndicesHeight(){return this._colorTransformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class At{constructor(t=0,e=0,n=0,l=255){this.r=t,this.g=e,this.b=n,this.a=l}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map((t=>t.toString(16).padStart(2,"0"))).join("")}toString(){return`[${this.flat().join(", ")}]`}}class ct extends dt{constructor(t,e){super(t,e),this._outlineThickness=10,this._outlineColor=new At(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null,this._worker=null;const n=t.canvas,l=t.gl;let i,F,s,U,a,d,r,Q,o,A,c,B,h,V,R,Z,W,m,g;this._resize=()=>{this._camera&&(this._camera.data.setSize(n.width,n.height),this._camera.update(),i=l.getUniformLocation(this.program,"projection"),l.uniformMatrix4fv(i,!1,this._camera.data.projectionMatrix.buffer),F=l.getUniformLocation(this.program,"viewport"),l.uniform2fv(F,new Float32Array([n.width,n.height])))};const I=()=>{this._worker=new at,this._worker.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:e}=t.data;this._depthIndex=e,l.bindBuffer(l.ARRAY_BUFFER,g),l.bufferData(l.ARRAY_BUFFER,e,l.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",b),this._scene.addEventListener("objectRemoved",J);for(const t of this._scene.objects)t instanceof O&&(t.addEventListener("objectChanged",u),t.addEventListener("renderedSplatsChanged",C));this._renderData=new ot(this._scene),s=l.getUniformLocation(this.program,"focal"),l.uniform2fv(s,new Float32Array([this._camera.data.fx,this._camera.data.fy])),U=l.getUniformLocation(this.program,"view"),l.uniformMatrix4fv(U,!1,this._camera.data.viewMatrix.buffer),A=l.getUniformLocation(this.program,"outlineThickness"),l.uniform1f(A,this.outlineThickness),c=l.getUniformLocation(this.program,"outlineColor"),l.uniform4fv(c,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=l.createTexture(),a=l.getUniformLocation(this.program,"u_texture"),l.uniform1i(a,0),V=l.createTexture(),d=l.getUniformLocation(this.program,"u_transforms"),l.uniform1i(d,1),R=l.createTexture(),r=l.getUniformLocation(this.program,"u_transformIndices"),l.uniform1i(r,2),Z=l.createTexture(),Q=l.getUniformLocation(this.program,"u_colorTransforms"),l.uniform1i(Q,3),W=l.createTexture(),o=l.getUniformLocation(this.program,"u_colorTransformIndices"),l.uniform1i(o,4),m=l.createBuffer(),l.bindBuffer(l.ARRAY_BUFFER,m),l.bufferData(l.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),l.STATIC_DRAW),B=l.getAttribLocation(this.program,"position"),l.enableVertexAttribArray(B),l.vertexAttribPointer(B,2,l.FLOAT,!1,0,0),g=l.createBuffer(),h=l.getAttribLocation(this.program,"index"),l.enableVertexAttribArray(h),l.bindBuffer(l.ARRAY_BUFFER,g),I()}else console.error("Cannot render without scene and camera")};const b=t=>{const e=t;e.object instanceof O&&e.object.addEventListener("objectChanged",u),p()},J=t=>{const e=t;e.object instanceof O&&e.object.removeEventListener("objectChanged",u),p()},C=t=>{p()},u=t=>{const e=t;e.object instanceof O&&this._renderData&&this._renderData.markDirty(e.object)},p=()=>{var t,e;null===(t=this._renderData)||void 0===t||t.dispose(),this._renderData=new ot(this._scene),null===(e=this._worker)||void 0===e||e.terminate(),I()};this._render=()=>{var t,e;if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged||this.renderData.colorTransformsChanged){this.renderData.dataChanged&&(l.activeTexture(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,this.splatTexture),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32UI,this.renderData.width,this.renderData.height,0,l.RGBA_INTEGER,l.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(l.activeTexture(l.TEXTURE1),l.bindTexture(l.TEXTURE_2D,V),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,l.RGBA,l.FLOAT,this.renderData.transforms),l.activeTexture(l.TEXTURE2),l.bindTexture(l.TEXTURE_2D,R),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.transformIndices)),this.renderData.colorTransformsChanged&&(l.activeTexture(l.TEXTURE3),l.bindTexture(l.TEXTURE_2D,Z),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.colorTransformsWidth,this.renderData.colorTransformsHeight,0,l.RGBA,l.FLOAT,this.renderData.colorTransforms),l.activeTexture(l.TEXTURE4),l.bindTexture(l.TEXTURE_2D,W),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.colorTransformIndicesWidth,this.renderData.colorTransformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.colorTransformIndices));const e=new Float32Array(this.renderData.positions.slice().buffer),n=new Float32Array(this.renderData.transforms.slice().buffer),i=new Uint32Array(this.renderData.transformIndices.slice().buffer);null===(t=this._worker)||void 0===t||t.postMessage({sortData:{positions:e,transforms:n,transformIndices:i,vertexCount:this.renderData.vertexCount}},[e.buffer,n.buffer,i.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1,this.renderData.colorTransformsChanged=!1}this._camera.update(),null===(e=this._worker)||void 0===e||e.postMessage({viewProj:this._camera.data.viewProj.buffer}),l.viewport(0,0,n.width,n.height),l.clearColor(0,0,0,0),l.clear(l.COLOR_BUFFER_BIT),l.disable(l.DEPTH_TEST),l.enable(l.BLEND),l.blendFuncSeparate(l.ONE_MINUS_DST_ALPHA,l.ONE,l.ONE_MINUS_DST_ALPHA,l.ONE),l.blendEquationSeparate(l.FUNC_ADD,l.FUNC_ADD),l.uniformMatrix4fv(i,!1,this._camera.data.projectionMatrix.buffer),l.uniformMatrix4fv(U,!1,this._camera.data.viewMatrix.buffer),l.bindBuffer(l.ARRAY_BUFFER,m),l.vertexAttribPointer(B,2,l.FLOAT,!1,0,0),l.bindBuffer(l.ARRAY_BUFFER,g),l.bufferData(l.ARRAY_BUFFER,this.depthIndex,l.STATIC_DRAW),l.vertexAttribIPointer(h,1,l.INT,0,0),l.vertexAttribDivisor(h,1),l.drawArraysInstanced(l.TRIANGLE_FAN,0,4,this.depthIndex.length)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{var t;if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",b),this._scene.removeEventListener("objectRemoved",J);for(const t of this._scene.objects)t instanceof O&&(t.removeEventListener("objectChanged",u),t.removeEventListener("renderedSplatsChanged",u));null===(t=this._worker)||void 0===t||t.terminate(),this.renderData.dispose(),l.deleteTexture(this.splatTexture),l.deleteTexture(V),l.deleteTexture(R),l.deleteBuffer(g),l.deleteBuffer(m)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=t=>{this._outlineThickness=t,this._initialized&&l.uniform1f(A,t)},this._setOutlineColor=t=>{this._outlineColor=t,this._initialized&&l.uniform4fv(c,new Float32Array(t.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(t){this._setOutlineThickness(t)}get outlineColor(){return this._outlineColor}set outlineColor(t){this._setOutlineColor(t)}get worker(){return this._worker}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n"}}class Bt{constructor(t=1){let e,n,l,i,F=0,s=!1;this.initialize=t=>{if(!(t instanceof ct))throw new Error("FadeInPass requires a RenderProgram");F=t.started?1:0,s=!0,e=t,n=t.renderer.gl,l=n.getUniformLocation(e.program,"useDepthFade"),n.uniform1i(l,1),i=n.getUniformLocation(e.program,"depthFade"),n.uniform1f(i,F)},this.render=()=>{var U;s&&!(null===(U=e.renderData)||void 0===U?void 0:U.updating)&&(n.useProgram(e.program),F=Math.min(F+.01*t,1),F>=1&&(s=!1,n.uniform1i(l,0)),n.uniform1f(i,F))}}dispose(){}}class ht{constructor(t=null,e=null){this._backgroundColor=new At;const n=t||document.createElement("canvas");t||(n.style.display="block",n.style.boxSizing="border-box",n.style.width="100%",n.style.height="100%",n.style.margin="0",n.style.padding="0",document.body.appendChild(n)),n.style.background=this._backgroundColor.toHexString(),this._canvas=n,this._gl=n.getContext("webgl2",{antialias:!1});const l=e||[];e||l.push(new Bt),this._renderProgram=new ct(this,l),this._customPrograms=[];const i=[this._renderProgram];this.resize=()=>{const t=n.clientWidth,e=n.clientHeight;n.width===t&&n.height===e||this.setSize(t,e)},this.setSize=(t,e)=>{n.width=t,n.height=e,this._gl.viewport(0,0,n.width,n.height);for(const t of i)t.resize()},this.render=(t,e)=>{for(const n of i)n.render(t,e)},this.dispose=()=>{for(const t of i)t.dispose()},this.addProgram=t=>{var e;i.push(t),null===(e=this._customPrograms)||void 0===e||e.push(t)},this.removeProgram=t=>{const e=i.indexOf(t);if(e<0)throw new Error("Program not found");i.splice(e,1)},this.removeAllPrograms=()=>{for(let e=0;e<this._customPrograms.length;e++){var t=this._customPrograms.pop();null!=t&&this.removeProgram(t)}},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this._canvas.style.background=t.toHexString()}}class Vt{constructor(n,l,i=.5,F=.5,s=5,U=!0,a=new t){this.enabled=!0,this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let d=a.clone(),r=d.clone(),Q=i,o=F,c=s,B=!1,h=!1,V=0,R=0,Z=0;const W={};let m=!1;n.addEventListener("objectChanged",(()=>{if(m)return;const e=n.rotation.toEuler();Q=-e.y,o=-e.x;const l=n.position.x-c*Math.sin(Q)*Math.cos(o),i=n.position.y+c*Math.sin(o),F=n.position.z+c*Math.cos(Q)*Math.cos(o);r=new t(l,i,F)})),this.setCameraTarget=e=>{const l=e.x-n.position.x,i=e.y-n.position.y,F=e.z-n.position.z;c=Math.sqrt(l*l+i*i+F*F),o=Math.atan2(i,Math.sqrt(l*l+F*F)),Q=-Math.atan2(l,F),r=new t(e.x,e.y,e.z)};const g=()=>.1+.9*(c-this.minZoom)/(this.maxZoom-this.minZoom),I=t=>{W[t.code]=!0,"ArrowUp"===t.code&&(W.KeyW=!0),"ArrowDown"===t.code&&(W.KeyS=!0),"ArrowLeft"===t.code&&(W.KeyA=!0),"ArrowRight"===t.code&&(W.KeyD=!0)},b=t=>{W[t.code]=!1,"ArrowUp"===t.code&&(W.KeyW=!1),"ArrowDown"===t.code&&(W.KeyS=!1),"ArrowLeft"===t.code&&(W.KeyA=!1),"ArrowRight"===t.code&&(W.KeyD=!1)},J=t=>{S(t),this.enabled&&(B=!0,h=2===t.button,R=t.clientX,Z=t.clientY,window.addEventListener("mouseup",C))},C=t=>{S(t),B=!1,h=!1,window.removeEventListener("mouseup",C)},u=e=>{if(S(e),!this.enabled||!B||!n)return;const l=e.clientX-R,i=e.clientY-Z;if(h){const e=g(),F=-l*this.panSpeed*.01*e,s=-i*this.panSpeed*.01*e,U=A.RotationFromQuaternion(n.rotation).buffer,a=new t(U[0],U[3],U[6]),d=new t(U[1],U[4],U[7]);r=r.add(a.multiply(F)),r=r.add(d.multiply(s))}else Q-=l*this.orbitSpeed*.003,o+=i*this.orbitSpeed*.003,o=Math.min(Math.max(o,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);R=e.clientX,Z=e.clientY},p=t=>{S(t);const e=g();c+=t.deltaY*this.zoomSpeed*.025*e,c=Math.min(Math.max(c,this.minZoom),this.maxZoom)},N=t=>{if(S(t),1===t.touches.length)B=!0,h=!1,R=t.touches[0].clientX,Z=t.touches[0].clientY,V=0;else if(2===t.touches.length){B=!0,h=!0,R=(t.touches[0].clientX+t.touches[1].clientX)/2,Z=(t.touches[0].clientY+t.touches[1].clientY)/2;const e=t.touches[0].clientX-t.touches[1].clientX,n=t.touches[0].clientY-t.touches[1].clientY;V=Math.sqrt(e*e+n*n)}},E=t=>{S(t),B=!1,h=!1},y=e=>{if(S(e),B&&n)if(h){const l=g(),i=e.touches[0].clientX-e.touches[1].clientX,F=e.touches[0].clientY-e.touches[1].clientY,s=Math.sqrt(i*i+F*F);c+=(V-s)*this.zoomSpeed*.1*l,c=Math.min(Math.max(c,this.minZoom),this.maxZoom),V=s;const U=(e.touches[0].clientX+e.touches[1].clientX)/2,a=(e.touches[0].clientY+e.touches[1].clientY)/2,d=U-R,Q=a-Z,o=A.RotationFromQuaternion(n.rotation).buffer,B=new t(o[0],o[3],o[6]),h=new t(o[1],o[4],o[7]);r=r.add(B.multiply(-d*this.panSpeed*.025*l)),r=r.add(h.multiply(-Q*this.panSpeed*.025*l)),R=U,Z=a}else{const t=e.touches[0].clientX-R,n=e.touches[0].clientY-Z;Q-=t*this.orbitSpeed*.003,o+=n*this.orbitSpeed*.003,o=Math.min(Math.max(o,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),R=e.touches[0].clientX,Z=e.touches[0].clientY}},G=(t,e,n)=>(1-n)*t+n*e;this.update=()=>{m=!0,i=G(i,Q,this.dampening),F=G(F,o,this.dampening),s=G(s,c,this.dampening),d=d.lerp(r,this.dampening);const l=d.x+s*Math.sin(i)*Math.cos(F),U=d.y-s*Math.sin(F),a=d.z-s*Math.cos(i)*Math.cos(F);n.position=new t(l,U,a);const B=d.subtract(n.position).normalize(),h=Math.asin(-B.y),V=Math.atan2(B.x,B.z);n.rotation=e.FromEuler(new t(h,V,0));const R=.025,Z=.01,g=A.RotationFromQuaternion(n.rotation).buffer,I=new t(-g[2],-g[5],-g[8]),b=new t(g[0],g[3],g[6]);W.KeyS&&(r=r.add(I.multiply(R))),W.KeyW&&(r=r.subtract(I.multiply(R))),W.KeyA&&(r=r.subtract(b.multiply(R))),W.KeyD&&(r=r.add(b.multiply(R))),W.KeyE&&(Q+=Z),W.KeyQ&&(Q-=Z),W.KeyR&&(o+=Z),W.KeyF&&(o-=Z),m=!1};const S=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{l.removeEventListener("dragenter",S),l.removeEventListener("dragover",S),l.removeEventListener("dragleave",S),l.removeEventListener("contextmenu",S),l.removeEventListener("mousedown",J),l.removeEventListener("mousemove",u),l.removeEventListener("wheel",p),l.removeEventListener("touchstart",N),l.removeEventListener("touchend",E),l.removeEventListener("touchmove",y),U&&(window.removeEventListener("keydown",I),window.removeEventListener("keyup",b))},U&&(window.addEventListener("keydown",I),window.addEventListener("keyup",b)),l.addEventListener("dragenter",S),l.addEventListener("dragover",S),l.addEventListener("dragleave",S),l.addEventListener("contextmenu",S),l.addEventListener("mousedown",J),l.addEventListener("mousemove",u),l.addEventListener("wheel",p),l.addEventListener("touchstart",N),l.addEventListener("touchend",E),l.addEventListener("touchmove",y),this.update()}}class Rt{constructor(n,l){this.moveSpeed=1.5,this.lookSpeed=.7,this.dampening=.5;const i={};let F=n.rotation.toEuler().x,s=n.rotation.toEuler().y,U=n.position,a=!1;const d=()=>{l.requestPointerLock()},r=()=>{a=document.pointerLockElement===l,a?l.addEventListener("mousemove",Q):l.removeEventListener("mousemove",Q)},Q=t=>{const e=t.movementX,n=t.movementY;s+=e*this.lookSpeed*.001,F-=n*this.lookSpeed*.001,F=Math.max(-Math.PI/2,Math.min(Math.PI/2,F))},o=t=>{i[t.code]=!0,"ArrowUp"===t.code&&(i.KeyW=!0),"ArrowDown"===t.code&&(i.KeyS=!0),"ArrowLeft"===t.code&&(i.KeyA=!0),"ArrowRight"===t.code&&(i.KeyD=!0)},c=t=>{i[t.code]=!1,"ArrowUp"===t.code&&(i.KeyW=!1),"ArrowDown"===t.code&&(i.KeyS=!1),"ArrowLeft"===t.code&&(i.KeyA=!1),"ArrowRight"===t.code&&(i.KeyD=!1),"Escape"===t.code&&document.exitPointerLock()};this.update=()=>{const l=A.RotationFromQuaternion(n.rotation).buffer,a=new t(-l[2],-l[5],-l[8]),d=new t(l[0],l[3],l[6]);let r=new t(0,0,0);i.KeyS&&(r=r.add(a)),i.KeyW&&(r=r.subtract(a)),i.KeyA&&(r=r.subtract(d)),i.KeyD&&(r=r.add(d)),r=new t(r.x,0,r.z),r.magnitude()>0&&(r=r.normalize()),U=U.add(r.multiply(.01*this.moveSpeed)),n.position=n.position.add(U.subtract(n.position).multiply(this.dampening)),n.rotation=e.FromEuler(new t(F,s,0))};const B=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{l.removeEventListener("dragenter",B),l.removeEventListener("dragover",B),l.removeEventListener("dragleave",B),l.removeEventListener("contextmenu",B),l.removeEventListener("mousedown",d),document.removeEventListener("pointerlockchange",r),window.removeEventListener("keydown",o),window.removeEventListener("keyup",c)},window.addEventListener("keydown",o),window.addEventListener("keyup",c),l.addEventListener("dragenter",B),l.addEventListener("dragover",B),l.addEventListener("dragleave",B),l.addEventListener("contextmenu",B),l.addEventListener("mousedown",d),document.addEventListener("pointerlockchange",r),this.update()}}class Zt{constructor(e=new t(1,0,0),n=new t(0,0,0),l=0){this.normal=e,this.point=n,this.constant=l}setComponents(t,e,n,l){return this.normal.set(t,e,n),this.constant=l,this}intersect(t,e){const n=this.normal.dot(e);if(Math.abs(n)<1e-4)return null;const l=this.normal.dot(this.point.subtract(t))/n;return l<0?null:t.add(e.multiply(l))}normalize(){const t=1/this.normal.magnitude();return this.normal.multiply(t),this.constant*=t,this}distanceToPoint(t){return this.normal.dot(t)+this.constant}}class Wt{initialize(t){}render(){}dispose(){}}class mt extends dt{constructor(t,e=[]){super(t,e),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null;const n=t.canvas,i=t.gl;let F,s,U,a,d,r,Q,o,A,c,B;this._resize=()=>{this._camera&&(this._camera.data.setSize(n.width,n.height),this._camera.update(),s=i.getUniformLocation(this.program,"projection"),i.uniformMatrix4fv(s,!1,this._camera.data.projectionMatrix.buffer),U=i.getUniformLocation(this.program,"viewport"),i.uniform2fv(U,new Float32Array([n.width,n.height])))};const h=()=>{null!==t.renderProgram.worker?(F=t.renderProgram.worker,F.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:e}=t.data;this._depthIndex=e,i.bindBuffer(i.ARRAY_BUFFER,B),i.bufferData(i.ARRAY_BUFFER,e,i.STATIC_DRAW)}}):console.error("Render program is not initialized. Cannot render without worker")};this._initialize=()=>{if(!this._scene||!this._camera)return void console.error("Cannot render without scene and camera");this._resize(),this._scene.addEventListener("objectAdded",V),this._scene.addEventListener("objectRemoved",R);for(const t of this._scene.objects)t instanceof P&&(null===this._renderData?(this._renderData=t.data,t.addEventListener("objectChanged",Z)):console.warn("Multiple Splatv objects are not currently supported"));if(null===this._renderData)return void console.error("Cannot render without Splatv object");a=i.getUniformLocation(this.program,"focal"),i.uniform2fv(a,new Float32Array([this._camera.data.fx,this._camera.data.fy])),d=i.getUniformLocation(this.program,"view"),i.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),this._splatTexture=i.createTexture(),r=i.getUniformLocation(this.program,"u_texture"),i.uniform1i(r,0),Q=i.getUniformLocation(this.program,"time"),i.uniform1f(Q,Math.sin(Date.now()/1e3)/2+.5),c=i.createBuffer(),i.bindBuffer(i.ARRAY_BUFFER,c),i.bufferData(i.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),i.STATIC_DRAW),o=i.getAttribLocation(this.program,"position"),i.enableVertexAttribArray(o),i.vertexAttribPointer(o,2,i.FLOAT,!1,0,0),B=i.createBuffer(),A=i.getAttribLocation(this.program,"index"),i.enableVertexAttribArray(A),i.bindBuffer(i.ARRAY_BUFFER,B),h(),i.activeTexture(i.TEXTURE0),i.bindTexture(i.TEXTURE_2D,this._splatTexture),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.NEAREST),i.texImage2D(i.TEXTURE_2D,0,i.RGBA32UI,this._renderData.width,this._renderData.height,0,i.RGBA_INTEGER,i.UNSIGNED_INT,this._renderData.data);const t=this._renderData.positions,e=new Float32Array((new l).buffer),n=new Uint32Array(this._renderData.vertexCount);n.fill(0),F.postMessage({sortData:{positions:t,transforms:e,transformIndices:n,vertexCount:this._renderData.vertexCount}},[t.buffer,e.buffer,n.buffer])};const V=t=>{const e=t;e.object instanceof P&&(null===this._renderData?(this._renderData=e.object.data,e.object.addEventListener("objectChanged",Z)):console.warn("Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.")),this.dispose()},R=t=>{const e=t;e.object instanceof P&&this._renderData===e.object.data&&(this._renderData=null,e.object.removeEventListener("objectChanged",Z)),this.dispose()},Z=t=>{const e=t;e.object instanceof P&&this._renderData===e.object.data&&this.dispose()};this._render=()=>{this._scene&&this._camera?this._renderData?(this._camera.update(),F.postMessage({viewProj:this._camera.data.viewProj.buffer}),i.viewport(0,0,n.width,n.height),i.clearColor(0,0,0,0),i.clear(i.COLOR_BUFFER_BIT),i.disable(i.DEPTH_TEST),i.enable(i.BLEND),i.blendFuncSeparate(i.ONE_MINUS_DST_ALPHA,i.ONE,i.ONE_MINUS_DST_ALPHA,i.ONE),i.blendEquationSeparate(i.FUNC_ADD,i.FUNC_ADD),i.uniformMatrix4fv(s,!1,this._camera.data.projectionMatrix.buffer),i.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),i.uniform1f(Q,Math.sin(Date.now()/1e3)/2+.5),i.bindBuffer(i.ARRAY_BUFFER,c),i.vertexAttribPointer(o,2,i.FLOAT,!1,0,0),i.bindBuffer(i.ARRAY_BUFFER,B),i.bufferData(i.ARRAY_BUFFER,this._depthIndex,i.STATIC_DRAW),i.vertexAttribIPointer(A,1,i.INT,0,0),i.vertexAttribDivisor(A,1),i.drawArraysInstanced(i.TRIANGLE_FAN,0,4,this._renderData.vertexCount)):console.warn("Cannot render without Splatv object"):console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera){this._scene.removeEventListener("objectAdded",V),this._scene.removeEventListener("objectRemoved",R);for(const t of this._scene.objects)t instanceof P&&this._renderData===t.data&&(this._renderData=null,t.removeEventListener("objectChanged",Z));null==F||F.terminate(),i.deleteTexture(this._splatTexture),i.deleteBuffer(B),i.deleteBuffer(c)}else console.error("Cannot dispose without scene and camera")}}get renderData(){return this._renderData}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"}}let gt=class t{constructor(t,e,n){this.bounds=t,this.boxes=e,this.left=null,this.right=null,this.pointIndices=[],n.length>1?this.split(t,e,n):n.length>0&&(this.pointIndices=n)}split(e,n,l){const i=e.size().maxComponent();l.sort(((t,e)=>n[t].center().getComponent(i)-n[e].center().getComponent(i)));const F=Math.floor(l.length/2),s=l.slice(0,F),U=l.slice(F);this.left=new t(e,n,s),this.right=new t(e,n,U)}queryRange(t){return this.bounds.intersects(t)?null!==this.left&&null!==this.right?this.left.queryRange(t).concat(this.right.queryRange(t)):this.pointIndices.filter((e=>t.intersects(this.boxes[e]))):[]}};class It{constructor(t,e){const n=e.map(((t,e)=>e));this.root=new gt(t,e,n)}queryRange(t){return this.root.queryRange(t)}}class bt{constructor(e,n=100,l=1){let i=0,F=null,s=[],U=[];this.testLayer=(t,n,l)=>{const i=e.renderData;U=[];for(const e of i.singleOffsets.keys()){const i=e.bounds;"x"===l?n?i.center().x>=t&&U.push(e):i.center().x<t&&U.push(e):"y"===l?n?i.center().y>=t&&U.push(e):i.center().y<t&&U.push(e):"z"===l&&(n?i.center().z>=t&&U.push(e):i.center().z<t&&U.push(e))}return U},this.testPoint=(a,d)=>{if(null===e.renderData||null===e.camera)return console.error("IntersectionTester cannot be called before renderProgram has been initialized"),null;if((()=>{if(null===e.renderData)return void console.error("IntersectionTester cannot be called before renderProgram has been initialized");const n=performance.now();s=[];const l=e.renderData,a=new Array(l.offsets.size);let d=0;const r=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(const t of l.offsets.keys()){const e=t.bounds;a[d++]=e,r.expand(e.min),r.expand(e.max),s.push(t)}r.permute(),F=new It(r,a);const Q=performance.now()-n;console.log(`creating BVH with SPLAT:  ${Q/1e3} s (${Q} ms).`);const A=performance.now();U=[];const c=new Array(l.singleOffsets.size);let B=0;const h=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(const t of l.singleOffsets.keys()){const e=t.bounds;c[B++]=e,h.expand(e.min),h.expand(e.max),U.push(t)}h.permute(),new It(h,c);const V=performance.now()-A;console.log(`creating BVH with SPLAT:  ${V/1e3} s (${V} ms).`),console.log("Got "+a.length+" boxes for Splat!"),console.log("Got "+c.length+" boxes for Single Splats!"),i=l.vertexCount})(),null===F)return console.error("Failed to build octree for IntersectionTester"),null;const r=e.renderData,Q=e.camera;i!==r.vertexCount&&console.warn("IntersectionTester has not been rebuilt since the last render");const A=Q.screenPointToRay(a,d);for(let e=0;e<n;e+=l){const n=Q.position.add(A.multiply(e)),i=new t(n.x-l/2,n.y-l/2,n.z-l/2),U=new t(n.x+l/2,n.y+l/2,n.z+l/2),a=new o(i,U),d=F.queryRange(a);if(d.length>0)return s[d[0]]}return null},this.testPointSingleSplats=(i,F)=>{if(null===e.renderData||null===e.camera)return console.error("IntersectionTester cannot be called before renderProgram has been initialized"),null;const s=e.renderData,a=e.camera;U=[];const d=a.screenPointToRay(i,F);for(let e=0;e<n;e+=l){const n=a.position.add(d.multiply(e)),i=new t(n.x-l/2,n.y-l/2,n.z-l/2),F=new t(n.x+l/2,n.y+l/2,n.z+l/2),r=new o(i,F);for(const t of s.singleOffsets.keys())t.bounds.intersects(r)&&U.push(t)}return U}}}class Jt{constructor(e=void 0){this.left=null,this.right=null,this.objects=[],this.bounds=new o(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),void 0!==e&&(e.forEach((t=>{this.bounds.expand(t.bounds.min),this.bounds.expand(t.bounds.max)})),e.length<=2?this.objects=e:this.split(e))}split(t){const e=Math.floor(t.length/2);t.sort(((t,e)=>t.bounds.center().x-e.bounds.center().x)),this.left=new Jt(t.slice(0,e)),this.right=new Jt(t.slice(e))}intersects(t,e){return t.intersectsBox(this.bounds,e)?this.objects.length>0?this.objects.filter((n=>t.intersectsBox(n.bounds,e))):[...this.left?this.left.intersects(t,e):[],...this.right?this.right.intersects(t,e):[]]:[]}}class Ct{constructor(t,e){this.origin=t,this.direction=e.normalize()}getPoint(t){return this.origin.add(this.direction.multiply(t))}intersectsBox(t,e=1/0){let n=(t.min.x-this.origin.x)/this.direction.x,l=(t.max.x-this.origin.x)/this.direction.x;n>l&&([n,l]=[l,n]);let i=(t.min.y-this.origin.y)/this.direction.y,F=(t.max.y-this.origin.y)/this.direction.y;if(i>F&&([i,F]=[F,i]),n>F||i>l)return!1;i>n&&(n=i),F<l&&(l=F);let s=(t.min.z-this.origin.z)/this.direction.z,U=(t.max.z-this.origin.z)/this.direction.z;return s>U&&([s,U]=[U,s]),!(n>U||s>l)&&(s>n&&(n=s),U<l&&(l=U),n<e&&l>0)}}class ut{constructor(t){this._camera=t,this._cameraData=this._camera.data,this._frustumCorners=[]}calculateFrustum(){const e=this._cameraData.near,n=this._cameraData.far,l=this._cameraData.fx,i=this._cameraData.fy,F=Math.tan(i/2)*e,s=Math.tan(l/2)*e,U=Math.tan(i/2)*n,a=Math.tan(l/2)*n,d=new t(-s,F,-e),r=new t(s,F,-e),Q=new t(-s,-F,-e),o=new t(s,-F,-e),A=new t(-a,U,n),c=new t(a,U,n),B=new t(-a,-U,n),h=new t(a,-U,n);return this._frustumCorners.push(this.cameraToWorldCoords(d),this.cameraToWorldCoords(r),this.cameraToWorldCoords(Q),this.cameraToWorldCoords(o),this.cameraToWorldCoords(A),this.cameraToWorldCoords(c),this.cameraToWorldCoords(B),this.cameraToWorldCoords(h)),this._frustumCorners}cameraToWorldCoords(e){const n=new q(e.x,e.y,e.z,1),l=this._cameraData.viewMatrix.invert(),i=n.multiply(l);return new t(i.x/i.w,i.y/i.w,i.z/i.w)}pointInFrustum(t){const e=[this.createPlane(this._frustumCorners[0],this._frustumCorners[1],this._frustumCorners[2]),this.createPlane(this._frustumCorners[4],this._frustumCorners[5],this._frustumCorners[6]),this.createPlane(this._frustumCorners[0],this._frustumCorners[2],this._frustumCorners[4]),this.createPlane(this._frustumCorners[1],this._frustumCorners[3],this._frustumCorners[5]),this.createPlane(this._frustumCorners[0],this._frustumCorners[1],this._frustumCorners[4]),this.createPlane(this._frustumCorners[2],this._frustumCorners[3],this._frustumCorners[6])];return e[0].distanceToPoint(t)<=0&&e[1].distanceToPoint(t)>=0&&e[2].distanceToPoint(t)<=0&&e[3].distanceToPoint(t)>=0&&e[4].distanceToPoint(t)>=0&&e[5].distanceToPoint(t)<=0}createPlane(t,e,n){const l=e.subtract(t),i=n.subtract(t),F=l.cross(i).normalize(),s=-F.dot(t);return new pt(F,s)}}class pt{constructor(t,e){this.normal=t,this.d=e}distanceToPoint(t){return this.normal.dot(t)+this.d}}class Nt extends dt{constructor(t,e,n,l=new Float32Array([1,0,0,.2])){2!==n.length&&console.log("Please provide 2 oder 8 corners"),super(t,e);const i=t.gl;let F,s,U,a,d,r,Q;if(2===n.length){const[t,e,l]=n[0],[i,F,s]=n[1];r=new Float32Array([t,e,l,i,e,l,t,e,l,t,F,l,t,e,l,t,e,s,i,e,l,i,F,l,i,e,l,i,e,s,t,F,l,i,F,l,t,F,l,t,F,s,t,e,s,i,e,s,t,e,s,t,F,s,i,F,l,i,F,s,i,e,s,i,F,s,t,F,s,i,F,s]),Q=new Float32Array([t,e,l,i,e,l,t,F,l,i,e,l,i,F,l,t,F,l,t,e,s,i,e,s,t,F,s,i,e,s,i,F,s,t,F,s,t,e,l,t,e,s,t,F,l,t,F,s,t,e,s,t,F,l,i,e,l,i,e,s,i,F,l,i,F,s,i,e,s,i,F,l,t,e,l,i,e,l,t,e,s,i,e,s,i,e,l,t,e,s,t,F,l,i,F,l,t,F,s,i,F,s,i,F,l,t,F,s])}else{const[t,e,l]=n[0],[i,F,s]=n[1],[U,a,d]=n[2],[o,A,c]=n[3],[B,h,V]=n[4],[R,Z,W]=n[5],[m,g,I]=n[6],[b,J,C]=n[7];r=new Float32Array([t,e,l,i,F,s,t,e,l,U,a,d,t,e,l,B,h,V,i,F,s,o,A,c,i,F,s,R,Z,W,U,a,d,o,A,c,U,a,d,m,g,I,B,h,V,R,Z,W,B,h,V,m,g,I,o,A,c,b,J,C,R,Z,W,b,J,C,m,g,I,b,J,C]),Q=new Float32Array([t,e,l,i,F,s,U,a,d,i,F,s,o,A,c,U,a,d,B,h,V,R,Z,W,m,g,I,R,Z,W,b,J,C,m,g,I,t,e,l,B,h,V,U,a,d,m,g,I,B,h,V,U,a,d,i,F,s,R,Z,W,o,A,c,b,J,C,R,Z,W,o,A,c,t,e,l,i,F,s,B,h,V,R,Z,W,i,F,s,B,h,V,U,a,d,o,A,c,m,g,I,b,J,C,o,A,c,m,g,I])}const o=new Float32Array([0,0,0,1]);this._initialize=()=>{F=i.createBuffer(),s=i.getAttribLocation(this.program,"position"),i.enableVertexAttribArray(s),U=i.getUniformLocation(this.program,"projection"),a=i.getUniformLocation(this.program,"view"),d=i.getUniformLocation(this.program,"cubeColor")};this._render=()=>{if(!this._camera)throw new Error("Camera not set");i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA),i.uniformMatrix4fv(U,!1,this._camera.data.projectionMatrix.buffer),i.uniformMatrix4fv(a,!1,this._camera.data.viewMatrix.buffer),((t,e)=>{i.lineWidth(5),i.uniform4fv(d,e),i.bindBuffer(i.ARRAY_BUFFER,F),i.bufferData(i.ARRAY_BUFFER,t,i.STATIC_DRAW),i.vertexAttribPointer(s,3,i.FLOAT,!1,0,0),i.drawArrays(i.LINES,0,24)})(r,o),((t,e)=>{i.lineWidth(5),i.uniform4fv(d,e),i.bindBuffer(i.ARRAY_BUFFER,F),i.bufferData(i.ARRAY_BUFFER,t,i.STATIC_DRAW),i.vertexAttribPointer(s,3,i.FLOAT,!1,0,0),i.drawArrays(i.TRIANGLES,0,36)})(Q,l)},this._resize=()=>{},this._dispose=()=>{}}_getFragmentSource(){return"#version 300 es\nprecision mediump float;\nuniform vec4 cubeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = cubeColor;\n}\n"}_getVertexSource(){return"#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n"}}class Et{static draw(t,e,n){let l=new Float32Array([e.x+n/2,e.y+n/2,e.z+n/2]),i=new Float32Array([e.x-n/2,e.y-n/2,e.z-n/2]);var F=new Nt(t,[],[l,i]);t.addProgram(F)}static drawCone(t,e){let n=[];for(let t=0;t<e.length;t++)n.push(new Float32Array([e[t].x,e[t].y,e[t].z]));var l=new Nt(t,[],n);t.addProgram(l)}}class yt{constructor(e,n){let l=[];if(this.renderer=e,this.renderProgram=e.renderProgram,n){const t=this.renderProgram.renderData;for(const e of t.singleOffsets.keys())e.bounds,l.push(e);this.bvh=new Jt(l)}this.testBox=(e,n)=>{const i=this.renderProgram.renderData;if(void 0===i)return null;l=[];const[F,s,U]=e,[a,d,r]=n,Q=new t(F,s,U),A=new t(a,d,r),c=new o(A,Q);c.permute();for(const t of i.singleOffsets.keys())c.contains(t.bounds.center())&&l.push(t);return l},this.testCameraViewFrustum=(t,n=!1,i=-1)=>{this.renderer.removeAllPrograms();const F=this.renderProgram.renderData;let s=new ut(t),U=s.calculateFrustum();l=[],n&&(Et.drawCone(this.renderer,U),i>0&&setTimeout((function(){e.removeAllPrograms()}),1e3*i));for(const t of F.singleOffsets.keys())s.pointInFrustum(t.bounds.center())&&l.push(t);return l}}testPointSingleSplats(t,e,n,l){if(void 0===this.bvh)return null;if(!n)return console.error("Camera is not initialized"),null;const i=new Ct(n.position,n.screenPointToRay(t,e));return this.bvh.intersects(i,l)}}class Gt extends dt{constructor(t,e){super(t,e);const n=t.gl;let l,i,F,s,U;const a=new Float32Array([-50,0,0,50,0,0]),d=new Float32Array([0,-50,0,0,50,0]),r=new Float32Array([0,0,-50,0,0,50]),Q=new Float32Array([1,0,0,.5]),o=new Float32Array([0,1,0,.5]),A=new Float32Array([0,.5,1,.5]);this._initialize=()=>{l=n.createBuffer(),i=n.getAttribLocation(this.program,"position"),n.enableVertexAttribArray(i),F=n.getUniformLocation(this.program,"projection"),s=n.getUniformLocation(this.program,"view"),U=n.getUniformLocation(this.program,"axisColor")};const c=(t,e)=>{n.uniform4fv(U,e),n.bindBuffer(n.ARRAY_BUFFER,l),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW),n.vertexAttribPointer(i,3,n.FLOAT,!1,0,0),n.drawArrays(n.LINES,0,2)};this._resize=()=>{},this._render=()=>{if(!this._camera)throw new Error("Camera not set");n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),n.uniformMatrix4fv(F,!1,this._camera.data.projectionMatrix.buffer),n.uniformMatrix4fv(s,!1,this._camera.data.viewMatrix.buffer),c(a,Q),c(d,o),c(r,A)},this._dispose=()=>{}}_getVertexSource(){return"#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision mediump float;\nuniform vec4 axisColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = axisColor;\n}\n"}}class St extends dt{constructor(t,e,n,l,i=new Float32Array([1,0,0,.2])){super(t,e);const F=t.gl;let s,U,a,d,r,Q=[],o=[],A=n.length;for(var c=0;c<A;c++){const[t,e,i]=n[c],[F,s,U]=l[c],a=new Float32Array([t,e,i,F,e,i,t,e,i,t,s,i,t,e,i,t,e,U,F,e,i,F,s,i,F,e,i,F,e,U,t,s,i,F,s,i,t,s,i,t,s,U,t,e,U,F,e,U,t,e,U,t,s,U,F,s,i,F,s,U,F,e,U,F,s,U,t,s,U,F,s,U]);Q.push(...a);const d=new Float32Array([t,e,i,F,e,i,t,s,i,F,e,i,F,s,i,t,s,i,t,e,U,F,e,U,t,s,U,F,e,U,F,s,U,t,s,U,t,e,i,t,e,U,t,s,i,t,s,U,t,e,U,t,s,i,F,e,i,F,e,U,F,s,i,F,s,U,F,e,U,F,s,i,t,e,i,F,e,i,t,e,U,F,e,U,F,e,i,t,e,U,t,s,i,F,s,i,t,s,U,F,s,U,F,s,i,t,s,U]);o.push(...d)}let B=new Float32Array(Q),h=new Float32Array(o);const V=new Float32Array([0,0,0,1]);this._initialize=()=>{s=F.createBuffer(),U=F.getAttribLocation(this.program,"position"),F.enableVertexAttribArray(U),a=F.getUniformLocation(this.program,"projection"),d=F.getUniformLocation(this.program,"view"),r=F.getUniformLocation(this.program,"cubeColor")};this._render=()=>{if(!this._camera)throw new Error("Camera not set");F.enable(F.BLEND),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),F.uniformMatrix4fv(a,!1,this._camera.data.projectionMatrix.buffer),F.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),((t,e)=>{F.lineWidth(5),F.uniform4fv(r,e),F.bindBuffer(F.ARRAY_BUFFER,s),F.bufferData(F.ARRAY_BUFFER,t,F.STATIC_DRAW),F.vertexAttribPointer(U,3,F.FLOAT,!1,0,0),F.drawArrays(F.LINES,0,24*A)})(B,V),((t,e)=>{F.lineWidth(5),F.uniform4fv(r,e),F.bindBuffer(F.ARRAY_BUFFER,s),F.bufferData(F.ARRAY_BUFFER,t,F.STATIC_DRAW),F.vertexAttribPointer(U,3,F.FLOAT,!1,0,0),F.drawArrays(F.TRIANGLES,0,36*A)})(h,i)},this._resize=()=>{},this._dispose=()=>{}}_getFragmentSource(){return"#version 300 es\nprecision mediump float;\nuniform vec4 cubeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = cubeColor;\n}\n"}_getVertexSource(){return"#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n"}}class Xt extends dt{constructor(t,e,n,l=0,i=new Float32Array([1,0,0,1])){super(t,e);const F=t.gl;let s,U,a,d,r,Q=[];const o=(null==n?void 0:n.findNodesByLevel(l))||[];for(let t=0;t<o.length;t++){const[e,n,l]=[o[t].min.x,o[t].min.y,o[t].min.z],[i,F,s]=[o[t].max.x,o[t].max.y,o[t].max.z],U=new Float32Array([e,n,l,i,n,l,e,n,l,e,F,l,e,n,l,e,n,s,i,n,l,i,F,l,i,n,l,i,n,s,e,F,l,i,F,l,e,F,l,e,F,s,e,n,s,i,n,s,e,n,s,e,F,s,i,F,l,i,F,s,i,n,s,i,F,s,e,F,s,i,F,s]);Q.push(...U)}let A=new Float32Array(Q);const c=i;this._initialize=()=>{s=F.createBuffer(),U=F.getAttribLocation(this.program,"position"),F.enableVertexAttribArray(U),a=F.getUniformLocation(this.program,"projection"),d=F.getUniformLocation(this.program,"view"),r=F.getUniformLocation(this.program,"cubeColor")};this._render=()=>{if(!this._camera)throw new Error("Camera not set");F.enable(F.BLEND),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),F.uniformMatrix4fv(a,!1,this._camera.data.projectionMatrix.buffer),F.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),((t,e)=>{F.lineWidth(100),F.uniform4fv(r,e),F.bindBuffer(F.ARRAY_BUFFER,s),F.bufferData(F.ARRAY_BUFFER,t,F.STATIC_DRAW),F.vertexAttribPointer(U,3,F.FLOAT,!1,0,0),F.drawArrays(F.LINES,0,24*o.length)})(A,c)},this._resize=()=>{},this._dispose=()=>{}}_getFragmentSource(){return"#version 300 es\nprecision mediump float;\nuniform vec4 cubeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = cubeColor;\n}\n"}_getVertexSource(){return"#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n"}}const Yt=new t;function Tt(e,n,l){const i=e.normal,F=n.normal,s=l.normal,U=i.dot(F.cross(s));if(Math.abs(U)<1e-6)return null;const a=e.constant,d=n.constant,r=l.constant,Q=F.cross(s).multiply(-a),o=s.cross(i).multiply(-d),A=i.cross(F).multiply(-r);return(new t).addVectors(Q,o).add(A).divide(U)}class kt{constructor(t=new Zt,e=new Zt,n=new Zt,l=new Zt,i=new Zt,F=new Zt){this.planes=[t,e,n,l,i,F]}setFromProjectionMatrix(t){const e=this.planes,n=t.buffer,l=n[0],i=n[1],F=n[2],s=n[3],U=n[4],a=n[5],d=n[6],r=n[7],Q=n[8],o=n[9],A=n[10],c=n[11],B=n[12],h=n[13],V=n[14],R=n[15];e[0].setComponents(s-l,r-U,c-Q,R-B).normalize(),e[1].setComponents(s+l,r+U,c+Q,R+B).normalize(),e[2].setComponents(s+i,r+a,c+o,R+h).normalize(),e[3].setComponents(s-i,r-a,c-o,R-h).normalize(),e[4].setComponents(s-F,r-d,c-A,R-V).normalize(),e[5].setComponents(s+F,r+d,c+A,R+V).normalize()}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const l=e[n];if(Yt.x=l.normal.x>0?t.max.x:t.min.x,Yt.y=l.normal.y>0?t.max.y:t.min.y,Yt.z=l.normal.z>0?t.max.z:t.min.z,l.distanceToPoint(Yt)<0)return!1}return!0}getFrustumPoints(){const t=this.planes,e=[];return e.push(Tt(t[0],t[2],t[4])),e.push(Tt(t[1],t[2],t[4])),e.push(Tt(t[0],t[3],t[4])),e.push(Tt(t[1],t[3],t[4])),e.push(Tt(t[0],t[3],t[5])),e.push(Tt(t[1],t[3],t[5])),e.push(Tt(t[0],t[2],t[5])),e.push(Tt(t[1],t[2],t[5])),e}}export{Gt as AxisProgram,o as Box3,$ as Camera,L as CameraData,At as Color32,B as Constants,Nt as CubeVisualisationProgram,Rt as FPSControls,Bt as FadeInPass,kt as Frustum,bt as IntersectionTester,lt as Loader,A as Matrix3,l as Matrix4,St as MultibleCubesProgram,a as Object3D,Xt as OctreeHelper,V as OctreeIterator,Vt as OrbitControls,it as PLYLoader,Zt as Plane,H as PointOctant,_ as PointOctree,e as Quaternion,yt as Raycaster,ot as RenderData,ct as RenderProgram,tt as Scene,Wt as ShaderPass,dt as ShaderProgram,c as SingleSplat,O as Splat,d as SplatData,P as Splatv,r as SplatvData,Ft as SplatvLoader,t as Vector3,q as Vector4,mt as VideoRenderProgram,ht as WebGLRenderer};
//# sourceMappingURL=index.js.map
