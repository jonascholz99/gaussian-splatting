{"version":3,"file":"index.js","sources":["../src/math/Vector3.ts","../src/math/Quaternion.ts","../src/events/EventDispatcher.ts","../src/math/Matrix4.ts","../src/events/Events.ts","../src/core/Object3D.ts","../src/splats/SplatData.ts","../src/splats/SplatvData.ts","../src/utils/Converter.ts","../src/renderers/webgl/programs/ShaderProgram.ts","../src/renderers/webgl/programs/individual/CubeVisualisationProgram.ts","../src/math/Box3.ts","../src/math/Matrix3.ts","../src/splats/SingleSplat.ts","../src/utils/Constants.ts","../src/Octree/core/OctreeIterator.ts","../src/math/NewRay.ts","../src/Octree/core/intersectOctree.ts","../src/Octree/core/OctreeRaycaster.ts","../src/Octree/core/RaycastingFlags.ts","../src/Octree/Octree.ts","../src/Octree/core/layout.ts","../src/Octree/core/Octant.ts","../src/Octree/points/PointContainer.ts","../src/Octree/points/RayPointIntersection.ts","../src/Octree/points/PointData.ts","../src/Octree/points/PointOctant.ts","../src/Octree/points/PointOctree.ts","../src/splats/Splat.ts","../src/splats/Splatv.ts","../src/cameras/CameraData.ts","../src/math/Vector4.ts","../src/cameras/Camera.ts","../src/core/Scene.ts","../src/utils/LoaderUtils.ts","../src/loaders/Loader.ts","../src/loaders/PLYLoader.ts","../src/loaders/SplatvLoader.ts","../src/wasm/data.js","../src/renderers/webgl/utils/RenderData.ts","../src/math/Color32.ts","../src/renderers/webgl/programs/RenderProgram.ts","../src/renderers/webgl/passes/FadeInPass.ts","../src/renderers/WebGLRenderer.ts","../src/controls/OrbitControls.ts","../src/controls/FPSControls.ts","../src/math/Plane.ts","../src/renderers/webgl/passes/ShaderPass.ts","../src/renderers/webgl/programs/VideoRenderProgram.ts","../src/math/BVH.ts","../src/renderers/webgl/utils/IntersectionTester.ts","../src/math/BVHNode.ts","../src/math/Ray.ts","../src/cameras/CameraHelper.ts","../src/utils/Utils.ts","../src/renderers/webgl/utils/Raycaster.ts","../src/renderers/webgl/programs/individual/AxisProgram.ts","../src/renderers/webgl/programs/individual/GridProgram.ts","../src/renderers/webgl/programs/individual/PlaneProgram.ts","../src/renderers/webgl/programs/individual/MultibleCubesProgram.ts","../src/renderers/webgl/programs/individual/RayProgram.ts","../src/Octree/OctreeHelper.ts","../src/math/Frustum.ts","../src/utils/Raycaster.ts"],"sourcesContent":["import { Matrix4 } from \"./Matrix4\";\n\nclass Vector3 {\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    set( x: number, y: number, z: number ) {\n\n        if ( z === undefined ) z = this.z;\n\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    equals(v: Vector3): boolean {\n        if (this.x !== v.x) {\n            return false;\n        }\n        if (this.y !== v.y) {\n            return false;\n        }\n        if (this.z !== v.z) {\n            return false;\n        }\n\n        return true;\n    }\n\n    addVectors(a:Vector3, b:Vector3) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n        \n        return this;\n    }\n    \n    add(v: number): Vector3;\n    add(v: Vector3): Vector3;\n    add(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x + v, this.y + v, this.z + v);\n        } else {\n            return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n        }\n    }\n\n    addScaledVector( v:Vector3, s: number ) {\n\n        this.x += v.x * s;\n        this.y += v.y * s;\n        this.z += v.z * s;\n\n        return this;\n\n    }\n\n    subVectors(a:Vector3, b:Vector3) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n\n        return this;\n    }\n    subtract(v: number): Vector3;\n    subtract(v: Vector3): Vector3;\n    subtract(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x - v, this.y - v, this.z - v);\n        } else {\n            return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n        }\n    }\n\n    sub( v: Vector3 ) {\n\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n\n        return this;\n\n    }\n\n    multiply(v: number): Vector3;\n    multiply(v: Vector3): Vector3;\n    multiply(v: Matrix4): Vector3;\n    multiply(v: number | Vector3 | Matrix4): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x * v, this.y * v, this.z * v);\n        } else if (v instanceof Vector3) {\n            return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\n        } else {\n            return new Vector3(\n                this.x * v.buffer[0] + this.y * v.buffer[4] + this.z * v.buffer[8] + v.buffer[12],\n                this.x * v.buffer[1] + this.y * v.buffer[5] + this.z * v.buffer[9] + v.buffer[13],\n                this.x * v.buffer[2] + this.y * v.buffer[6] + this.z * v.buffer[10] + v.buffer[14],\n            );\n        }\n    }\n\n    divide(v: number): Vector3;\n    divide(v: Vector3): Vector3;\n    divide(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x / v, this.y / v, this.z / v);\n        } else {\n            return new Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\n        }\n    }\n\n    crossVectors(a: Vector3, b: Vector3): this {\n        const ax = a.x, ay = a.y, az = a.z;\n        const bx = b.x, by = b.y, bz = b.z;\n\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n\n        return this;\n    }\n    \n    cross(v: Vector3): Vector3 {\n        const x = this.y * v.z - this.z * v.y;\n        const y = this.z * v.x - this.x * v.z;\n        const z = this.x * v.y - this.y * v.x;\n\n        return new Vector3(x, y, z);\n    }\n\n    distanceToSquared( v:Vector3 ) {\n\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n        return dx * dx + dy * dy + dz * dz;\n\n    }\n\n    toArray(): number[] {\n        return [this.x, this.y, this.z];\n    }\n    \n    \n    dot(v: Vector3): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    lerp(v: Vector3, t: number): Vector3 {\n        return new Vector3(this.x + (v.x - this.x) * t, this.y + (v.y - this.y) * t, this.z + (v.z - this.z) * t);\n    }\n\n    min(v: Vector3): Vector3 {\n        return new Vector3(Math.min(this.x, v.x), Math.min(this.y, v.y), Math.min(this.z, v.z));\n    }\n\n    max(v: Vector3): Vector3 {\n        return new Vector3(Math.max(this.x, v.x), Math.max(this.y, v.y), Math.max(this.z, v.z));\n    }\n\n    getComponent(axis: number) {\n        switch (axis) {\n            case 0:\n                return this.x;\n            case 1:\n                return this.y;\n            case 2:\n                return this.z;\n            default:\n                throw new Error(`Invalid component index: ${axis}`);\n        }\n    }\n\n    minComponent(): number {\n        if (this.x < this.y && this.x < this.z) {\n            return 0;\n        } else if (this.y < this.z) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    maxComponent(): number {\n        if (this.x > this.y && this.x > this.z) {\n            return 0;\n        } else if (this.y > this.z) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    distanceTo(v: Vector3): number {\n        return Math.sqrt((this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2);\n    }\n\n    normalize(): Vector3 {\n        const length = this.magnitude();\n\n        return new Vector3(this.x / length, this.y / length, this.z / length);\n    }\n\n    lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z];\n    }\n\n    clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    clamp( min:Vector3, max:Vector3 ) {\n\n        // assumes min < max, componentwise\n\n        this.x = Math.max( min.x, Math.min( max.x, this.x ) );\n        this.y = Math.max( min.y, Math.min( max.y, this.y ) );\n        this.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n        return this;\n\n    }\n    \n    copy( v: Vector3 ) {\n\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n\n        return this;\n\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n\n    static One(value: number = 1): Vector3 {\n        return new Vector3(value, value, value);\n    }\n}\n\nexport { Vector3 };\n","import { Matrix3 } from \"./Matrix3\";\nimport { Vector3 } from \"./Vector3\";\n\nclass Quaternion {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n    public readonly w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    equals(q: Quaternion): boolean {\n        if (this.x !== q.x) {\n            return false;\n        }\n        if (this.y !== q.y) {\n            return false;\n        }\n        if (this.z !== q.z) {\n            return false;\n        }\n        if (this.w !== q.w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    normalize(): Quaternion {\n        const l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        return new Quaternion(this.x / l, this.y / l, this.z / l, this.w / l);\n    }\n\n    multiply(q: Quaternion): Quaternion {\n        const w1 = this.w,\n            x1 = this.x,\n            y1 = this.y,\n            z1 = this.z;\n        const w2 = q.w,\n            x2 = q.x,\n            y2 = q.y,\n            z2 = q.z;\n\n        return new Quaternion(\n            w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,\n            w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2,\n            w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2,\n            w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,\n        );\n    }\n\n    inverse(): Quaternion {\n        const l = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n        return new Quaternion(-this.x / l, -this.y / l, -this.z / l, this.w / l);\n    }\n\n    apply(v: Vector3): Vector3 {\n        const vecQuat = new Quaternion(v.x, v.y, v.z, 0);\n        const conjugate = new Quaternion(-this.x, -this.y, -this.z, this.w);\n        const rotatedQuat = this.multiply(vecQuat).multiply(conjugate);\n        return new Vector3(rotatedQuat.x, rotatedQuat.y, rotatedQuat.z);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z, this.w];\n    }\n\n    clone(): Quaternion {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    static FromEuler(e: Vector3): Quaternion {\n        const halfX = e.x / 2;\n        const halfY = e.y / 2;\n        const halfZ = e.z / 2;\n        const cy = Math.cos(halfY);\n        const sy = Math.sin(halfY);\n        const cp = Math.cos(halfX);\n        const sp = Math.sin(halfX);\n        const cz = Math.cos(halfZ);\n        const sz = Math.sin(halfZ);\n\n        const q = new Quaternion(\n            cy * sp * cz + sy * cp * sz,\n            sy * cp * cz - cy * sp * sz,\n            cy * cp * sz - sy * sp * cz,\n            cy * cp * cz + sy * sp * sz,\n        );\n        return q;\n    }\n\n    toEuler(): Vector3 {\n        const sinr_cosp = 2 * (this.w * this.x + this.y * this.z);\n        const cosr_cosp = 1 - 2 * (this.x * this.x + this.y * this.y);\n        const x = Math.atan2(sinr_cosp, cosr_cosp);\n\n        let y;\n        const sinp = 2 * (this.w * this.y - this.z * this.x);\n        if (Math.abs(sinp) >= 1) {\n            y = (Math.sign(sinp) * Math.PI) / 2;\n        } else {\n            y = Math.asin(sinp);\n        }\n\n        const siny_cosp = 2 * (this.w * this.z + this.x * this.y);\n        const cosy_cosp = 1 - 2 * (this.y * this.y + this.z * this.z);\n        const z = Math.atan2(siny_cosp, cosy_cosp);\n\n        return new Vector3(x, y, z);\n    }\n\n    static FromMatrix3(matrix: Matrix3): Quaternion {\n        const m = matrix.buffer;\n        const trace = m[0] + m[4] + m[8];\n        let x, y, z, w;\n        if (trace > 0) {\n            const s = 0.5 / Math.sqrt(trace + 1.0);\n            w = 0.25 / s;\n            x = (m[7] - m[5]) * s;\n            y = (m[2] - m[6]) * s;\n            z = (m[3] - m[1]) * s;\n        } else if (m[0] > m[4] && m[0] > m[8]) {\n            const s = 2.0 * Math.sqrt(1.0 + m[0] - m[4] - m[8]);\n            w = (m[7] - m[5]) / s;\n            x = 0.25 * s;\n            y = (m[1] + m[3]) / s;\n            z = (m[2] + m[6]) / s;\n        } else if (m[4] > m[8]) {\n            const s = 2.0 * Math.sqrt(1.0 + m[4] - m[0] - m[8]);\n            w = (m[2] - m[6]) / s;\n            x = (m[1] + m[3]) / s;\n            y = 0.25 * s;\n            z = (m[5] + m[7]) / s;\n        } else {\n            const s = 2.0 * Math.sqrt(1.0 + m[8] - m[0] - m[4]);\n            w = (m[3] - m[1]) / s;\n            x = (m[2] + m[6]) / s;\n            y = (m[5] + m[7]) / s;\n            z = 0.25 * s;\n        }\n        return new Quaternion(x, y, z, w);\n    }\n\n    static FromAxisAngle(axis: Vector3, angle: number): Quaternion {\n        const halfAngle = angle / 2;\n        const sin = Math.sin(halfAngle);\n        const cos = Math.cos(halfAngle);\n        return new Quaternion(axis.x * sin, axis.y * sin, axis.z * sin, cos);\n    }\n\n    static LookRotation(direction: Vector3): Quaternion {\n        const forward = new Vector3(0, 0, 1);\n        const dot = forward.dot(direction);\n\n        if (Math.abs(dot - -1.0) < 0.000001) {\n            return new Quaternion(0, 1, 0, Math.PI);\n        }\n        if (Math.abs(dot - 1.0) < 0.000001) {\n            return new Quaternion();\n        }\n\n        const rotAngle = Math.acos(dot);\n        const rotAxis = forward.cross(direction).normalize();\n        return Quaternion.FromAxisAngle(rotAxis, rotAngle);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Quaternion };\n","class EventDispatcher {\n    addEventListener: (type: string, listener: (event: Event) => void) => void;\n    removeEventListener: (type: string, listener: (event: Event) => void) => void;\n    hasEventListener: (type: string, listener: (event: Event) => void) => boolean;\n    dispatchEvent: (event: Event) => void;\n\n    constructor() {\n        const listeners = new Map<string, Set<(event: Event) => void>>();\n\n        this.addEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                listeners.set(type, new Set());\n            }\n\n            listeners.get(type)!.add(listener);\n        };\n\n        this.removeEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                return;\n            }\n\n            listeners.get(type)!.delete(listener);\n        };\n\n        this.hasEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                return false;\n            }\n\n            return listeners.get(type)!.has(listener);\n        };\n\n        this.dispatchEvent = (event: Event) => {\n            if (!listeners.has(event.type)) {\n                return;\n            }\n\n            for (const listener of listeners.get(event.type)!) {\n                listener(event);\n            }\n        };\n    }\n}\n\nexport { EventDispatcher };\n","import { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\nclass Matrix4 {\n    public readonly buffer: number[];\n\n    // prettier-ignore\n    constructor(n11: number = 1, n12: number = 0, n13: number = 0, n14: number = 0, \n                n21: number = 0, n22: number = 1, n23: number = 0, n24: number = 0, \n                n31: number = 0, n32: number = 0, n33: number = 1, n34: number = 0, \n                n41: number = 0, n42: number = 0, n43: number = 0, n44: number = 1) {\n        this.buffer = [\n            n11, n12, n13, n14, \n            n21, n22, n23, n24, \n            n31, n32, n33, n34, \n            n41, n42, n43, n44\n        ];\n    }\n\n    equals(m: Matrix4): boolean {\n        if (this.buffer.length !== m.buffer.length) {\n            return false;\n        }\n        if (this.buffer === m.buffer) {\n            return true;\n        }\n        for (let i = 0; i < this.buffer.length; i++) {\n            if (this.buffer[i] !== m.buffer[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    multiply(m: Matrix4): Matrix4 {\n        const a = this.buffer;\n        const b = m.buffer;\n        return new Matrix4(\n            b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12],\n            b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13],\n            b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14],\n            b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15],\n            b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12],\n            b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13],\n            b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14],\n            b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15],\n            b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12],\n            b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13],\n            b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14],\n            b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15],\n            b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12],\n            b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13],\n            b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14],\n            b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15],\n        );\n    }\n\n    clone(): Matrix4 {\n        const e = this.buffer;\n        // prettier-ignore\n        return new Matrix4(\n            e[0], e[1], e[2], e[3], \n            e[4], e[5], e[6], e[7], \n            e[8], e[9], e[10], e[11], \n            e[12], e[13], e[14], e[15]\n        );\n    }\n\n    determinant(): number {\n        const e = this.buffer;\n        // prettier-ignore\n        return (\n            e[12] * e[9] * e[6] * e[3] - e[8] * e[13] * e[6] * e[3] - e[12] * e[5] * e[10] * e[3] + e[4] * e[13] * e[10] * e[3] +\n            e[8] * e[5] * e[14] * e[3] - e[4] * e[9] * e[14] * e[3] - e[12] * e[9] * e[2] * e[7] + e[8] * e[13] * e[2] * e[7] +\n            e[12] * e[1] * e[10] * e[7] - e[0] * e[13] * e[10] * e[7] - e[8] * e[1] * e[14] * e[7] + e[0] * e[9] * e[14] * e[7] +\n            e[12] * e[5] * e[2] * e[11] - e[4] * e[13] * e[2] * e[11] - e[12] * e[1] * e[6] * e[11] + e[0] * e[13] * e[6] * e[11] +\n            e[4] * e[1] * e[14] * e[11] - e[0] * e[5] * e[14] * e[11] - e[8] * e[5] * e[2] * e[15] + e[4] * e[9] * e[2] * e[15] +\n            e[8] * e[1] * e[6] * e[15] - e[0] * e[9] * e[6] * e[15] - e[4] * e[1] * e[10] * e[15] + e[0] * e[5] * e[10] * e[15]\n        );\n    }\n\n    invert(): Matrix4 {\n        const e = this.buffer;\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible.\");\n        }\n        const invDet = 1 / det;\n        // prettier-ignore\n        return new Matrix4(\n            invDet * (\n                e[5] * e[10] * e[15] - e[5] * e[11] * e[14] - e[9] * e[6] * e[15] + e[9] * e[7] * e[14] + e[13] * e[6] * e[11] - e[13] * e[7] * e[10]\n            ),\n            invDet * (\n                -e[1] * e[10] * e[15] + e[1] * e[11] * e[14] + e[9] * e[2] * e[15] - e[9] * e[3] * e[14] - e[13] * e[2] * e[11] + e[13] * e[3] * e[10]\n            ),\n            invDet * (\n                e[1] * e[6] * e[15] - e[1] * e[7] * e[14] - e[5] * e[2] * e[15] + e[5] * e[3] * e[14] + e[13] * e[2] * e[7] - e[13] * e[3] * e[6]\n            ),\n            invDet * (\n                -e[1] * e[6] * e[11] + e[1] * e[7] * e[10] + e[5] * e[2] * e[11] - e[5] * e[3] * e[10] - e[9] * e[2] * e[7] + e[9] * e[3] * e[6]\n            ),\n            invDet * (\n                -e[4] * e[10] * e[15] + e[4] * e[11] * e[14] + e[8] * e[6] * e[15] - e[8] * e[7] * e[14] - e[12] * e[6] * e[11] + e[12] * e[7] * e[10]\n            ),\n            invDet * (\n                e[0] * e[10] * e[15] - e[0] * e[11] * e[14] - e[8] * e[2] * e[15] + e[8] * e[3] * e[14] + e[12] * e[2] * e[11] - e[12] * e[3] * e[10]\n            ),\n            invDet * (\n                -e[0] * e[6] * e[15] + e[0] * e[7] * e[14] + e[4] * e[2] * e[15] - e[4] * e[3] * e[14] - e[12] * e[2] * e[7] + e[12] * e[3] * e[6]\n            ),\n            invDet * (\n                e[0] * e[6] * e[11] - e[0] * e[7] * e[10] - e[4] * e[2] * e[11] + e[4] * e[3] * e[10] + e[8] * e[2] * e[7] - e[8] * e[3] * e[6]\n            ),\n            invDet * (\n                e[4] * e[9] * e[15] - e[4] * e[11] * e[13] - e[8] * e[5] * e[15] + e[8] * e[7] * e[13] + e[12] * e[5] * e[11] - e[12] * e[7] * e[9]\n            ),\n            invDet * (\n                -e[0] * e[9] * e[15] + e[0] * e[11] * e[13] + e[8] * e[1] * e[15] - e[8] * e[3] * e[13] - e[12] * e[1] * e[11] + e[12] * e[3] * e[9]\n            ),\n            invDet * (\n                e[0] * e[5] * e[15] - e[0] * e[7] * e[13] - e[4] * e[1] * e[15] + e[4] * e[3] * e[13] + e[12] * e[1] * e[7] - e[12] * e[3] * e[5]\n            ),\n            invDet * (\n                -e[0] * e[5] * e[11] + e[0] * e[7] * e[9] + e[4] * e[1] * e[11] - e[4] * e[3] * e[9] - e[8] * e[1] * e[7] + e[8] * e[3] * e[5]\n            ),\n            invDet * (\n                -e[4] * e[9] * e[14] + e[4] * e[10] * e[13] + e[8] * e[5] * e[14] - e[8] * e[6] * e[13] - e[12] * e[5] * e[10] + e[12] * e[6] * e[9]\n            ),\n            invDet * (\n                e[0] * e[9] * e[14] - e[0] * e[10] * e[13] - e[8] * e[1] * e[14] + e[8] * e[2] * e[13] + e[12] * e[1] * e[10] - e[12] * e[2] * e[9]\n            ),\n            invDet * (\n                -e[0] * e[5] * e[14] + e[0] * e[6] * e[13] + e[4] * e[1] * e[14] - e[4] * e[2] * e[13] - e[12] * e[1] * e[6] + e[12] * e[2] * e[5]\n            ),\n            invDet * (\n                e[0] * e[5] * e[10] - e[0] * e[6] * e[9] - e[4] * e[1] * e[10] + e[4] * e[2] * e[9] + e[8] * e[1] * e[6] - e[8] * e[2] * e[5]\n            ),\n        );\n    }\n\n    static Compose(position: Vector3, rotation: Quaternion, scale: Vector3): Matrix4 {\n        const x = rotation.x,\n            y = rotation.y,\n            z = rotation.z,\n            w = rotation.w;\n        const x2 = x + x,\n            y2 = y + y,\n            z2 = z + z;\n        const xx = x * x2,\n            xy = x * y2,\n            xz = x * z2;\n        const yy = y * y2,\n            yz = y * z2,\n            zz = z * z2;\n        const wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n        const sx = scale.x,\n            sy = scale.y,\n            sz = scale.z;\n        // prettier-ignore\n        return new Matrix4(\n            (1 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n            (xy - wz) * sy, (1 - (xx + zz)) * sy, (yz + wx) * sy, 0,\n            (xz + wy) * sz, (yz - wx) * sz, (1 - (xx + yy)) * sz, 0,\n            position.x, position.y, position.z, 1\n        );\n    }\n\n    toString(): string {\n        return `[${this.buffer.join(\", \")}]`;\n    }\n}\n\nexport { Matrix4 };\n","import { Object3D } from \"../core/Object3D\";\n\nclass ObjectAddedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectAdded\");\n    }\n}\n\nclass ObjectRemovedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectRemoved\");\n    }\n}\n\nclass ObjectChangedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectChanged\");\n    }\n}\n\nclass RenderedSplatsChangedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"renderedSplatsChanged\");\n    }\n}\n\nexport { ObjectAddedEvent, ObjectRemovedEvent, ObjectChangedEvent, RenderedSplatsChangedEvent };\n","import { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { EventDispatcher } from \"../events/EventDispatcher\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport {ObjectChangedEvent, RenderedSplatsChangedEvent} from \"../events/Events\";\n\nabstract class Object3D extends EventDispatcher {\n    public positionChanged: boolean = false;\n    public rotationChanged: boolean = false;\n    public scaleChanged: boolean = false;\n\n    protected _position: Vector3 = new Vector3();\n    protected _rotation: Quaternion = new Quaternion();\n    protected _scale: Vector3 = new Vector3(1, 1, 1);\n    protected _transform: Matrix4 = new Matrix4();\n\n    protected _changeEvent = new ObjectChangedEvent(this);\n    protected _renderedSplatsChanged = new RenderedSplatsChangedEvent(this);\n\n    update: () => void;\n    applyPosition: () => void;\n    applyRotation: () => void;\n    applyScale: () => void;\n    raiseChangeEvent: () => void;\n\n    constructor() {\n        super();\n\n        this.update = () => {};\n\n        this.applyPosition = () => {\n            this.position = new Vector3();\n        };\n\n        this.applyRotation = () => {\n            this.rotation = new Quaternion();\n        };\n\n        this.applyScale = () => {\n            this.scale = new Vector3(1, 1, 1);\n        };\n\n        this.raiseChangeEvent = () => {\n            this.dispatchEvent(this._changeEvent);\n        };\n    }\n\n    protected _updateMatrix() {\n        this._transform = Matrix4.Compose(this._position, this._rotation, this._scale);\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    set position(position: Vector3) {\n        if (!this._position.equals(position)) {\n            this._position = position;\n            this.positionChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(rotation: Quaternion) {\n        if (!this._rotation.equals(rotation)) {\n            this._rotation = rotation;\n            this.rotationChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set scale(scale: Vector3) {\n        if (!this._scale.equals(scale)) {\n            this._scale = scale;\n            this.scaleChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get forward() {\n        let forward = new Vector3(0, 0, 1);\n        forward = this.rotation.apply(forward);\n        return forward;\n    }\n\n    get transform() {\n        return this._transform;\n    }\n}\n\nexport { Object3D };\n","import { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport {PointOctree} from \"../Octree/points/PointOctree\";\n\nclass SplatData {\n    static RowLength = 3 * 4 + 3 * 4 + 4 + 4;\n\n    private firstTime = true;\n    \n    public changed = false;\n    public detached = false;\n    \n    private _vertexCount: number;\n    private _renderedSplats: number;\n    private _positions: Float32Array;\n    private _rotations: Float32Array;\n    private _scales: Float32Array;\n    private _colors: Uint8Array;\n    private _selection: Uint8Array;\n    private _rendered: Uint8Array;\n    \n    private _renderedPositions: Float32Array;\n    private _renderedRotations: Float32Array;\n    private _renderedScales: Float32Array;\n    private _renderedColors: Uint8Array;\n    private _renderedSelection: Uint8Array;\n\n    translate: (translation: Vector3) => void;\n    serialize: () => Uint8Array;\n    reattach: (\n        positions: ArrayBufferLike,\n        rotations: ArrayBufferLike,\n        scales: ArrayBufferLike,\n        colors: ArrayBufferLike,\n        selection: ArrayBufferLike,\n        rendered: ArrayBufferLike,\n    ) => void;\n    \n    resetRendering: () => void;\n    \n    constructor(\n        vertexCount: number = 0,\n        positions: Float32Array | null = null,\n        rotations: Float32Array | null = null,\n        scales: Float32Array | null = null,\n        colors: Uint8Array | null = null,\n    ) {\n        this._vertexCount = vertexCount;\n        this._positions = positions || new Float32Array(0);\n        this._renderedPositions = positions || new Float32Array(0);\n        this._rotations = rotations || new Float32Array(0);\n        this._renderedRotations = rotations || new Float32Array(0);\n        this._scales = scales || new Float32Array(0);\n        this._renderedScales = scales || new Float32Array(0);\n        this._colors = colors || new Uint8Array(0);\n        this._renderedColors = colors || new Uint8Array(0);\n        this._selection = new Uint8Array(this.vertexCount);\n        this._renderedSelection = new Uint8Array(this.vertexCount);\n        this._rendered = new Uint8Array(this.vertexCount).fill(1);\n        this._renderedSplats = vertexCount;\n        \n        this.resetRendering = () => {\n            this._rendered = new Uint8Array(this.vertexCount).fill(0);\n            \n        }\n\n        this.translate = (translation: Vector3) => {\n            for (let i = 0; i < this.vertexCount; i++) {\n                this.positions[3 * i + 0] += translation.x;\n                this.positions[3 * i + 1] += translation.y;\n                this.positions[3 * i + 2] += translation.z;\n            }\n\n            this.changed = true;\n        };\n        \n        this.serialize = () => {\n            console.log(\"Serialize\")\n            const data = new Uint8Array(this.vertexCount * SplatData.RowLength);\n\n            const f_buffer = new Float32Array(data.buffer);\n            const u_buffer = new Uint8Array(data.buffer);\n\n            for (let i = 0; i < this.vertexCount; i++) {\n                f_buffer[8 * i + 0] = this.positions[3 * i + 0];\n                f_buffer[8 * i + 1] = this.positions[3 * i + 1];\n                f_buffer[8 * i + 2] = this.positions[3 * i + 2];\n\n                u_buffer[32 * i + 24 + 0] = this.colors[4 * i + 0];\n                u_buffer[32 * i + 24 + 1] = this.colors[4 * i + 1];\n                u_buffer[32 * i + 24 + 2] = this.colors[4 * i + 2];\n                u_buffer[32 * i + 24 + 3] = this.colors[4 * i + 3];\n\n                f_buffer[8 * i + 3 + 0] = this.scales[3 * i + 0];\n                f_buffer[8 * i + 3 + 1] = this.scales[3 * i + 1];\n                f_buffer[8 * i + 3 + 2] = this.scales[3 * i + 2];\n\n                u_buffer[32 * i + 28 + 0] = (this.rotations[4 * i + 0] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 1] = (this.rotations[4 * i + 1] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 2] = (this.rotations[4 * i + 2] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 3] = (this.rotations[4 * i + 3] * 128 + 128) & 0xff;\n            }\n\n            return data;\n        };\n\n        this.reattach = (\n            positions: ArrayBufferLike,\n            rotations: ArrayBufferLike,\n            scales: ArrayBufferLike,\n            colors: ArrayBufferLike,\n            selection: ArrayBufferLike,\n            rendered: ArrayBufferLike,\n        ) => {\n            this._rendered = new Uint8Array(rendered);\n            const receivedSplats = this._rendered.reduce((count, value) => count + (value !== 0 ? 1 : 0), 0);\n\n            console.assert(\n                positions.byteLength === receivedSplats * 3 * 4,\n                `Expected ${receivedSplats * 3 * 4} bytes, got ${positions.byteLength} bytes which are ${positions.byteLength / 3 / 4} splats`,\n            );\n\n            this._renderedPositions = new Float32Array(positions);\n            this._renderedRotations = new Float32Array(rotations);\n            this._renderedScales = new Float32Array(scales);\n            this._renderedColors = new Uint8Array(colors);\n            this._renderedSelection = new Uint8Array(selection);\n\n            let newIndex = 0;\n            for (let i = 0; i < this._rendered.length; i++) {\n                if (this._rendered[i] === 1) {\n                    // Update positions (3 values per position)\n                    this._positions[i * 3] = this._renderedPositions[newIndex * 3];\n                    this._positions[i * 3 + 1] = this._renderedPositions[newIndex * 3 + 1];\n                    this._positions[i * 3 + 2] = this._renderedPositions[newIndex * 3 + 2];\n\n                    // Update rotations (4 values per rotation)\n                    this._rotations[i * 4] = this._renderedRotations[newIndex * 4];\n                    this._rotations[i * 4 + 1] = this._renderedRotations[newIndex * 4 + 1];\n                    this._rotations[i * 4 + 2] = this._renderedRotations[newIndex * 4 + 2];\n                    this._rotations[i * 4 + 3] = this._renderedRotations[newIndex * 4 + 3];\n\n                    // Update scales (3 values per scale)\n                    this._scales[i * 3] = this._renderedScales[newIndex * 3];\n                    this._scales[i * 3 + 1] = this._renderedScales[newIndex * 3 + 1];\n                    this._scales[i * 3 + 2] = this._renderedScales[newIndex * 3 + 2];\n\n                    // Update colors (4 values per color, assuming RGBA)\n                    this._colors[i * 4] = this._renderedColors[newIndex * 4];\n                    this._colors[i * 4 + 1] = this._renderedColors[newIndex * 4 + 1];\n                    this._colors[i * 4 + 2] = this._renderedColors[newIndex * 4 + 2];\n                    this._colors[i * 4 + 3] = this._renderedColors[newIndex * 4 + 3];\n\n                    // Update selection\n                    this._selection[i] = this._renderedSelection[newIndex];\n\n                    newIndex++;\n                }\n            }\n\n            this.detached = false;\n        };\n    }\n    \n\n    static Deserialize(data: Uint8Array): SplatData {\n        const vertexCount = data.length / SplatData.RowLength;\n        const positions = new Float32Array(3 * vertexCount);\n        const rotations = new Float32Array(4 * vertexCount);\n        const scales = new Float32Array(3 * vertexCount);\n        const colors = new Uint8Array(4 * vertexCount);\n\n        const f_buffer = new Float32Array(data.buffer);\n        const u_buffer = new Uint8Array(data.buffer);\n\n        for (let i = 0; i < vertexCount; i++) {\n            positions[3 * i + 0] = f_buffer[8 * i + 0];\n            positions[3 * i + 1] = f_buffer[8 * i + 1];\n            positions[3 * i + 2] = f_buffer[8 * i + 2];\n\n            rotations[4 * i + 0] = (u_buffer[32 * i + 28 + 0] - 128) / 128;\n            rotations[4 * i + 1] = (u_buffer[32 * i + 28 + 1] - 128) / 128;\n            rotations[4 * i + 2] = (u_buffer[32 * i + 28 + 2] - 128) / 128;\n            rotations[4 * i + 3] = (u_buffer[32 * i + 28 + 3] - 128) / 128;\n\n            scales[3 * i + 0] = f_buffer[8 * i + 3 + 0];\n            scales[3 * i + 1] = f_buffer[8 * i + 3 + 1];\n            scales[3 * i + 2] = f_buffer[8 * i + 3 + 2];\n\n            colors[4 * i + 0] = u_buffer[32 * i + 24 + 0];\n            colors[4 * i + 1] = u_buffer[32 * i + 24 + 1];\n            colors[4 * i + 2] = u_buffer[32 * i + 24 + 2];\n            colors[4 * i + 3] = u_buffer[32 * i + 24 + 3];\n        }\n        \n        return new SplatData(vertexCount, positions, rotations, scales, colors);\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n    \n    get renderedSplats() {\n        return this._renderedSplats;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n    \n    get renderedPositions() {\n        return this._renderedPositions;\n    }\n\n    get rotations() {\n        return this._rotations;\n    }\n\n    get renderedRotations() {\n        return this._renderedRotations;\n    }\n    get scales() {\n        return this._scales;\n    }\n    \n    get renderedScales() {\n        return this._renderedScales;\n    }\n\n    get colors() {\n        return this._colors;\n    }\n    \n    get renderedColors() {\n        return this._renderedColors;\n    }\n\n    get selection() {\n        return this._selection;\n    }\n    \n    get renderedSelection() {\n        return this._renderedSelection;\n    }\n\n    get rendered() {\n        return this._rendered;\n    }\n    \n    calculateRenderedTransforms() {\n        this._renderedSplats = this._rendered.reduce((count, value) => count + value, 0);\n        this._renderedPositions = new Float32Array(this._renderedSplats * 3);\n        this._renderedRotations = new Float32Array(this._renderedSplats * 4);\n        this._renderedScales = new Float32Array(this._renderedSplats * 3);\n        this._renderedColors = new Uint8Array(this._renderedSplats * 4);\n        this._renderedSelection = new Uint8Array(this._renderedSplats);\n\n        let tempIndex = 0;\n        this._rendered.forEach((isRendered, i) => {\n            if (isRendered === 1) {\n                const positionScaleIndex = i * 3;\n                const rotationColorIndex = i * 4;\n                \n                this._renderedPositions[tempIndex * 3] = this._positions[positionScaleIndex];\n                this._renderedPositions[tempIndex * 3 + 1] = this._positions[positionScaleIndex + 1];\n                this._renderedPositions[tempIndex * 3 + 2] = this._positions[positionScaleIndex + 2];\n                \n                this._renderedRotations[tempIndex * 4] = this._rotations[rotationColorIndex];\n                this._renderedRotations[tempIndex * 4 + 1] = this._rotations[rotationColorIndex + 1];\n                this._renderedRotations[tempIndex * 4 + 2] = this._rotations[rotationColorIndex + 2];\n                this._renderedRotations[tempIndex * 4 + 3] = this._rotations[rotationColorIndex + 3];\n                \n                this._renderedScales[tempIndex * 3] = this._scales[positionScaleIndex];\n                this._renderedScales[tempIndex * 3 + 1] = this._scales[positionScaleIndex + 1];\n                this._renderedScales[tempIndex * 3 + 2] = this._scales[positionScaleIndex + 2];\n\n                this._renderedColors[tempIndex * 4] = this._colors[rotationColorIndex];\n                this._renderedColors[tempIndex * 4 + 1] = this._colors[rotationColorIndex + 1];\n                this._renderedColors[tempIndex * 4 + 2] = this._colors[rotationColorIndex + 2];\n                this._renderedColors[tempIndex * 4 + 3] = this._colors[rotationColorIndex + 3];\n                \n                this._renderedSelection[tempIndex] = this._selection[i];\n\n                tempIndex++;\n            }\n        });\n    }\n}\n\nexport { SplatData };\n","class SplatvData {\n    static RowLength = 64;\n\n    private _vertexCount: number;\n    private _positions: Float32Array;\n    private _data: Uint32Array;\n    private _width: number;\n    private _height: number;\n\n    serialize: () => Uint8Array;\n\n    constructor(vertexCount: number, positions: Float32Array, data: Uint32Array, width: number, height: number) {\n        this._vertexCount = vertexCount;\n        this._positions = positions;\n        this._data = data;\n        this._width = width;\n        this._height = height;\n\n        this.serialize = () => {\n            return new Uint8Array(this._data.buffer);\n        };\n    }\n\n    static Deserialize(data: Uint8Array, width: number, height: number): SplatvData {\n        const buffer = new Uint32Array(data.buffer);\n        const f_buffer = new Float32Array(data.buffer);\n        const vertexCount = Math.floor(f_buffer.byteLength / this.RowLength);\n        const positions = new Float32Array(vertexCount * 3);\n        for (let i = 0; i < vertexCount; i++) {\n            positions[3 * i + 0] = f_buffer[16 * i + 0];\n            positions[3 * i + 1] = f_buffer[16 * i + 1];\n            positions[3 * i + 2] = f_buffer[16 * i + 2];\n            positions[3 * i + 0] = f_buffer[16 * i + 3];\n        }\n        return new SplatvData(vertexCount, positions, buffer, width, height);\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n}\n\nexport { SplatvData };\n","import { Quaternion } from \"../math/Quaternion\";\nimport {WebGLRenderer} from \"../renderers/WebGLRenderer\";\nimport {Vector3} from \"../math/Vector3\";\nimport {CubeVisualisationProgram} from \"../renderers/webgl/programs/individual/CubeVisualisationProgram\";\n\nclass Converter {\n    public static SH_C0 = 0.28209479177387814;\n\n    public static SplatToPLY(buffer: ArrayBuffer, vertexCount: number): ArrayBuffer {\n        let header = \"ply\\nformat binary_little_endian 1.0\\n\";\n        header += `element vertex ${vertexCount}\\n`;\n\n        const properties = [\"x\", \"y\", \"z\", \"nx\", \"ny\", \"nz\", \"f_dc_0\", \"f_dc_1\", \"f_dc_2\"];\n        for (let i = 0; i < 45; i++) {\n            properties.push(`f_rest_${i}`);\n        }\n        properties.push(\"opacity\");\n        properties.push(\"scale_0\");\n        properties.push(\"scale_1\");\n        properties.push(\"scale_2\");\n        properties.push(\"rot_0\");\n        properties.push(\"rot_1\");\n        properties.push(\"rot_2\");\n        properties.push(\"rot_3\");\n\n        for (const property of properties) {\n            header += `property float ${property}\\n`;\n        }\n        header += \"end_header\\n\";\n\n        const headerBuffer = new TextEncoder().encode(header);\n\n        const plyRowLength = 4 * 3 + 4 * 3 + 4 * 3 + 4 * 45 + 4 + 4 * 3 + 4 * 4;\n        const plyLength = vertexCount * plyRowLength;\n        const output = new DataView(new ArrayBuffer(headerBuffer.length + plyLength));\n        new Uint8Array(output.buffer).set(headerBuffer, 0);\n\n        const f_buffer = new Float32Array(buffer);\n        const u_buffer = new Uint8Array(buffer);\n\n        const offset = headerBuffer.length;\n        const f_dc_offset = 4 * 3 + 4 * 3;\n        const opacity_offset = f_dc_offset + 4 * 3 + 4 * 45;\n        const scale_offset = opacity_offset + 4;\n        const rot_offset = scale_offset + 4 * 3;\n        for (let i = 0; i < vertexCount; i++) {\n            const pos0 = f_buffer[8 * i + 0];\n            const pos1 = f_buffer[8 * i + 1];\n            const pos2 = f_buffer[8 * i + 2];\n\n            const f_dc_0 = (u_buffer[32 * i + 24 + 0] / 255 - 0.5) / this.SH_C0;\n            const f_dc_1 = (u_buffer[32 * i + 24 + 1] / 255 - 0.5) / this.SH_C0;\n            const f_dc_2 = (u_buffer[32 * i + 24 + 2] / 255 - 0.5) / this.SH_C0;\n\n            const alpha = u_buffer[32 * i + 24 + 3] / 255;\n            const opacity = Math.log(alpha / (1 - alpha));\n\n            const scale0 = Math.log(f_buffer[8 * i + 3 + 0]);\n            const scale1 = Math.log(f_buffer[8 * i + 3 + 1]);\n            const scale2 = Math.log(f_buffer[8 * i + 3 + 2]);\n\n            let q = new Quaternion(\n                (u_buffer[32 * i + 28 + 1] - 128) / 128,\n                (u_buffer[32 * i + 28 + 2] - 128) / 128,\n                (u_buffer[32 * i + 28 + 3] - 128) / 128,\n                (u_buffer[32 * i + 28 + 0] - 128) / 128,\n            );\n            q = q.normalize();\n\n            const rot0 = q.w;\n            const rot1 = q.x;\n            const rot2 = q.y;\n            const rot3 = q.z;\n\n            output.setFloat32(offset + plyRowLength * i + 0, pos0, true);\n            output.setFloat32(offset + plyRowLength * i + 4, pos1, true);\n            output.setFloat32(offset + plyRowLength * i + 8, pos2, true);\n\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 0, f_dc_0, true);\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 4, f_dc_1, true);\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 8, f_dc_2, true);\n\n            output.setFloat32(offset + plyRowLength * i + opacity_offset, opacity, true);\n\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 0, scale0, true);\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 4, scale1, true);\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 8, scale2, true);\n\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 0, rot0, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 4, rot1, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 8, rot2, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 12, rot3, true);\n        }\n\n        return output.buffer;\n    }\n}\n\nexport { Converter };\n","import { Camera } from \"../../../cameras/Camera\";\nimport { Scene } from \"../../../core/Scene\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\n\nabstract class ShaderProgram {\n    private _renderer: WebGLRenderer;\n    private _program: WebGLProgram;\n    private _passes: ShaderPass[];\n\n    protected _scene: Scene | null = null;\n    protected _camera: Camera | null = null;\n    protected _started: boolean = false;\n    protected _initialized: boolean = false;\n\n    protected abstract _initialize: () => void;\n    protected abstract _resize: () => void;\n    protected abstract _render: () => void;\n    protected abstract _dispose: () => void;\n\n    initialize: () => void;\n    resize: () => void;\n    render: (scene: Scene, camera: Camera) => void;\n    dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        this._renderer = renderer;\n        const gl = renderer.gl;\n\n        this._program = gl.createProgram() as WebGLProgram;\n        this._passes = passes || [];\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\n        gl.shaderSource(vertexShader, this._getVertexSource());\n        gl.compileShader(vertexShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(vertexShader));\n        }\n\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\n        gl.shaderSource(fragmentShader, this._getFragmentSource());\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(fragmentShader));\n        }\n\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            console.error(gl.getProgramInfoLog(this.program));\n        }\n\n        this.resize = () => {\n            gl.useProgram(this._program);\n\n            this._resize();\n        };\n\n        this.initialize = () => {\n            console.assert(!this._initialized, \"ShaderProgram already initialized\");\n\n            gl.useProgram(this._program);\n\n            this._initialize();\n            for (const pass of this.passes) {\n                pass.initialize(this);\n            }\n\n            this._initialized = true;\n            this._started = true;\n        };\n\n        this.render = (scene: Scene, camera: Camera) => {\n            gl.useProgram(this._program);\n\n            if (this._scene !== scene || this._camera !== camera) {\n                this.dispose();\n                this._scene = scene;\n                this._camera = camera;\n                this.initialize();\n            }\n\n            for (const pass of this.passes) {\n                pass.render();\n            }\n\n            this._render();\n        };\n\n        this.dispose = () => {\n            if (!this._initialized) return;\n\n            gl.useProgram(this._program);\n\n            for (const pass of this.passes) {\n                pass.dispose();\n            }\n\n            this._dispose();\n\n            this._scene = null;\n            this._camera = null;\n            this._initialized = false;\n        };\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    get scene() {\n        return this._scene;\n    }\n\n    get camera() {\n        return this._camera;\n    }\n\n    get program() {\n        return this._program;\n    }\n\n    get passes() {\n        return this._passes;\n    }\n\n    get started() {\n        return this._started;\n    }\n\n    protected abstract _getVertexSource(): string;\n    protected abstract _getFragmentSource(): string;\n}\n\nexport { ShaderProgram };\n","import {ShaderProgram} from \"../ShaderProgram\";\nimport {WebGLRenderer} from \"../../../WebGLRenderer\";\nimport {ShaderPass} from \"../../passes/ShaderPass\";\n\nconst axisVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n`;\n\nconst axisFragmentShader = /*glsl*/ `#version 300 es\nprecision mediump float;\nuniform vec4 cubeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = cubeColor;\n}\n`;\n\nclass CubeVisualisationProgram extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[], points: Float32Array[], color: Float32Array = new Float32Array([1, 0, 0, 0.2])) {\n        if (!(points.length == 2 || points.length == 8)) {\n            console.error(\"Please provide 2 oder 8 corners\")\n        }\n        super(renderer, passes);\n\n        const gl = renderer.gl;\n\n        let vertexBuffer: WebGLBuffer;\n\n        let positionAttribute: number;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_color: WebGLUniformLocation;\n\n        let corners: Float32Array;\n        let surface: Float32Array;\n        \n        if(points.length === 2) {\n            const [x1, y1, z1] = points[0];\n            const [x2, y2, z2] = points[1];\n\n\n            corners = new Float32Array([\n                x1, y1, z1, x2, y1, z1,  // Linie von P1 zu P2\n                x1, y1, z1, x1, y2, z1,  // Linie von P1 zu P3\n                x1, y1, z1, x1, y1, z2,  // Linie von P1 zu P5\n                x2, y1, z1, x2, y2, z1,  // Linie von P2 zu P4\n                x2, y1, z1, x2, y1, z2,  // Linie von P2 zu P6\n                x1, y2, z1, x2, y2, z1,  // Linie von P3 zu P4\n                x1, y2, z1, x1, y2, z2,  // Linie von P3 zu P7\n                x1, y1, z2, x2, y1, z2,  // Linie von P5 zu P6\n                x1, y1, z2, x1, y2, z2,  // Linie von P5 zu P7\n                x2, y2, z1, x2, y2, z2,  // Linie von P4 zu P8\n                x2, y1, z2, x2, y2, z2,  // Linie von P6 zu P8\n                x1, y2, z2, x2, y2, z2   // Linie von P7 zu P8\n            ]);\n\n\n            surface = new Float32Array([\n                x1, y1, z1, x2, y1, z1, x1, y2, z1, x2, y1, z1, x2, y2, z1, x1, y2, z1,\n                x1, y1, z2, x2, y1, z2, x1, y2, z2, x2, y1, z2, x2, y2, z2, x1, y2, z2,\n                x1, y1, z1, x1, y1, z2, x1, y2, z1, x1, y2, z2, x1, y1, z2, x1, y2, z1,\n                x2, y1, z1, x2, y1, z2, x2, y2, z1, x2, y2, z2, x2, y1, z2, x2, y2, z1,\n                x1, y1, z1, x2, y1, z1, x1, y1, z2, x2, y1, z2, x2, y1, z1, x1, y1, z2,\n                x1, y2, z1, x2, y2, z1, x1, y2, z2, x2, y2, z2, x2, y2, z1, x1, y2, z2\n            ])\n        } else {\n            const [x1, y1, z1] = points[0];\n            const [x2, y2, z2] = points[1];\n            const [x3, y3, z3] = points[2];\n            const [x4, y4, z4] = points[3];\n            const [x5, y5, z5] = points[4];\n            const [x6, y6, z6] = points[5];\n            const [x7, y7, z7] = points[6];\n            const [x8, y8, z8] = points[7];\n\n            corners = new Float32Array([\n                x1, y1, z1, x2, y2, z2,  // Linie von P1 zu P2\n                x1, y1, z1, x3, y3, z3,  // Linie von P1 zu P3\n                x1, y1, z1, x5, y5, z5,  // Linie von P1 zu P5\n                x2, y2, z2, x4, y4, z4,  // Linie von P2 zu P4\n                x2, y2, z2, x6, y6, z6,  // Linie von P2 zu P6\n                x3, y3, z3, x4, y4, z4,  // Linie von P3 zu P4\n                x3, y3, z3, x7, y7, z7,  // Linie von P3 zu P7\n                x5, y5, z5, x6, y6, z6,  // Linie von P5 zu P6\n                x5, y5, z5, x7, y7, z7,  // Linie von P5 zu P7\n                x4, y4, z4, x8, y8, z8,  // Linie von P4 zu P8\n                x6, y6, z6, x8, y8, z8,  // Linie von P6 zu P8\n                x7, y7, z7, x8, y8, z8   // Linie von P7 zu P8\n            ]);\n\n\n            surface = new Float32Array([\n                x1, y1, z1, x2, y2, z2, x3, y3, z3, x2, y2, z2, x4, y4, z4, x3, y3, z3,\n                x5, y5, z5, x6, y6, z6, x7, y7, z7, x6, y6, z6, x8, y8, z8, x7, y7, z7,\n                x1, y1, z1, x5, y5, z5, x3, y3, z3, x7, y7, z7, x5, y5, z5, x3, y3, z3,\n                x2, y2, z2, x6, y6, z6, x4, y4, z4, x8, y8, z8, x6, y6, z6, x4, y4, z4,\n                x1, y1, z1, x2, y2, z2, x5, y5, z5, x6, y6, z6, x2, y2, z2, x5, y5, z5,\n                x3, y3, z3, x4, y4, z4, x7, y7, z7, x8, y8, z8, x4, y4, z4, x7, y7, z7\n            ])\n        }\n        \n\n        const colorLines = new Float32Array([0, 0, 0, 1]);\n\n        this._initialize = () => {\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_color = gl.getUniformLocation(this.program, \"cubeColor\") as WebGLUniformLocation;\n        };\n\n        const drawCubeLines = (vertices: Float32Array, color: Float32Array) => {\n            gl.lineWidth(5);\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.LINES, 0, 24);\n        };\n\n        const drawCube = (vertices: Float32Array, color: Float32Array) => {\n            gl.lineWidth(5);\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.TRIANGLES, 0, 36);\n        };\n        \n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            drawCubeLines(corners, colorLines);\n            drawCube(surface, color)\n        };\n\n        this._resize = () => {};\n        \n        this._dispose = () => {};\n    }\n\n    protected _getFragmentSource(): string {\n        return axisFragmentShader;\n    }\n\n    protected _getVertexSource(): string {\n        return axisVertexShader;\n    }\n    \n}\n\nexport { CubeVisualisationProgram }","import { Vector3 } from \"./Vector3\";\nimport {WebGLRenderer} from \"../renderers/WebGLRenderer\";\nimport {CubeVisualisationProgram} from \"../renderers/webgl/programs/individual/CubeVisualisationProgram\";\nimport {ShaderProgram} from \"../renderers/webgl/programs/ShaderProgram\";\n\nclass Box3 {\n    boxRenderProgram: ShaderProgram | undefined;\n    \n    constructor(\n        public min: Vector3,\n        public max: Vector3,\n    ) {}\n\n    public contains(point: Vector3) {\n        return (\n            point.x >= this.min.x &&\n            point.x <= this.max.x &&\n            point.y >= this.min.y &&\n            point.y <= this.max.y &&\n            point.z >= this.min.z &&\n            point.z <= this.max.z\n        );\n    }\n\n    public intersects(box: Box3) {\n        return (\n            this.max.x >= box.min.x &&\n            this.min.x <= box.max.x &&\n            this.max.y >= box.min.y &&\n            this.min.y <= box.max.y &&\n            this.max.z >= box.min.z &&\n            this.min.z <= box.max.z\n        );\n    }\n\n    public intersectsBox(box: Box3) {\n        return (\n            this.max.x >= box.min.x &&\n            this.min.x <= box.max.x &&\n            this.max.y >= box.min.y &&\n            this.min.y <= box.max.y &&\n            this.max.z >= box.min.z &&\n            this.min.z <= box.max.z\n        );\n    }\n\n    public intersectsBasedOnCenter(box: Box3) {\n        const centerA = this.center();\n        const centerB = box.center();\n\n        const sizeA = this.size();\n        const sizeB = box.size();\n\n        \n        return (\n            Math.abs(centerA.x - centerB.x) <= (sizeA.x / 2 + sizeB.x / 2) &&\n            Math.abs(centerA.y - centerB.y) <= (sizeA.y / 2 + sizeB.y / 2) &&\n            Math.abs(centerA.z - centerB.z) <= (sizeA.z / 2 + sizeB.z / 2)\n        );\n    }\n\n\n    public size() {\n        return this.max.subtract(this.min);\n    }\n\n    public center() {\n        return this.min.add(this.max).divide(2);\n    }\n\n    public expand(point: Vector3) {\n        this.min = this.min.min(point);\n        this.max = this.max.max(point);\n    }\n\n    public permute() {\n        const min = this.min;\n        const max = this.max;\n        this.min = new Vector3(Math.min(min.x, max.x), Math.min(min.y, max.y), Math.min(min.z, max.z));\n        this.max = new Vector3(Math.max(min.x, max.x), Math.max(min.y, max.y), Math.max(min.z, max.z));\n    }\n    \n    public surfaceArea(): number {\n        const width = this.max.x - this.min.x;\n        const height = this.max.y - this.min.y;\n        const depth = this.max.z - this.min.z;\n        return 2 * ((width * height) + (width * depth) + (height * depth));\n    }\n    \n    public drawBox(renderer: WebGLRenderer) {\n        \n        this.permute();\n        let boxColor = new Float32Array([0.0, 1.0, 0.0, 0.5]);\n        let boxMin = new Float32Array([this.min.x, this.min.y, this.min.z]);\n        let boxMax = new Float32Array([this.max.x, this.max.y, this.max.z]);\n        \n        this.boxRenderProgram = new CubeVisualisationProgram(renderer, [], [boxMin, boxMax], boxColor)\n        renderer.addProgram(this.boxRenderProgram);\n    }\n    \n    public ereaseBox(renderer: WebGLRenderer) {\n        if(this.boxRenderProgram !== undefined) {\n            renderer.removeProgram(this.boxRenderProgram);\n        }\n    }\n\n    expandByPoint(point: Vector3): void {\n        this.min = this.min.min(point);\n        this.max = this.max.max(point);\n    }\n\n    getCorners(): Vector3[] {\n        return [\n            new Vector3(this.min.x, this.min.y, this.min.z), // Near-Bottom-Left\n            new Vector3(this.max.x, this.min.y, this.min.z), // Near-Bottom-Right\n            new Vector3(this.min.x, this.max.y, this.min.z), // Near-Top-Left\n            new Vector3(this.max.x, this.max.y, this.min.z), // Near-Top-Right\n            new Vector3(this.min.x, this.min.y, this.max.z), // Far-Bottom-Left\n            new Vector3(this.max.x, this.min.y, this.max.z), // Far-Bottom-Right\n            new Vector3(this.min.x, this.max.y, this.max.z), // Far-Top-Left\n            new Vector3(this.max.x, this.max.y, this.max.z)  // Far-Top-Right\n        ];\n    }\n}\n\nexport { Box3 };\n","import { Quaternion } from \"./Quaternion\";\nimport type { Vector3 } from \"./Vector3\";\n\nclass Matrix3 {\n    public readonly buffer: number[];\n\n    // prettier-ignore\n    constructor(n11: number = 1, n12: number = 0, n13: number = 0,\n                n21: number = 0, n22: number = 1, n23: number = 0,\n                n31: number = 0, n32: number = 0, n33: number = 1) {\n        this.buffer = [\n            n11, n12, n13,\n            n21, n22, n23,\n            n31, n32, n33\n        ];\n    }\n\n    equals(m: Matrix3): boolean {\n        if (this.buffer.length !== m.buffer.length) {\n            return false;\n        }\n        if (this.buffer === m.buffer) {\n            return true;\n        }\n        for (let i = 0; i < this.buffer.length; i++) {\n            if (this.buffer[i] !== m.buffer[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    multiply(v: Matrix3): Matrix3 {\n        const a = this.buffer;\n        const b = v.buffer;\n        return new Matrix3(\n            b[0] * a[0] + b[3] * a[1] + b[6] * a[2],\n            b[1] * a[0] + b[4] * a[1] + b[7] * a[2],\n            b[2] * a[0] + b[5] * a[1] + b[8] * a[2],\n            b[0] * a[3] + b[3] * a[4] + b[6] * a[5],\n            b[1] * a[3] + b[4] * a[4] + b[7] * a[5],\n            b[2] * a[3] + b[5] * a[4] + b[8] * a[5],\n            b[0] * a[6] + b[3] * a[7] + b[6] * a[8],\n            b[1] * a[6] + b[4] * a[7] + b[7] * a[8],\n            b[2] * a[6] + b[5] * a[7] + b[8] * a[8],\n        );\n    }\n\n    clone(): Matrix3 {\n        const e = this.buffer;\n        // prettier-ignore\n        return new Matrix3(\n            e[0], e[1], e[2],\n            e[3], e[4], e[5],\n            e[6], e[7], e[8]\n        );\n    }\n\n    static Eye(v: number = 1): Matrix3 {\n        return new Matrix3(v, 0, 0, 0, v, 0, 0, 0, v);\n    }\n\n    static Diagonal(v: Vector3): Matrix3 {\n        return new Matrix3(v.x, 0, 0, 0, v.y, 0, 0, 0, v.z);\n    }\n\n    static RotationFromQuaternion(q: Quaternion): Matrix3 {\n        const matrix = new Matrix3(\n            1 - 2 * q.y * q.y - 2 * q.z * q.z,\n            2 * q.x * q.y - 2 * q.z * q.w,\n            2 * q.x * q.z + 2 * q.y * q.w,\n            2 * q.x * q.y + 2 * q.z * q.w,\n            1 - 2 * q.x * q.x - 2 * q.z * q.z,\n            2 * q.y * q.z - 2 * q.x * q.w,\n            2 * q.x * q.z - 2 * q.y * q.w,\n            2 * q.y * q.z + 2 * q.x * q.w,\n            1 - 2 * q.x * q.x - 2 * q.y * q.y,\n        );\n        return matrix;\n    }\n\n    static RotationFromEuler(m: Vector3): Matrix3 {\n        const cx = Math.cos(m.x);\n        const sx = Math.sin(m.x);\n        const cy = Math.cos(m.y);\n        const sy = Math.sin(m.y);\n        const cz = Math.cos(m.z);\n        const sz = Math.sin(m.z);\n\n        const rotationMatrix = [\n            cy * cz + sy * sx * sz,\n            -cy * sz + sy * sx * cz,\n            sy * cx,\n            cx * sz,\n            cx * cz,\n            -sx,\n            -sy * cz + cy * sx * sz,\n            sy * sz + cy * sx * cz,\n            cy * cx,\n        ];\n\n        return new Matrix3(...rotationMatrix);\n    }\n\n    toString(): string {\n        return `[${this.buffer.join(\", \")}]`;\n    }\n}\n\nexport { Matrix3 };\n","import {Object3D} from \"../core/Object3D\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Box3 } from \"../math/Box3\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport {Vector4} from \"../math/Vector4\";\nimport {SplatData} from \"./SplatData\";\n\nclass SingleSplat {\n\n    private _index: number;\n    private _data: SplatData;\n\n    private _bounds: Box3;\n\n    private _defaultColor: Uint8Array;\n    \n    // private _position: Float32Array;\n    // private _rotation: Float32Array;\n    // private _scale: Float32Array;\n    // private _color: Uint8Array;\n    // private _selected: Uint8Array;\n    // private _rendered: Uint8Array;\n    //\n    // private _colorTransforms: Array<Matrix4> = [];\n    // private _colorTransformsMap: Map<number, number> = new Map();\n\n    recalculateBounds: () => void;\n    translate: (translation: Vector3) => void;\n    rotate: (rotation: Quaternion) => void;\n    scale: (scale: Vector3) => void;\n    \n    constructor(index: number, data: SplatData) { //position: Float32Array, rotation: Float32Array, scale: Float32Array, color: Uint8Array,\n        this._index = index;\n        this._data = data;\n\n        this._bounds = new Box3(\n            new Vector3(Infinity, Infinity, Infinity),\n            new Vector3(-Infinity, -Infinity, -Infinity),\n        );\n        this._defaultColor = new Uint8Array(data.colors.subarray(index * 4, index * 4 + 4));\n        \n        // this._position = position;\n        // this._rotation = rotation;\n        // this._scale = scale;\n        // this._color = color;\n        // this._selected = new Uint8Array([0]);\n        // this._rendered = new Uint8Array([1]);\n\n        this.recalculateBounds = () => {\n            const pos = this.Position;\n            const scl = this.Scale;\n            \n            this._bounds.min = new Vector3(\n                pos[0] - scl[0],\n                pos[1] - scl[1],\n                pos[2] - scl[2]\n            );\n            this._bounds.max = new Vector3(\n                pos[0] + scl[0],\n                pos[1] + scl[1],\n                pos[2] + scl[2]\n            );\n        };\n\n\n        this.translate = (translation: Vector3) => {\n            const pos = this.Position;\n            pos[0] += translation.x;\n            pos[1] += translation.y;\n            pos[2] += translation.z;\n            // this._position[0] += translation.x;\n            // this._position[1] += translation.y;\n            // this._position[2] += translation.z;\n        };\n\n        this.rotate = (rotation: Quaternion) => {\n            const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            const pos = this.Position;\n\n            const x = pos[0];\n            const y = pos[1];\n            const z = pos[2];\n\n            pos[0] = R[0] * x + R[1] * y + R[2] * z;\n            pos[1] = R[3] * x + R[4] * y + R[5] * z;\n            pos[2] = R[6] * x + R[7] * y + R[8] * z;\n\n            const rot = this.Rotation;\n            const currentRotation = new Quaternion(rot[1], rot[2], rot[3], rot[0]);\n\n            const newRot = rotation.multiply(currentRotation);\n            rot[0] = newRot.w;\n            rot[1] = newRot.x;\n            rot[2] = newRot.y;\n            rot[3] = newRot.z;\n            \n            //\n            // const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            //\n            // const x = this._position[0];\n            // const y = this._position[1];\n            // const z = this._position[2];\n            //\n            // this._position[0] = R[0] * x + R[1] * y + R[2] * z;\n            // this._position[1] = R[3] * x + R[4] * y + R[5] * z;\n            // this._position[2] = R[6] * x + R[7] * y + R[8] * z;\n            //\n            // const currentRotation = new Quaternion(\n            //     this._rotation[1],\n            //     this._rotation[2],\n            //     this._rotation[3],\n            //     this._rotation[0],\n            // );\n            //\n            // const newRot = rotation.multiply(currentRotation);\n            // this._rotation[1] = newRot.x;\n            // this._rotation[2] = newRot.y;\n            // this._rotation[3] = newRot.z;\n            // this._rotation[0] = newRot.w;\n        };\n        \n        this.scale = (scale: Vector3) => {\n            const pos = this.Position;\n            const scl = this.Scale;\n\n            pos[0] *= scale.x;\n            pos[1] *= scale.y;\n            pos[2] *= scale.z;\n\n            scl[0] *= scale.x;\n            scl[1] *= scale.y;\n            scl[2] *= scale.z;\n            //\n            // this._position[0] *= scale.x;\n            // this._position[1] *= scale.y;\n            // this._position[2] *= scale.z;\n            //\n            // this._scale[0] *= scale.x;\n            // this._scale[1] *= scale.y;\n            // this._scale[2] *= scale.z;\n        };\n        \n        this.recalculateBounds();\n    }\n\n    reattach(position: Float32Array, rotation: Float32Array, scale: Float32Array, color: Uint8Array, selection: Uint8Array) {\n        this._data.positions.set(position, this._index * 3);\n        this._data.rotations.set(rotation, this._index * 4);\n        this._data.scales.set(scale, this._index * 3);\n        this._data.colors.set(color, this._index * 4);\n        this._data.selection.set(selection, this._index);\n        \n        // this._position = position;\n        // this._rotation = rotation;\n        // this._scale = scale;\n        // this._color = color;\n        // this._selected = selection;\n    }\n\n    get Selected() {\n        return this._data.selection[this._index];\n    }\n\n    set Selected(value: number) {\n        this._data.selection[this._index] = value;\n    }\n    \n    // Select(select: boolean) {\n    //     this._selected[0] = select ? 1 : 0;        \n    // }\n    //\n    // get Selection() {\n    //     return this._selected;\n    // }\n\n    get Rendered() {\n        return this._data.rendered[this._index];\n    }\n\n    set Rendered(value: number) {\n        this._data.rendered[this._index] = value;\n    }\n\n    get Position() {\n        const i = this._index * 3;\n        return this._data.positions.subarray(i, i + 3);\n    }\n\n    get Rotation() {\n        const i = this._index * 4;\n        return this._data.rotations.subarray(i, i + 4);\n    }\n\n    get Scale() {\n        const i = this._index * 3;\n        return this._data.scales.subarray(i, i + 3);\n    }\n    \n    set Color(colorVector: Uint8Array) {\n        const colorIndex = this._index * 4;\n        this._data.colors.set(colorVector, colorIndex);\n    }\n    get Color() {\n        const i = this._index * 4;\n        return this._data.colors.subarray(i, i + 4);\n    }\n    \n    // Render(render: boolean) {\n    //     this._rendered[0] = render ? 1 : 0;\n    // }\n    //\n    // get Rendered() {\n    //     return this._rendered;\n    // }\n    \n    ResetColor() {\n        const colorIndex = this._index * 4;\n        this._data.colors.set(this._defaultColor, colorIndex);\n    }\n    \n    get bounds() {\n        return this._bounds;\n    }\n    \n    get PositionVec3() {\n        const pos = this.Position;\n        return new Vector3(pos[0], pos[1], pos[2]);\n    }\n    \n    get index() {\n        return this._index;\n    }\n    \n    // get Position() {\n    //     return this._position;\n    // }\n    //\n    // get Scale() {\n    //    return this._scale; \n    // }\n    \n    get ScaleVec3() {\n        const scale = this.Scale;\n        return new Vector3(scale[0], scale[1], scale[2]);\n    }\n\n    setTransparency(alpha: number) {\n        this.Color[3] = Math.floor(alpha * this._defaultColor[3]);\n    }\n\n\n    setBlending(alpha: number) {\n        const color = this.Color;\n        color[3] = Math.floor(alpha * color[3]);\n        this.Color = color;\n    }\n    \n    // get Color() {\n    //     return this._color;\n    // }\n    //\n    // get Rotation() {\n    //     return this._rotation;\n    // }\n}\n\nexport { SingleSplat };","class Constants {\n    static readonly BYTE_OFFSET_FLOAT: number = 4;\n    static readonly BYTE_OFFSET_DOUBLE: number = 8;\n\n    static readonly BYTE_OFFSET_INT: number = 4;\n}\n\nexport { Constants }","import { Box3 } from \"../../math/Box3\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Node } from \"./Node\";\nimport {Frustum} from \"../../math/Frustum\";\n\nconst b = new Box3(\n    new Vector3(Infinity, Infinity, Infinity),\n    new Vector3(-Infinity, -Infinity, -Infinity),\n);\n\nexport class OctreeIterator implements Iterator<Node>, Iterable<Node> {\n    \n    private root: Node;\n    \n    private region: Box3 | Frustum | null;\n    \n    private result!: IteratorResult<Node>;\n    \n    private trace!: Node[];\n    \n    private indices!: number[];\n    \n    constructor(root: Node, region: Box3 | Frustum | null = null) {\n        this.root = root;\n        this.region = region;\n        this.reset();\n    }\n    \n    reset() {\n        const root = this.root;\n        \n        this.trace = [];\n        this.indices = [];\n        \n        if(root !== null) {\n            b.min = root.min;\n            b.max = root.max;\n            \n            if(this.region === null || this.region.intersectsBox(b)) {\n                this.trace.push(root);\n                this.indices.push(0);\n            }\n        }\n        \n        this.result = {\n            done: false\n        } as IteratorResult<Node>;\n        \n        return this;\n    }\n\n    next(): IteratorResult<Node> {\n        const region = this.region;\n        const indices = this.indices;\n        const trace = this.trace;\n        \n        let octant = null;\n        let depth = trace.length - 1;\n        \n        while(octant === null && depth >= 0) {\n            const index = indices[depth]++;\n            const children = trace[depth].children;\n            \n            if(index < 8) {\n                if(children !== undefined && children !== null) {\n                    const child = children[index];\n                    \n                    if(region !== null) {\n                        b.min = child.min;\n                        b.max = child.max;\n                        \n                        if(!region.intersectsBox(b)) {\n                            continue;\n                        }\n                    }\n                    \n                    trace.push(child);\n                    indices.push(0);\n                    \n                    ++depth;\n                } else {\n                    octant = trace.pop();\n                    indices.pop();\n                }\n            } else {\n                trace.pop();\n                indices.pop();\n                \n                --depth;\n            }\n        }\n        \n        this.result.value = octant;\n        this.result.done = (octant === null);\n        \n        return this.result;\n    }\n    \n    [Symbol.iterator](): Iterator<Node> {\n        return this;\n    }\n}\n","import {Vector3} from \"./Vector3\";\nimport {Box3} from \"./Box3\";\nimport {Plane} from \"./Plane\";\n\nconst _vector:Vector3 = new Vector3();\nconst _segCenter:Vector3 = new Vector3();\nconst _segDir:Vector3 = new Vector3();\nconst _diff:Vector3 = new Vector3();\n\nconst _edge1:Vector3 = new Vector3();\nconst _edge2:Vector3 = new Vector3();\nconst _normal:Vector3 = new Vector3();\nclass NewRay {\n    public origin: Vector3;\n    public direction: Vector3;\n    \n    constructor(origin:Vector3 = new Vector3(), direction:Vector3 = new Vector3(0, 0, -1)) {\n        this.origin = origin;\n        this.direction = direction;\n    }\n    \n    set(origin:Vector3, direction:Vector3) {\n        this.origin.copy( origin );\n        this.direction.copy( direction );\n        \n        return this;\n    }\n    \n    copy( ray: NewRay ) {\n        this.origin.copy( ray.origin );\n        this.direction.copy( ray.direction );\n\n        return this;\n    }\n\n    at( t: number, target:Vector3 = new Vector3() ) {\n\n        return target.copy( this.origin ).addScaledVector( this.direction, t );\n\n    }\n\n    intersectPlane( plane: Plane, target: Vector3 ) {\n\n        const t = this.distanceToPlane( plane );\n\n        if ( t === null ) {\n\n            return null;\n\n        }\n\n        return this.at( t, target );\n\n    }\n\n    distanceToPlane( plane: Plane ) {\n\n        const denominator = plane.normal.dot( this.direction );\n\n        if ( denominator === 0 ) {\n\n            // line is coplanar, return origin\n            if ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n                return 0;\n\n            }\n\n            // Null is preferable to undefined since undefined means.... it is undefined\n\n            return null;\n\n        }\n\n        const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n        // Return if the ray never intersects the plane\n\n        return t >= 0 ? t : null;\n\n    }\n\n    lookAt( v:Vector3 ) {\n\n        this.direction.copy( v ).sub( this.origin ).normalize();\n\n        return this;\n\n    }\n\n    recast( t:number ) {\n\n        this.origin.copy( this.at( t, _vector ) );\n\n        return this;\n\n    }\n\n    closestPointToPoint( point:Vector3, target:Vector3 ) {\n\n        target.subVectors( point, this.origin );\n\n        const directionDistance = target.dot( this.direction );\n\n        if ( directionDistance < 0 ) {\n\n            return target.copy( this.origin );\n\n        }\n\n        return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n    }\n\n    distanceToPoint( point:Vector3 ) {\n\n        return Math.sqrt( this.distanceSqToPoint( point ) );\n\n    }\n\n    distanceSqToPoint( point:Vector3 ) {\n\n        const directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\n\n        // point behind the ray\n\n        if ( directionDistance < 0 ) {\n\n            return this.origin.distanceToSquared( point );\n\n        }\n\n        _vector.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n        return _vector.distanceToSquared( point );\n\n    }\n\n    intersectBox( box: Box3, target:Vector3 ) {\n\n        let tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n        const invdirx = 1 / this.direction.x,\n            invdiry = 1 / this.direction.y,\n            invdirz = 1 / this.direction.z;\n\n        const origin = this.origin;\n\n        if ( invdirx >= 0 ) {\n\n            tmin = ( box.min.x - origin.x ) * invdirx;\n            tmax = ( box.max.x - origin.x ) * invdirx;\n\n        } else {\n\n            tmin = ( box.max.x - origin.x ) * invdirx;\n            tmax = ( box.min.x - origin.x ) * invdirx;\n\n        }\n\n        if ( invdiry >= 0 ) {\n\n            tymin = ( box.min.y - origin.y ) * invdiry;\n            tymax = ( box.max.y - origin.y ) * invdiry;\n\n        } else {\n\n            tymin = ( box.max.y - origin.y ) * invdiry;\n            tymax = ( box.min.y - origin.y ) * invdiry;\n\n        }\n\n        if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n        if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n        if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n        if ( invdirz >= 0 ) {\n\n            tzmin = ( box.min.z - origin.z ) * invdirz;\n            tzmax = ( box.max.z - origin.z ) * invdirz;\n\n        } else {\n\n            tzmin = ( box.max.z - origin.z ) * invdirz;\n            tzmax = ( box.min.z - origin.z ) * invdirz;\n\n        }\n\n        if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n        if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n        if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n        //return point closest to the ray (positive side)\n\n        if ( tmax < 0 ) return null;\n\n        return this.at( tmin >= 0 ? tmin : tmax, target );\n\n    }\n\n    intersectsBox( box:Box3 ) {\n\n        return this.intersectBox( box, _vector ) !== null;\n\n    }\n\n    equals( ray: NewRay ) {\n\n        return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    }\n\n    clone() {\n        const Constructor = this.constructor as new () => this;\n        return new Constructor().copy(this);\n    }\n}\n\nexport { NewRay }","import { Node } from \"../core/Node.js\";\nimport { RaycastingFlags } from \"./RaycastingFlags.js\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Box3 } from \"../../math/Box3\";\nimport {NewRay} from \"../../math/NewRay\";\n\nconst v = new Vector3();\nconst b = new Box3(\n    new Vector3(Infinity, Infinity, Infinity),\n    new Vector3(-Infinity, -Infinity, -Infinity),\n);\nconst d = new Box3(\n    new Vector3(Infinity, Infinity, Infinity),\n    new Vector3(-Infinity, -Infinity, -Infinity),\n);\nconst r = new NewRay();\n\n\nexport function intersectOctree(octree: Node, ray: NewRay, flags: RaycastingFlags): number[] | null {\n\n    // Translate the octant extents to the scene origin.\n    const min = b.min.set(0, 0, 0);\n    const max = b.max.subVectors(octree.max, octree.min);\n\n    const dimensions = octree.getDimensions(d.min);\n    const halfDimensions = d.max.copy(dimensions).multiply(0.5);\n\n    const origin = r.origin.copy(ray.origin);\n    const direction = r.direction.copy(ray.direction);\n\n    // Translate the ray to the center of the octant.\n    origin.sub(octree.getCenter(v)).add(halfDimensions);\n\n    // Reset all flags.\n    flags.value = 0;\n\n    // Handle rays with negative directions and prevent division by zero.\n    if(direction.x < 0.0) {\n\n        origin.x = dimensions.x - origin.x;\n        direction.x = -direction.x;\n        flags.value |= 4;\n\n    } else if(direction.x === 0.0) {\n\n        direction.x = Number.EPSILON;\n\n    }\n\n    if(direction.y < 0.0) {\n\n        origin.y = dimensions.y - origin.y;\n        direction.y = -direction.y;\n        flags.value |= 2;\n\n    } else if(direction.y === 0.0) {\n\n        direction.y = Number.EPSILON;\n\n    }\n\n    if(direction.z < 0.0) {\n\n        origin.z = dimensions.z - origin.z;\n        direction.z = -direction.z;\n        flags.value |= 1;\n\n    } else if(direction.z === 0.0) {\n\n        direction.z = Number.EPSILON;\n\n    }\n\n    // Improve IEEE double stability.\n    const invDirX = 1.0 / direction.x;\n    const invDirY = 1.0 / direction.y;\n    const invDirZ = 1.0 / direction.z;\n\n    // Project the ray to the octant's boundaries.\n    const tx0 = (min.x - origin.x) * invDirX;\n    const tx1 = (max.x - origin.x) * invDirX;\n    const ty0 = (min.y - origin.y) * invDirY;\n    const ty1 = (max.y - origin.y) * invDirY;\n    const tz0 = (min.z - origin.z) * invDirZ;\n    const tz1 = (max.z - origin.z) * invDirZ;\n\n    // Check if the ray hits the octree.\n    const hit = (Math.max(tx0, ty0, tz0) < Math.min(tx1, ty1, tz1));\n    return hit ? [tx0, ty0, tz0, tx1, ty1, tz1] : null;\n\n}","import { RaycastingFlags } from \"./RaycastingFlags\";\nimport { Node } from \"./Node\";\nimport {Ray} from \"../../math/Ray\";\nimport { intersectOctree } from \"./intersectOctree\";\nimport {NewRay} from \"../../math/NewRay\";\n\nconst flags = new RaycastingFlags();\n\nconst octantTable = [\n\n    new Uint8Array([4, 2, 1]),\n    new Uint8Array([5, 3, 8]),\n    new Uint8Array([6, 8, 3]),\n    new Uint8Array([7, 8, 8]),\n    new Uint8Array([8, 6, 5]),\n    new Uint8Array([8, 7, 8]),\n    new Uint8Array([8, 8, 7]),\n    new Uint8Array([8, 8, 8])\n\n];\n\nexport function findNextOctant(currentOctant: number, tx1: number, ty1: number, tz1: number): number {\n\n    let min: number;\n    let exit: number;\n\n    // Find the exit plane.\n    if(tx1 < ty1) {\n\n        min = tx1;\n        exit = 0; // YZ-plane.\n\n    } else {\n\n        min = ty1;\n        exit = 1; // XZ-plane.\n\n    }\n\n    if(tz1 < min) {\n\n        exit = 2; // XY-plane.\n\n    }\n\n    return octantTable[currentOctant][exit];\n\n}\n\nfunction findEntryOctant(tx0: number, ty0: number, tz0: number, txm: number, tym: number, tzm: number): number {\n\n    let entry = 0;\n\n    // Find the entry plane.\n    if(tx0 > ty0 && tx0 > tz0) {\n\n        // YZ-plane.\n        if(tym < tx0) {\n\n            entry |= 2;\n\n        }\n\n        if(tzm < tx0) {\n\n            entry |= 1;\n\n        }\n\n    } else if(ty0 > tz0) {\n\n        // XZ-plane.\n        if(txm < ty0) {\n\n            entry |= 4;\n\n        }\n\n        if(tzm < ty0) {\n\n            entry |= 1;\n\n        }\n\n    } else {\n\n        // XY-plane.\n        if(txm < tz0) {\n\n            entry |= 4;\n\n        }\n\n        if(tym < tz0) {\n\n            entry |= 2;\n\n        }\n\n    }\n\n    return entry;\n\n}\n\nfunction raycastOctant(node: Node, tx0: number, ty0: number, tz0: number, tx1: number, ty1: number, tz1: number, result: Node[]): void {\n    if(tx1 >= 0.0 && ty1 >= 0.0 && tz1 >= 0.0) {\n\n        const c = node.children;\n\n        if(c === null || c === undefined) {\n\n            // Leaf.\n            result.push(node);\n\n        } else {\n\n            // Calculate mean values.\n            const txm = 0.5 * (tx0 + tx1);\n            const tym = 0.5 * (ty0 + ty1);\n            const tzm = 0.5 * (tz0 + tz1);\n\n            const f = flags.value;\n            let currentOctant = findEntryOctant(tx0, ty0, tz0, txm, tym, tzm);\n\n            /* The possibilities for the next node are passed in the same respective\n            order as the t-values. Hence, if the first value is found to be the\n            greatest, the fourth one will be returned. If the second value is the\n            greatest, the fifth one will be returned, etc. */\n\n            while(currentOctant < 8) {\n\n                switch(currentOctant) {\n\n                    case 0:\n                        raycastOctant(c[f], tx0, ty0, tz0, txm, tym, tzm, result);\n                        currentOctant = findNextOctant(currentOctant, txm, tym, tzm);\n                        break;\n\n                    case 1:\n                        raycastOctant(c[f ^ 1], tx0, ty0, tzm, txm, tym, tz1, result);\n                        currentOctant = findNextOctant(currentOctant, txm, tym, tz1);\n                        break;\n\n                    case 2:\n                        raycastOctant(c[f ^ 2], tx0, tym, tz0, txm, ty1, tzm, result);\n                        currentOctant = findNextOctant(currentOctant, txm, ty1, tzm);\n                        break;\n\n                    case 3:\n                        raycastOctant(c[f ^ 3], tx0, tym, tzm, txm, ty1, tz1, result);\n                        currentOctant = findNextOctant(currentOctant, txm, ty1, tz1);\n                        break;\n\n                    case 4:\n                        raycastOctant(c[f ^ 4], txm, ty0, tz0, tx1, tym, tzm, result);\n                        currentOctant = findNextOctant(currentOctant, tx1, tym, tzm);\n                        break;\n\n                    case 5:\n                        raycastOctant(c[f ^ 5], txm, ty0, tzm, tx1, tym, tz1, result);\n                        currentOctant = findNextOctant(currentOctant, tx1, tym, tz1);\n                        break;\n\n                    case 6:\n                        raycastOctant(c[f ^ 6], txm, tym, tz0, tx1, ty1, tzm, result);\n                        currentOctant = findNextOctant(currentOctant, tx1, ty1, tzm);\n                        break;\n\n                    case 7:\n                        raycastOctant(c[f ^ 7], txm, tym, tzm, tx1, ty1, tz1, result);\n                        // Far top right octant. No other octants can be reached from here.\n                        currentOctant = 8;\n                        break;\n\n                }\n\n            }\n\n        }\n\n    }\n}\n\nexport class OctreeRaycaster {\n    \n    static intersectOctree(node: Node, ray: NewRay): Node[] {\n\n        const result: Node[] = [];\n        const t = intersectOctree(node, ray, flags);\n\n        if(t !== null) {\n\n            raycastOctant(node, t[0], t[1], t[2], t[3], t[4], t[5], result);\n\n        }\n\n        return result;\n\n    }\n\n}","export class RaycastingFlags {\n    \n    value: number;\n\n    constructor() {\n\n        this.value = 0;\n\n    }\n\n}","import { Tree } from \"./core/Tree\";\nimport { Node } from \"./core/Node\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Box3 } from \"../math/Box3\";\nimport { OctreeIterator } from \"./core/OctreeIterator\";\nimport { NewRaycaster } from \"../utils/Raycaster\";\nimport {OctreeRaycaster} from \"./core/OctreeRaycaster\";\nimport {Frustum} from \"../math/Frustum\";\nimport {WebGLRenderer} from \"../renderers/WebGLRenderer\";\n\nconst b = new Box3(\n    new Vector3(Infinity, Infinity, Infinity),\n    new Vector3(-Infinity, -Infinity, -Infinity),\n);\n\nfunction getDepth(node: Node): number {\n    const children = node.children;\n    \n    let result = 0;\n    \n    if(children !== undefined && children !== null) {\n        for(let i = 0; i < children.length; ++i) {\n            const d = 1 + getDepth(children[i]);\n            \n            if(d > result) {\n                result = d;\n            }\n        }\n    }\n    \n    return result;\n}\n\nfunction cull(node: Node, region: Box3 | Frustum, result: Node[], renderer: WebGLRenderer): void {\n    const children = node.children;\n    \n    b.min = node.min;\n    b.max = node.max;\n    \n    // b.drawBox(renderer);\n    // setTimeout(() => {b.ereaseBox(renderer);}, 1000);\n    if(region.intersectsBox(b, renderer)) {\n        if(children !== undefined && children !== null) {\n            for(let i = 0; i < children.length; ++i) {\n                cull(children[i], region, result, renderer);\n            }\n        } else {\n            result.push(node);\n        }\n    }\n}\n\nfunction findNodesByLevel(node: Node, level: number, depth: number, result: Node[]): void {\n    const children = node.children;\n    \n    if(depth === level) {\n        result.push(node);\n    } else if(children !== undefined && children !== null) {\n        \n        ++depth;\n        \n        for(let i = 0; i < children.length; ++i) {\n            findNodesByLevel(children[i], level, depth, result)\n        }\n    }\n}\n\nexport class Octree implements Tree, Iterable<Node> {\n    protected root: Node;\n    \n    constructor(root: Node) {\n        this.root = root;\n    }\n    \n    get min(): Vector3 {\n        return this.root.min;\n    }\n    \n    get max(): Vector3 {\n        return this.root.max;\n    }\n    \n    get children(): Node[] | null {\n        return this.root.children || null;\n    }\n    \n    getCenter(result: Vector3): Vector3 {\n        return this.root.getCenter(result);\n    }\n    \n    getDimensions(result: Vector3): Vector3 {\n        return this.root.getDimensions(result);\n    }\n    \n    cull(region: Box3 | Frustum, renderer: WebGLRenderer): Node[] {\n        const result: Node[] = []\n        cull(this.root, region, result, renderer);\n        return result;\n    }\n    \n    getDepth(): number {\n        return getDepth(this.root);\n    }\n    \n    findNodesByLevel(level: number): Node[] {\n        const result: Node[] = [];\n        findNodesByLevel(this.root, level, 0, result);\n        return result;\n    }\n    \n    getIntersectingNodes(raycaster: NewRaycaster): Node[] {\n        return OctreeRaycaster.intersectOctree(this.root, raycaster.ray);\n    }\n    \n    leaves(region: Box3 | Frustum | null = null): Iterator<Node> {\n        return new OctreeIterator(this.root, region);\n    }\n    \n    [Symbol.iterator](): Iterator<Node> {\n        return new OctreeIterator(this.root);\n    }\n}","/**\n * A binary pattern that describes the standard octant layout:\n *\n * ```text\n *    3____7\n *  2/___6/|\n *  | 1__|_5\n *  0/___4/\n * ```\n *\n * This common layout is crucial for positional assumptions.\n */\n\nexport const layout = [\n\n    new Uint8Array([0, 0, 0]),\n    new Uint8Array([0, 0, 1]),\n    new Uint8Array([0, 1, 0]),\n    new Uint8Array([0, 1, 1]),\n\n    new Uint8Array([1, 0, 0]),\n    new Uint8Array([1, 0, 1]),\n    new Uint8Array([1, 1, 0]),\n    new Uint8Array([1, 1, 1])\n\n];","import {Node} from \"./Node\";\nimport {DataContainer} from \"./DataContainer\";\nimport {Vector3} from \"../../math/Vector3\";\nimport {layout} from \"./layout\";\n\nconst c = new Vector3();\nexport class Octant<T> implements Node, DataContainer<T> {\n    min: Vector3;\n    max: Vector3;\n    children: Node[] | null;\n    data: T | null;\n    \n    constructor(min = new Vector3(), max = new Vector3()) {\n        this.min = min;\n        this.max = max;\n        this.children = null;\n        this.data = null;\n    }\n    \n    getCenter(result: Vector3): Vector3 {\n        return result.addVectors(this.min, this.max).multiply(0.5)\n    }\n    \n    getDimensions(result: Vector3): Vector3 {\n        return result.subVectors(this.max, this.min);\n    }\n    \n    split(): void {\n        const min = this.min;\n        const max = this.max;\n        const mid = this.getCenter(c);\n        \n        const children: Node[] = this.children = [];\n        \n        for(let i = 0; i < 8; ++i) {\n            const combination = layout[i];\n            const child = new (<typeof Octant> this.constructor)();\n            \n            child.min.set(\n                (combination[0] === 0) ? min.x : mid.x,\n                (combination[1] === 0) ? min.y : mid.y,\n                (combination[2] === 0) ? min.z : mid.z\n            );\n            \n            child.max.set(\n                (combination[0] === 0) ? mid.x : max.x,\n                (combination[1] === 0) ? mid.y : max.y,\n                (combination[2] === 0) ? mid.z : max.z\n            );\n            \n            children[i] = child;\n        }\n    }\n}","import { DataContainer } from \"../core/DataContainer\";\nimport { Vector3 } from \"../../math/Vector3\";\n\nexport class PointContainer<T> implements DataContainer<T> {\n\n    data: T | null;\n    \n\n    point: Vector3 | null;\n\n\n    distance: number;\n    \n    constructor(point: Vector3 | null = null, data: T | null = null, distance = 0.0) {\n\n        this.point = point;\n        this.data = data;\n        this.distance = distance;\n\n    }\n\n}","import { PointContainer } from \"./PointContainer\";\nimport { Vector3 } from \"../../math/Vector3\";\n\nexport class RayPointIntersection<T> extends PointContainer<T> {\n    \n    distanceToRay: number;\n    \n\n    constructor(distanceToOrigin: number, distanceToRay: number, point: Vector3, data: T | null = null) {\n\n        super(point, data, distanceToOrigin);\n        this.distanceToRay = distanceToRay;\n\n    }\n\n}","import { Vector3 } from \"../../math/Vector3\";\nimport { NewRaycaster } from \"../../utils/Raycaster\";\nimport { RayPointIntersection } from \"./RayPointIntersection\";\n\nexport class PointData<T> {\n    points: Vector3[];\n    \n    data: T[];\n\n    constructor() {\n        this.points = [];\n        this.data = [];\n    }\n    \n    testPoints(raycaster: NewRaycaster, result: RayPointIntersection<T>[]): void {\n        const threshold = (raycaster.params.Points !== undefined) ? raycaster.params.Points.threshold : 0;\n        const thresholdSq = threshold * threshold;\n        const ray = raycaster.ray;\n        \n        const points = this.points;\n        const data = this.data;\n\n        for(let i = 0, l = points.length; i < l; ++i) {\n\n            const point = points[i];\n            const distanceToRaySq = ray.distanceSqToPoint(point);\n\n            if(distanceToRaySq < thresholdSq) {\n\n                const closestPoint = ray.closestPointToPoint(point, new Vector3());\n                const distance = ray.origin.distanceTo(closestPoint);\n\n                if(distance >= raycaster.near && distance <= raycaster.far) {\n\n                    result.push(new RayPointIntersection<T>(distance, Math.sqrt(distanceToRaySq), closestPoint, data[i]));\n\n                }\n\n            }\n\n        }\n    }\n}","import {Vector3} from \"../../math/Vector3\";\nimport {Octant} from \"../core/Octant\";\nimport {PointData} from \"./PointData\";\n\nconst p = new Vector3();\n\nexport class PointOctant<T> extends Octant<PointData<T>> {\n    constructor(min: Vector3, max: Vector3) {\n        super(min, max);\n    }\n\n    distanceToSquared(point: Vector3): number {\n\n        const clampedPoint = p.copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).lengthSq();\n\n    }\n\n    distanceToCenterSquared(point: Vector3): number {\n\n        const center = this.getCenter(p);\n\n        const dx = point.x - center.x;\n        const dy = point.y - center.x;\n        const dz = point.z - center.z;\n\n        return dx * dx + dy * dy + dz * dz;\n\n    }\n\n    contains(point: Vector3, bias: number): boolean {\n\n        const min = this.min;\n        const max = this.max;\n\n        return (\n            point.x >= min.x - bias &&\n            point.y >= min.y - bias &&\n            point.z >= min.z - bias &&\n            point.x <= max.x + bias &&\n            point.y <= max.y + bias &&\n            point.z <= max.z + bias\n        );\n    }\n\n    redistribute(bias: number): void {\n\n        const children = this.children;\n        const pointData = this.data;\n\n        if(children !== null && pointData !== null) {\n\n            const points = pointData.points;\n            const data = pointData.data;\n\n            for(let i = 0, il = points.length; i < il; ++i) {\n\n                const point = points[i];\n                const entry = data[i];\n\n                for(let j = 0, jl = children.length; j < jl; ++j) {\n\n                    const child = children[j] as PointOctant<T>;\n\n                    if(child.contains(point, bias)) {\n\n                        if(child.data === null) {\n\n                            child.data = new PointData<T>();\n\n                        }\n\n                        const childData = child.data;\n                        childData.points.push(point);\n                        childData.data.push(entry);\n\n                        break;\n\n                    }\n\n                }\n\n            }\n\n            this.data = null;\n\n        }\n\n    }\n\n    merge(): void {\n\n        const children = this.children;\n\n        if(children !== null) {\n\n            const pointData = new PointData<T>();\n\n            for(let i = 0, l = children.length; i < l; ++i) {\n\n                const child = children[i] as PointOctant<T>;\n                const childData = child.data;\n\n                if(childData !== null) {\n\n                    pointData.points = pointData.points.concat(childData.points);\n                    pointData.data = pointData.data.concat(childData.data);\n\n                }\n\n            }\n\n            this.children = null;\n            this.data = pointData;\n\n        }\n\n    }\n\n}","import { Octree } from \"../Octree\";\nimport {Vector3} from \"../../math/Vector3\";\nimport {PointOctant} from \"./PointOctant\";\nimport {PointContainer} from \"./PointContainer\";\nimport {RayPointIntersection} from \"./RayPointIntersection\";\nimport {NewRaycaster} from \"../../utils/Raycaster\";\nimport {PointData} from \"./PointData\";\n\nfunction countPoints<T>(octant: PointOctant<T>): number {\n\n    const children = octant.children;\n    let result = 0;\n\n    if(children !== null) {\n\n        for(let i = 0, l = children.length; i < l; ++i) {\n\n            result += countPoints(children[i] as PointOctant<T>);\n\n        }\n\n    } else if(octant.data !== null) {\n\n        const pointData = octant.data;\n        result = pointData.points.length;\n\n    }\n\n    return result;\n\n}\n\nfunction set<T>(point: Vector3, data: T, octree: PointOctree<T>, octant: PointOctant<T> | null, depth: number): boolean {\n\n    let exists = false;\n    let done = false;\n\n    if(octant !== null && octant.contains(point, octree.getBias())) {\n\n        let children = octant.children;\n\n        if(children === null) {\n\n            let index = 0;\n\n            if(octant.data === null) {\n\n                octant.data = new PointData<T>();\n\n            } else {\n\n                const pointData = octant.data;\n                const points = pointData.points;\n\n                for(let i = 0, l = points.length; !exists && i < l; ++i) {\n\n                    exists = points[i].equals(point);\n                    index = i;\n\n                }\n\n            }\n\n            const pointData = octant.data;\n\n            if(exists) {\n\n                pointData.data[index] = data;\n                done = true;\n\n            } else if(pointData.points.length < octree.getMaxPoints() || depth === octree.getMaxDepth()) {\n\n                pointData.points.push(point.clone());\n                pointData.data.push(data);\n                done = true;\n\n            } else {\n\n                octant.split();\n                octant.redistribute(octree.getBias());\n                children = octant.children;\n\n            }\n\n        }\n\n        if(children !== null) {\n\n            ++depth;\n\n            for(let i = 0, l = children.length; !done && i < l; ++i) {\n\n                done = set(point, data, octree, children[i] as PointOctant<T>, depth);\n\n            }\n\n        }\n\n    }\n\n    return done;\n}\n\nfunction remove<T>(point: Vector3, octree: PointOctree<T>, octant: PointOctant<T>,\n                   parent: PointOctant<T> | null): T | null {\n\n    const children = octant.children;\n    let result = null;\n\n    if(octant.contains(point, octree.getBias())) {\n\n        if(children !== null) {\n\n            for(let i = 0, l = children.length; result === null && i < l; ++i) {\n\n                result = remove(point, octree, children[i] as PointOctant<T>, octant);\n\n            }\n\n        } else if(octant.data !== null) {\n\n            const pointData = octant.data;\n            const points = pointData.points;\n            const data = pointData.data;\n\n            for(let i = 0, l = points.length; i < l; ++i) {\n\n                if(points[i].equals(point)) {\n\n                    const last = l - 1;\n                    result = data[i];\n\n                    // If the point is NOT the last one in the array:\n                    if(i < last) {\n\n                        // Overwrite with the last point and data entry.\n                        points[i] = points[last];\n                        data[i] = data[last];\n\n                    }\n\n                    // Drop the last entry.\n                    points.pop();\n                    data.pop();\n\n                    if(parent !== null && countPoints(parent) <= octree.getMaxPoints()) {\n\n                        parent.merge();\n\n                    }\n\n                    break;\n\n                }\n\n            }\n\n        }\n\n    }\n\n    return result;\n}\n\nfunction get<T>(point: Vector3, octree: PointOctree<T>, octant: PointOctant<T>): T | null {\n\n    const children = octant.children;\n    let result = null;\n\n    if(octant.contains(point, octree.getBias())) {\n\n        if(children !== null) {\n\n            for(let i = 0, l = children.length; result === null && i < l; ++i) {\n\n                result = get(point, octree, children[i] as PointOctant<T>);\n\n            }\n\n        } else if(octant.data !== null) {\n\n            const pointData = octant.data;\n            const points = pointData.points;\n            const data = pointData.data;\n\n            for(let i = 0, l = points.length; result === null && i < l; ++i) {\n\n                if(point.equals(points[i])) {\n\n                    result = data[i];\n\n                }\n\n            }\n\n        }\n\n    }\n\n    return result;\n}\n\nfunction move<T>(point: Vector3, position: Vector3, octree: PointOctree<T>,\n                 octant: PointOctant<T>, parent: PointOctant<T> | null, depth: number): T | null {\n\n    const children = octant.children;\n    let result = null;\n\n    if(octant.contains(point, octree.getBias())) {\n\n        if(octant.contains(position, octree.getBias())) {\n\n            // The point and the new position both fall into the current octant.\n            if(children !== null) {\n\n                ++depth;\n\n                for(let i = 0, l = children.length; result === null && i < l; ++i) {\n\n                    const child = children[i] as PointOctant<T>;\n                    result = move(point, position, octree, child, octant, depth);\n\n                }\n\n            } else if(octant.data !== null) {\n\n                // No divergence - the point can be updated in place.\n                const pointData = octant.data;\n                const points = pointData.points;\n                const data = pointData.data;\n\n                for(let i = 0, l = points.length; i < l; ++i) {\n\n                    if(point.equals(points[i])) {\n\n                        // The point exists! Update its position.\n                        points[i].copy(position);\n                        result = data[i];\n                        break;\n\n                    }\n\n                }\n\n            }\n\n        } else {\n\n            // Retrieve the point and remove it.\n            result = remove(point, octree, octant, parent);\n\n            // Go back to the parent octant and add the updated point.\n            set(position, result, octree, parent, depth - 1);\n\n        }\n\n    }\n\n    return result;\n\n}\n\n\nfunction findNearestPoint<T>(point: Vector3, maxDistance: number,\n                             skipSelf: boolean, octant: PointOctant<T>): PointContainer<T> | null {\n\n    interface SortableOctant<T> {\n\n        octant: PointOctant<T>;\n        distance: number;\n\n    }\n\n    let result = null;\n    let bestDistance = maxDistance;\n\n    if(octant.children !== null) {\n\n        // Sort the children: smallest distance to the point first, ASC.\n        const sortedChildren: SortableOctant<T>[] = octant.children.map((child) => {\n\n            // Precompute distances.\n            const octant = child as PointOctant<T>;\n\n            return {\n                distance: octant.distanceToCenterSquared(point),\n                octant\n            };\n\n        }).sort((a, b) => a.distance - b.distance);\n\n        // Traverse from closest to furthest.\n        for(let i = 0, l = sortedChildren.length; i < l; ++i) {\n\n            const child = sortedChildren[i].octant;\n\n            if(child.contains(point, bestDistance)) {\n\n                const intermediateResult = findNearestPoint(\n                    point, bestDistance, skipSelf, child\n                );\n\n                if(intermediateResult !== null) {\n\n                    bestDistance = intermediateResult.distance;\n                    result = intermediateResult;\n\n                    if(bestDistance === 0.0) {\n\n                        break;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n    } else if(octant.data !== null) {\n\n        const pointData = octant.data;\n        const points = pointData.points;\n        const data = pointData.data;\n\n        let index = -1;\n\n        for(let i = 0, l = points.length; i < l; ++i) {\n\n            if(points[i].equals(point)) {\n\n                if(!skipSelf) {\n\n                    bestDistance = 0.0;\n                    index = i;\n                    break;\n\n                }\n\n            } else {\n\n                const distance = point.distanceTo(points[i]);\n\n                if(distance < bestDistance) {\n\n                    bestDistance = distance;\n                    index = i;\n\n                }\n\n            }\n\n        }\n\n        if(index >= 0) {\n\n            result = new PointContainer(points[index], data[index], bestDistance);\n\n        }\n\n    }\n\n    return result;\n\n}\n\nfunction findPoints<T>(point: Vector3, radius: number, skipSelf: boolean,\n                       octant: PointOctant<T>, result: PointContainer<T>[]): void {\n\n    const children = octant.children;\n\n    if(children !== null) {\n\n        for(let i = 0, l = children.length; i < l; ++i) {\n\n            const child = children[i] as PointOctant<T>;\n\n            if(child.contains(point, radius)) {\n\n                findPoints(point, radius, skipSelf, child, result);\n\n            }\n\n        }\n\n    } else if(octant.data !== null) {\n\n        const pointData = octant.data;\n        const points = pointData.points;\n        const data = pointData.data;\n\n        for(let i = 0, l = points.length; i < l; ++i) {\n\n            const p = points[i];\n\n            if(p.equals(point)) {\n\n                if(!skipSelf) {\n\n                    result.push(new PointContainer(p.clone(), data[i], 0.0));\n\n                }\n\n            } else {\n\n                const rSq = radius * radius;\n                const dSq = p.distanceToSquared(point);\n\n                if(dSq <= rSq) {\n\n                    result.push(new PointContainer(p.clone(), data[i], Math.sqrt(dSq)));\n\n                }\n\n            }\n\n        }\n\n    }\n\n}\n\n\nexport class PointOctree<T> extends Octree {\n    private bias: number;\n    \n    private maxPoints: number;\n    \n    private maxDepth: number;\n    \n    constructor(min: Vector3, max: Vector3, bias = 0.0, maxPoints = 8, maxDepth = 8) {\n        super(new PointOctant<T>(min, max));\n        \n        this.bias = Math.max(0.0, bias);\n        this.maxPoints = Math.max(1, Math.round(maxPoints));\n        this.maxDepth = Math.max(0, Math.round(maxDepth));\n    }\n    \n    getBias(): number {\n        return this.bias;\n    }\n    \n    getMaxPoints(): number {\n        return this.maxPoints;\n    }\n\n    getMaxDepth(): number {\n        return this.maxDepth;\n    }\n\n    countPoints(octant: PointOctant<T> = this.root as PointOctant<T>): number {\n        return countPoints(octant);\n    }\n\n    set(point: Vector3, data: T): boolean {\n        return set(point, data, this, this.root as PointOctant<T>, 0);\n    }\n\n    remove(point: Vector3): T | null {\n        return remove(point, this, this.root as PointOctant<T>, null);\n    }\n\n    get(point: Vector3): T | null {\n        return get(point, this, this.root as PointOctant<T>);\n    }\n    \n    move(point: Vector3, position: Vector3): T | null {\n        return move(point, position, this, this.root as PointOctant<T>, null, 0);\n    }\n\n    findNearestPoint(point: Vector3, maxDistance = Number.POSITIVE_INFINITY, skipSelf = false): PointContainer<T> | null {\n        const root = this.root as PointOctant<T>;\n        const result = findNearestPoint(point, maxDistance, skipSelf, root);\n\n        if(result !== null && result.point !== null) {\n\n            result.point = result.point.clone();\n\n        }\n\n        return result;\n    }\n\n    findPoints(point: Vector3, radius: number, skipSelf = false): PointContainer<T>[] {\n        const result: PointContainer<T>[] = [];\n        findPoints(point, radius, skipSelf, this.root as PointOctant<T>, result);\n        return result;\n    }\n\n    raycast(raycaster: NewRaycaster): RayPointIntersection<T>[] {\n\n        const result: RayPointIntersection<T>[] = [];\n        const octants = super.getIntersectingNodes(raycaster) as PointOctant<T>[];\n\n        if(octants.length > 0) {\n\n            for(let i = 0, l = octants.length; i < l; ++i) {\n\n                const octant = octants[i];\n                const pointData = octant.data;\n\n                if(pointData !== null) {\n\n                    pointData.testPoints(raycaster, result);\n\n                }\n\n            }\n\n        }\n\n        return result;\n    }\n} ","import { SplatData } from \"./SplatData\";\nimport { Object3D } from \"../core/Object3D\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Converter } from \"../utils/Converter\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Box3 } from \"../math/Box3\";\nimport { SingleSplat } from \"./SingleSplat\"\n\nimport { Constants } from \"../utils/Constants\";\nimport {PointOctree} from \"../Octree/points/PointOctree\";\n\nclass Splat extends Object3D {\n    public selectedChanged: boolean = false;\n    public renderNumberChanged: boolean = false;\n    public colorTransformChanged: boolean = false;\n\n    private _splats: Array<SingleSplat> = [];\n    private _data: SplatData;\n    private _selected: boolean = false;\n    private _colorTransforms: Array<Matrix4> = [];\n    private _colorTransformsMap: Map<number, number> = new Map();\n    private _bounds: Box3;\n    \n    private _numberOfSplats: number;\n    private _numberOfRenderedSplats: number;\n\n    private _octree: PointOctree<SingleSplat> | undefined;\n    \n    applySelection: () => void;\n    applyRendering: () => void;\n    \n    constructor(splat: SplatData | undefined = undefined) {\n        super();\n        \n        this._splats = new Array<SingleSplat>();\n        this._data = splat || new SplatData();\n        \n        this._bounds = new Box3(\n            new Vector3(Infinity, Infinity, Infinity),\n            new Vector3(-Infinity, -Infinity, -Infinity),\n        );\n\n        this._numberOfSplats = 0;\n        this._numberOfRenderedSplats = 0\n        \n\n        this.applyPosition = () => {\n            this.data.translate(this.position);\n            this.position = new Vector3();\n        };\n\n        this.applyRotation = () => {\n            this._splats.forEach((splat, index) => {\n                splat.rotate(this.rotation);\n            });\n            this.rotation = new Quaternion();\n\n            this.data.changed = true;\n        };\n\n        this.applyScale = () => {\n            this._splats.forEach((splat, index) => {\n                splat.scale(this.scale);\n            });\n            this.scale = new Vector3(1, 1, 1);\n        };\n        \n        this.applySelection = () => {\n            this.selectedChanged = true;\n            this.dispatchEvent(this._changeEvent);\n            \n            this.data.changed = true;\n        }\n        \n        this.applyRendering = () => {\n            this.renderNumberChanged = true;\n            \n            this.dispatchEvent(this._changeEvent);\n            this.data.changed = true;\n        }\n\n\n        (async () => {\n            await this.createSplatsData(splat);\n            await this.recalculateBounds();\n            await this.createOctree();\n            this.data.changed = true;\n        })();\n    }\n\n    async createSplatsData(splat: SplatData | undefined) {\n        if (splat != undefined) {\n            this._numberOfSplats = splat.vertexCount;\n            this._numberOfRenderedSplats = splat.vertexCount;\n\n            console.time(\"Splats creation\");\n            for (let i = 0; i < splat.vertexCount; i++) {\n                let singleSplat = new SingleSplat(i, this._data);\n                this._splats.push(singleSplat);\n\n                if (i % 1000 === 0) { // Nach jedem 1000. Eintrag den Main-Thread freigeben\n                    await Promise.resolve();\n                }\n            }\n            console.timeEnd(\"Splats creation\");\n        }\n    }\n\n\n    async recalculateBounds() {\n        console.time(\"Bounds calculation\");\n        for (let i = 0; i < this._numberOfSplats; i++) {\n            const pos = this._splats[i].Position;\n            this._bounds.expand(new Vector3(pos[0], pos[1], pos[2]));\n\n            if (i % 1000 === 0) { // Nach jedem 1000. Eintrag den Main-Thread freigeben\n                await Promise.resolve();\n            }\n        }\n        console.timeEnd(\"Bounds calculation\");\n    }\n\n\n    async createOctree() {\n        this._octree = new PointOctree<SingleSplat>(this._bounds.min, this._bounds.max, 0.0, 8, 8);\n        console.time(\"Octree creation\");\n        const positionVector = new Vector3();\n        for (let i = 0; i < this._numberOfSplats; i++) {\n            const pos = this._splats[i].Position;\n            positionVector.set(pos[0], pos[1], pos[2]);\n            this._octree.set(positionVector, this._splats[i]);\n\n            if (i % 1000 === 0) { // Nach jedem 1000. Eintrag den Main-Thread freigeben\n                await Promise.resolve();\n            }\n        }\n        console.timeEnd(\"Octree creation\");\n    }\n\n\n    saveToFile(name: string | null = null, format: string | null = null) {\n        if (!document) return;\n\n        if (!format) {\n            format = \"splat\";\n        } else if (format !== \"splat\" && format !== \"ply\") {\n            throw new Error(\"Invalid format. Must be 'splat' or 'ply'\");\n        }\n\n        if (!name) {\n            const now = new Date();\n            name = `splat-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.${format}`;\n        }\n\n        this.applyRotation();\n        this.applyScale();\n        this.applyPosition();\n\n        const data = this.serialize();\n        let blob;\n        if (format === \"ply\") {\n            const plyData = Converter.SplatToPLY(data.buffer, this._numberOfSplats);\n            blob = new Blob([plyData], { type: \"application/octet-stream\" });\n        } else {\n            blob = new Blob([data.buffer], { type: \"application/octet-stream\" });\n        }\n\n        const link = document.createElement(\"a\");\n        link.download = name;\n        link.href = URL.createObjectURL(blob);\n        link.click();\n    }\n\n    get data() {\n        return this._data;\n    }\n    \n    get splats() {\n        return this._splats;\n    }\n    \n    getSplatAtIndex(index: number): SingleSplat | undefined {\n        if (index < 0 || index >= this._numberOfSplats) {\n            console.error(\"Index out of bounds\");\n            return undefined; \n        }\n        return this._splats[index];\n    }\n\n    get selected() {\n        return this._selected;\n    }\n\n    set selected(selected: boolean) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.selectedChanged = true;\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n    \n    selectSplat(index: number, value: number) {\n        this._splats[index].Selected = value;\n        \n        this.selectedChanged = true;\n        this.dispatchEvent(this._changeEvent);\n    }\n    \n    renderSplat(index: number, value: number) {\n        this._data.rendered[index] = value;\n    }\n    \n    updateRenderingOfSplats() {\n        this.data.changed = true;\n    }\n\n    get colorTransforms() {\n        return this._colorTransforms;\n    }\n\n    get colorTransformsMap() {\n        return this._colorTransformsMap;\n    }\n    \n    get bounds() {\n        let center = this._bounds.center();\n        center = center.add(this.position);\n\n        let size = this._bounds.size();\n        size = size.multiply(this.scale);\n\n        return new Box3(center.subtract(size.divide(2)), center.add(size.divide(2)));\n    }\n    \n    get splatCount() {\n        return this._numberOfSplats;\n    }\n    \n    get numberOfRenderedSplats() {\n        return this._data.renderedSplats;\n    }\n\n    serialize = () => {\n        console.log(\"serialize splat\")\n        const data = new Uint8Array(this._numberOfSplats * SplatData.RowLength);\n\n        const f_buffer = new Float32Array(data.buffer);\n        const u_buffer = new Uint8Array(data.buffer);\n        \n        for (let i = 0; i < this._numberOfSplats; i++) {\n            f_buffer[8 * i + 0] = this._splats[i].Position[0];\n            f_buffer[8 * i + 1] = this._splats[i].Position[1];\n            f_buffer[8 * i + 2] = this._splats[i].Position[2];\n\n            u_buffer[32 * i + 24 + 0] = this._splats[i].Color[0];\n            u_buffer[32 * i + 24 + 1] = this._splats[i].Color[1];\n            u_buffer[32 * i + 24 + 2] = this._splats[i].Color[2];\n            u_buffer[32 * i + 24 + 3] = this._splats[i].Color[3];\n\n            f_buffer[8 * i + 3 + 0] = this._splats[i].Scale[0];\n            f_buffer[8 * i + 3 + 1] = this._splats[i].Scale[1];\n            f_buffer[8 * i + 3 + 2] = this._splats[i].Scale[2];\n\n            u_buffer[32 * i + 28 + 0] = (this._splats[i].Rotation[0] * 128 + 128) & 0xff;\n            u_buffer[32 * i + 28 + 1] = (this._splats[i].Rotation[1] * 128 + 128) & 0xff;\n            u_buffer[32 * i + 28 + 2] = (this._splats[i].Rotation[2] * 128 + 128) & 0xff;\n            u_buffer[32 * i + 28 + 3] = (this._splats[i].Rotation[3] * 128 + 128) & 0xff;\n        }\n\n        return data;\n    };\n\n    reattach = (\n        positions: ArrayBufferLike,\n        rotations: ArrayBufferLike,\n        scales: ArrayBufferLike,\n        colors: ArrayBufferLike,\n        selection: ArrayBufferLike,\n    ) => {\n        console.assert(\n            positions.byteLength === this._numberOfRenderedSplats * 3 * 4,\n            `Expected ${this._numberOfRenderedSplats * 3 * 4} bytes, got ${positions.byteLength} bytes`,\n        );\n\n        for(let i = 0; i < this._numberOfSplats; i++) {\n            if(this._splats[i].Rendered === 1){\n                let position: Float32Array = new Float32Array(positions, 3 * i * Constants.BYTE_OFFSET_FLOAT, 3);\n                let rotation: Float32Array = new Float32Array(rotations, 4 * i * Constants.BYTE_OFFSET_FLOAT, 4);\n                let scale: Float32Array = new Float32Array(scales, 3 * i * Constants.BYTE_OFFSET_FLOAT, 3);\n                let color: Uint8Array = new Uint8Array(colors, 1 * i * Constants.BYTE_OFFSET_INT, 4);\n                let selected: Uint8Array = new Uint8Array(selection, i, 1);\n\n                this._splats[i].reattach(position, rotation, scale, color, selected);       \n            }\n        }\n        \n        this._data.detached = false;\n    };\n\n    get Positions(): Float32Array {\n        return this._data.renderedPositions;\n    }\n\n    get Scales(): Float32Array {\n        return this._data.renderedScales;\n    }\n\n    get Rotations(): Float32Array {\n        return this._data.renderedRotations;\n    }\n\n    get Colors(): Uint8Array {\n        return this._data.renderedColors;\n    }\n\n    get Selections(): Uint8Array {\n        return this._data.renderedSelection;\n    }\n\n    get Rendered(): Uint8Array {\n        return this.data.rendered;\n    }\n    \n    get octree() {\n        return this._octree;\n    }\n}\n\nexport { Splat };\n","import { Object3D } from \"../core/Object3D\";\nimport { SplatvData } from \"./SplatvData\";\n\nclass Splatv extends Object3D {\n    private _data: SplatvData;\n\n    constructor(splat: SplatvData) {\n        super();\n\n        this._data = splat;\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport { Splatv };\n","import { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass CameraData {\n    private _fx: number = 1132;\n    private _fy: number = 1132;\n    private _near: number = 0.1;\n    private _far: number = 30;\n\n    private _width: number = 512;\n    private _height: number = 512;\n\n    private _projectionMatrix: Matrix4 = new Matrix4();\n    private _viewMatrix: Matrix4 = new Matrix4();\n    private _viewProj: Matrix4 = new Matrix4();\n\n    update: (position: Vector3, rotation: Quaternion) => void;\n    setSize: (width: number, height: number) => void;\n\n    private _updateProjectionMatrix: () => void;\n\n    constructor() {\n        this._updateProjectionMatrix = () => {\n            // prettier-ignore\n            this._projectionMatrix = new Matrix4(\n                2 * this.fx / this.width, 0, 0, 0,\n                0, -2 * this.fy / this.height, 0, 0,\n                0, 0, this.far / (this.far - this.near), 1,\n                0, 0, -(this.far * this.near) / (this.far - this.near), 0\n            );\n\n            this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);\n        };\n\n        this.update = (position: Vector3, rotation: Quaternion) => {\n            const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            const t = position.flat();\n\n            // prettier-ignore\n            this._viewMatrix = new Matrix4(\n                R[0], R[1], R[2], 0,\n                R[3], R[4], R[5], 0,\n                R[6], R[7], R[8], 0,\n                -t[0] * R[0] - t[1] * R[3] - t[2] * R[6],\n                -t[0] * R[1] - t[1] * R[4] - t[2] * R[7],\n                -t[0] * R[2] - t[1] * R[5] - t[2] * R[8],\n                1,\n            );\n\n            this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);\n        };\n\n        this.setSize = (width: number, height: number) => {\n            this._width = width;\n            this._height = height;\n            this._updateProjectionMatrix();\n        };\n    }\n\n    get fx() {\n        return this._fx;\n    }\n\n    set fx(fx: number) {\n        if (this._fx !== fx) {\n            this._fx = fx;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get fy() {\n        return this._fy;\n    }\n\n    set fy(fy: number) {\n        if (this._fy !== fy) {\n            this._fy = fy;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get near() {\n        return this._near;\n    }\n\n    set near(near: number) {\n        if (this._near !== near) {\n            this._near = near;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get far() {\n        return this._far;\n    }\n\n    set far(far: number) {\n        if (this._far !== far) {\n            this._far = far;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get projectionMatrix() {\n        return this._projectionMatrix;\n    }\n\n    get viewMatrix() {\n        return this._viewMatrix;\n    }\n\n    get viewProj() {\n        return this._viewProj;\n    }\n    \n    get direction() {\n        const inverseViewMatrix = this._viewMatrix.invert().buffer;\n\n        // Dritte Spalte der inversen View-Matrix extrahieren\n        const direction = new Vector3(\n            inverseViewMatrix[8],\n            inverseViewMatrix[9],\n            inverseViewMatrix[10]\n        );\n\n        return direction.normalize();\n    }\n}\n\nexport { CameraData };\n","import { Matrix4 } from \"./Matrix4\";\n\nclass Vector4 {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n    public readonly w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    equals(v: Vector4): boolean {\n        if (this.x !== v.x) {\n            return false;\n        }\n        if (this.y !== v.y) {\n            return false;\n        }\n        if (this.z !== v.z) {\n            return false;\n        }\n        if (this.w !== v.w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    add(v: number): Vector4;\n    add(v: Vector4): Vector4;\n    add(v: number | Vector4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x + v, this.y + v, this.z + v, this.w + v);\n        } else {\n            return new Vector4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n        }\n    }\n\n    subtract(v: number): Vector4;\n    subtract(v: Vector4): Vector4;\n    subtract(v: number | Vector4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x - v, this.y - v, this.z - v, this.w - v);\n        } else {\n            return new Vector4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n        }\n    }\n\n    multiply(v: number): Vector4;\n    multiply(v: Vector4): Vector4;\n    multiply(v: Matrix4): Vector4;\n    multiply(v: number | Vector4 | Matrix4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x * v, this.y * v, this.z * v, this.w * v);\n        } else if (v instanceof Vector4) {\n            return new Vector4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);\n        } else {\n            return new Vector4(\n                this.x * v.buffer[0] + this.y * v.buffer[4] + this.z * v.buffer[8] + this.w * v.buffer[12],\n                this.x * v.buffer[1] + this.y * v.buffer[5] + this.z * v.buffer[9] + this.w * v.buffer[13],\n                this.x * v.buffer[2] + this.y * v.buffer[6] + this.z * v.buffer[10] + this.w * v.buffer[14],\n                this.x * v.buffer[3] + this.y * v.buffer[7] + this.z * v.buffer[11] + this.w * v.buffer[15],\n            );\n        }\n    }\n\n    dot(v: Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n\n    lerp(v: Vector4, t: number): Vector4 {\n        return new Vector4(\n            this.x + (v.x - this.x) * t,\n            this.y + (v.y - this.y) * t,\n            this.z + (v.z - this.z) * t,\n            this.w + (v.w - this.w) * t,\n        );\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n\n    distanceTo(v: Vector4): number {\n        return Math.sqrt((this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2 + (this.w - v.w) ** 2);\n    }\n\n    normalize(): Vector4 {\n        const length = this.magnitude();\n\n        return new Vector4(this.x / length, this.y / length, this.z / length, this.w / length);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z, this.w];\n    }\n\n    clone(): Vector4 {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Vector4 };\n","import {CameraData} from \"./CameraData\";\nimport {Object3D} from \"../core/Object3D\";\nimport {Vector3} from \"../math/Vector3\";\nimport {Vector4} from \"../math/Vector4\";\n\nclass Camera extends Object3D {\n    private _data: CameraData;\n\n    screenPointToRay: (x: number, y: number) => Vector3;\n    screenToWorldPoint: (x: number, y: number) => Vector3;\n    worldToScreenPoint: (worldPoint: Vector3) => Vector3;\n    worldToCameraPoint: (worldPoint: Vector3) => Vector3;\n\n        constructor(camera: CameraData | undefined = undefined) {\n        super();\n\n        this._data = camera ? camera : new CameraData();\n        this._position = new Vector3(0, 0, -5);\n\n        this.update = () => {\n            this.data.update(this.position, this.rotation);\n        };\n\n        this.worldToScreenPoint = (worldPoint: Vector3) => {\n            const worldSpaceCoords = new Vector4(worldPoint.x, worldPoint.y, worldPoint.z, 1.0);\n            const viewMatrix = this._data.viewMatrix;\n            const cameraSpaceCoors = worldSpaceCoords.multiply(viewMatrix);\n            \n            const projectionMatrix = this._data.projectionMatrix;\n            const clipSpaceCoords = cameraSpaceCoors.multiply(projectionMatrix);\n\n            return new Vector3(\n                clipSpaceCoords.x / clipSpaceCoords.w,\n                clipSpaceCoords.y / clipSpaceCoords.w,\n                clipSpaceCoords.z / clipSpaceCoords.w,\n            );\n        }\n        \n        this.worldToCameraPoint = (worldPoint: Vector3) => {\n            // Transformiere den Punkt in den Kamera-Raum\n            const cameraSpaceCoords = new Vector4(worldPoint.x, worldPoint.y, worldPoint.z, 1.0);\n            const viewMatrix = this._data.viewMatrix;\n            const cameraCoords = cameraSpaceCoords.multiply(viewMatrix);\n\n            return new Vector3(\n                cameraCoords.x / cameraCoords.w,\n                cameraCoords.y / cameraCoords.w,\n                cameraCoords.z / cameraCoords.w\n            );\n        }\n        \n        this.screenToWorldPoint = (x: number, y: number, z:number = -1) => {\n            const clipSpaceCoords = new Vector4(x, y, z, 1);\n            const inverseProjectionMatrix = this._data.projectionMatrix.invert();\n            const cameraSpaceCoords = clipSpaceCoords.multiply(inverseProjectionMatrix);\n            const inverseViewMatrix = this._data.viewMatrix.invert();\n            const worldSpaceCoords = cameraSpaceCoords.multiply(inverseViewMatrix);\n            return new Vector3(\n                worldSpaceCoords.x / worldSpaceCoords.w,\n                worldSpaceCoords.y / worldSpaceCoords.w,\n                worldSpaceCoords.z / worldSpaceCoords.w,\n            );\n        };\n        \n        this.screenPointToRay = (x: number, y: number) => {\n            const clipSpaceCoords = new Vector4(x, y, -1, 1);\n            const inverseProjectionMatrix = this._data.projectionMatrix.invert();\n            const cameraSpaceCoords = clipSpaceCoords.multiply(inverseProjectionMatrix);\n            const inverseViewMatrix = this._data.viewMatrix.invert();\n            const worldSpaceCoords = cameraSpaceCoords.multiply(inverseViewMatrix);\n            const worldSpacePosition = new Vector3(\n                worldSpaceCoords.x / worldSpaceCoords.w,\n                worldSpaceCoords.y / worldSpaceCoords.w,\n                worldSpaceCoords.z / worldSpaceCoords.w,\n            );\n            const direction = worldSpacePosition.subtract(this.position).normalize();\n            return direction;\n        };\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport { Camera };\n","import { Object3D } from \"./Object3D\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { Splat } from \"../splats/Splat\";\nimport { EventDispatcher } from \"../events/EventDispatcher\";\nimport { ObjectAddedEvent, ObjectRemovedEvent } from \"../events/Events\";\nimport { Converter } from \"../utils/Converter\";\n\nclass Scene extends EventDispatcher {\n    private _objects: Object3D[] = [];\n\n    addObject: (object: Object3D) => void;\n    removeObject: (object: Object3D) => void;\n    findObject: (predicate: (object: Object3D) => boolean) => Object3D | undefined;\n    findObjectOfType: <T extends Object3D>(type: { new (): T }) => T | undefined;\n    reset: () => void;\n\n    constructor() {\n        super();\n\n        this.addObject = (object: Object3D) => {\n            this.objects.push(object);\n            this.dispatchEvent(new ObjectAddedEvent(object));\n        };\n\n        this.removeObject = (object: Object3D) => {\n            const index = this.objects.indexOf(object);\n            if (index < 0) {\n                throw new Error(\"Object not found in scene\");\n            }\n            this.objects.splice(index, 1);\n            this.dispatchEvent(new ObjectRemovedEvent(object));\n        };\n\n        this.findObject = (predicate: (object: Object3D) => boolean) => {\n            for (const object of this.objects) {\n                if (predicate(object)) {\n                    return object;\n                }\n            }\n            return undefined;\n        };\n\n        this.findObjectOfType = <T extends Object3D>(type: { new (): T }) => {\n            for (const object of this.objects) {\n                if (object instanceof type) {\n                    return object;\n                }\n            }\n            return undefined;\n        };\n\n        this.reset = () => {\n            const objectsToRemove = this.objects.slice();\n            for (const object of objectsToRemove) {\n                this.removeObject(object);\n            }\n        };\n\n        this.reset();\n    }\n\n    saveToFile(name: string | null = null, format: string | null = null) {\n        if (!document) return;\n\n        if (!format) {\n            format = \"splat\";\n        } else if (format !== \"splat\" && format !== \"ply\") {\n            throw new Error(\"Invalid format. Must be 'splat' or 'ply'\");\n        }\n\n        if (!name) {\n            const now = new Date();\n            name = `scene-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.${format}`;\n        }\n\n        const buffers: Uint8Array[] = [];\n        let vertexCount = 0;\n\n        for (const object of this.objects) {\n            object.applyRotation();\n            object.applyScale();\n            object.applyPosition();\n            if (object instanceof Splat) {\n                const buffer = object.serialize();\n                buffers.push(buffer);\n                vertexCount += object.splatCount;\n            }\n        }\n\n        const data = new Uint8Array(vertexCount * SplatData.RowLength);\n        let offset = 0;\n        for (const buffer of buffers) {\n            data.set(buffer, offset);\n            offset += buffer.length;\n        }\n\n        let blob;\n        if (format === \"ply\") {\n            const plyData = Converter.SplatToPLY(data.buffer, vertexCount);\n            blob = new Blob([plyData], { type: \"application/octet-stream\" });\n        } else {\n            blob = new Blob([data.buffer], { type: \"application/octet-stream\" });\n        }\n\n        const link = document.createElement(\"a\");\n        link.download = name;\n        link.href = URL.createObjectURL(blob);\n        link.click();\n    }\n\n    get objects() {\n        return this._objects;\n    }\n}\n\nexport { Scene };\n","export async function initiateFetchRequest(url: string, useCache: boolean): Promise<Response> {\n    const req = await fetch(url, {\n        mode: \"cors\",\n        credentials: \"omit\",\n        cache: useCache ? \"force-cache\" : \"default\",\n    });\n\n    if (req.status != 200) {\n        throw new Error(req.status + \" Unable to load \" + req.url);\n    }\n\n    return req;\n}\n\nexport async function loadDataIntoBuffer(res: Response, onProgress?: (progress: number) => void): Promise<Uint8Array> {\n    const reader = res.body!.getReader();\n\n    const contentLength = parseInt(res.headers.get(\"content-length\") as string);\n    const buffer = new Uint8Array(contentLength);\n\n    let bytesRead = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer.set(value, bytesRead);\n        bytesRead += value.length;\n        onProgress?.(bytesRead / contentLength);\n    }\n\n    return buffer;\n}\n\nexport async function loadChunkedDataIntoBuffer(\n    res: Response,\n    onProgress?: (progress: number) => void,\n): Promise<Uint8Array> {\n    const reader = res.body!.getReader();\n\n    const chunks = [];\n    let receivedLength = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        chunks.push(value);\n        receivedLength += value.length;\n    }\n\n    const buffer = new Uint8Array(receivedLength);\n    let position = 0;\n    for (const chunk of chunks) {\n        buffer.set(chunk, position);\n        position += chunk.length;\n\n        onProgress?.(position / receivedLength);\n    }\n\n    return buffer;\n}\n\nexport async function loadRequestDataIntoBuffer(\n    res: Response,\n    onProgress?: (progress: number) => void,\n): Promise<Uint8Array> {\n    if (res.headers.has(\"content-length\")) {\n        return loadDataIntoBuffer(res, onProgress);\n    } else {\n        return loadChunkedDataIntoBuffer(res, onProgress);\n    }\n}\n","import type { Scene } from \"../core/Scene\";\nimport { Splat } from \"../splats/Splat\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { initiateFetchRequest, loadRequestDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass Loader {\n    \n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        useCache: boolean = false,\n    ): Promise<Splat> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const buffer = await loadRequestDataIntoBuffer(res, onProgress);\n\n        return this.LoadFromArrayBuffer(buffer, scene);\n    }\n\n    static async LoadFromFileAsync(file: File, scene: Scene, onProgress?: (progress: number) => void): Promise<Splat> {\n        const reader = new FileReader();\n        let splat = new Splat();\n        reader.onload = (e) => {\n            splat = this.LoadFromArrayBuffer(e.target!.result as ArrayBuffer, scene);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        return splat;\n    }\n\n    static LoadFromArrayBuffer(arrayBuffer: ArrayBufferLike, scene: Scene): Splat {\n        const buffer = new Uint8Array(arrayBuffer);\n        const data = SplatData.Deserialize(buffer);\n        const splat = new Splat(data);\n        scene.addObject(splat);\n        return splat;\n    }\n}\n\nexport { Loader };\n","import { Scene } from \"../core/Scene\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { Splat } from \"../splats/Splat\";\nimport { Converter } from \"../utils/Converter\";\nimport { initiateFetchRequest, loadRequestDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass PLYLoader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        format: string = \"\",\n        useCache: boolean = false,\n    ): Promise<Splat> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const plyData = await loadRequestDataIntoBuffer(res, onProgress);\n\n        if (plyData[0] !== 112 || plyData[1] !== 108 || plyData[2] !== 121 || plyData[3] !== 10) {\n            throw new Error(\"Invalid PLY file\");\n        }\n\n        return this.LoadFromArrayBuffer(plyData.buffer, scene, format);\n    }\n\n    static async LoadFromFileAsync(\n        file: File,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        format: string = \"\",\n    ): Promise<Splat> {\n        const reader = new FileReader();\n        let splat = new Splat();\n        reader.onload = (e) => {\n            splat = this.LoadFromArrayBuffer(e.target!.result as ArrayBuffer, scene, format);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        return splat;\n    }\n\n    static LoadFromArrayBuffer(arrayBuffer: ArrayBufferLike, scene: Scene, format: string = \"\"): Splat {\n        const buffer = new Uint8Array(this._ParsePLYBuffer(arrayBuffer, format));\n        const data = SplatData.Deserialize(buffer);\n        const splat = new Splat(data);\n        scene.addObject(splat);\n        return splat;\n    }\n\n    private static _ParsePLYBuffer(inputBuffer: ArrayBuffer, format: string): ArrayBuffer {\n        type PlyProperty = {\n            name: string;\n            type: string;\n            offset: number;\n        };\n\n        const ubuf = new Uint8Array(inputBuffer);\n        const headerText = new TextDecoder().decode(ubuf.slice(0, 1024 * 10));\n        const header_end = \"end_header\\n\";\n        const header_end_index = headerText.indexOf(header_end);\n        if (header_end_index < 0) throw new Error(\"Unable to read .ply file header\");\n\n        const vertexCount = parseInt(/element vertex (\\d+)\\n/.exec(headerText)![1]);\n\n        let rowOffset = 0;\n        const offsets: Record<string, number> = {\n            double: 8,\n            int: 4,\n            uint: 4,\n            float: 4,\n            short: 2,\n            ushort: 2,\n            uchar: 1,\n        };\n\n        const properties: PlyProperty[] = [];\n        for (const prop of headerText\n            .slice(0, header_end_index)\n            .split(\"\\n\")\n            .filter((k) => k.startsWith(\"property \"))) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const [_p, type, name] = prop.split(\" \");\n            properties.push({ name, type, offset: rowOffset });\n            \n            if (!offsets[type]) throw new Error(`Unsupported property type: ${type}`);\n            rowOffset += offsets[type];\n        }\n\n        const dataView = new DataView(inputBuffer, header_end_index + header_end.length);\n        const buffer = new ArrayBuffer(SplatData.RowLength * vertexCount);\n\n        const q_polycam = Quaternion.FromEuler(new Vector3(Math.PI / 2, 0, 0));\n\n        for (let i = 0; i < vertexCount; i++) {\n            const position = new Float32Array(buffer, i * SplatData.RowLength, 3);\n            const scale = new Float32Array(buffer, i * SplatData.RowLength + 12, 3);\n            const rgba = new Uint8ClampedArray(buffer, i * SplatData.RowLength + 24, 4);\n            const rot = new Uint8ClampedArray(buffer, i * SplatData.RowLength + 28, 4);\n\n            let r0: number = 255;\n            let r1: number = 0;\n            let r2: number = 0;\n            let r3: number = 0;\n\n            properties.forEach((property) => {\n                let value;\n                switch (property.type) {\n                    case \"float\":\n                        value = dataView.getFloat32(property.offset + i * rowOffset, true);\n                        break;\n                    case \"int\":\n                        value = dataView.getInt32(property.offset + i * rowOffset, true);\n                        break;\n                    default:\n                        throw new Error(`Unsupported property type: ${property.type}`);\n                }\n\n                switch (property.name) {\n                    case \"x\":\n                        position[0] = value;\n                        break;\n                    case \"y\":\n                        position[1] = value;\n                        break;\n                    case \"z\":\n                        position[2] = value;\n                        break;\n                    case \"scale_0\":\n                    case \"scaling_0\":\n                        scale[0] = Math.exp(value);\n                        break;\n                    case \"scale_1\":\n                    case \"scaling_1\":\n                        scale[1] = Math.exp(value);\n                        break;\n                    case \"scale_2\":\n                    case \"scaling_2\":\n                        scale[2] = Math.exp(value);\n                        break;\n                    case \"red\":\n                        rgba[0] = value;\n                        break;\n                    case \"green\":\n                        rgba[1] = value;\n                        break;\n                    case \"blue\":\n                        rgba[2] = value;\n                        break;\n                    case \"f_dc_0\":\n                    case \"features_0\":\n                        rgba[0] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_1\":\n                    case \"features_1\":\n                        rgba[1] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_2\":\n                    case \"features_2\":\n                        rgba[2] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_3\":\n                        rgba[3] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"opacity\":\n                    case \"opacity_0\":\n                        rgba[3] = (1 / (1 + Math.exp(-value))) * 255;\n                        break;\n                    case \"rot_0\":\n                    case \"rotation_0\":\n                        r0 = value;\n                        break;\n                    case \"rot_1\":\n                    case \"rotation_1\":\n                        r1 = value;\n                        break;\n                    case \"rot_2\":\n                    case \"rotation_2\":\n                        r2 = value;\n                        break;\n                    case \"rot_3\":\n                    case \"rotation_3\":\n                        r3 = value;\n                        break;\n                }\n            });\n\n            let q = new Quaternion(r1, r2, r3, r0);\n\n            switch (format) {\n                case \"polycam\": {\n                    const temp = position[1];\n                    position[1] = -position[2];\n                    position[2] = temp;\n                    q = q_polycam.multiply(q);\n                    break;\n                }\n                case \"\":\n                    break;\n                default:\n                    throw new Error(`Unsupported format: ${format}`);\n            }\n\n            q = q.normalize();\n            rot[0] = q.w * 128 + 128;\n            rot[1] = q.x * 128 + 128;\n            rot[2] = q.y * 128 + 128;\n            rot[3] = q.z * 128 + 128;\n        }\n\n        return buffer;\n    }\n}\n\nexport { PLYLoader };\n","import { Camera } from \"../cameras/Camera\";\nimport type { Scene } from \"../core/Scene\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Splatv } from \"../splats/Splatv\";\nimport { SplatvData } from \"../splats/SplatvData\";\nimport { initiateFetchRequest, loadRequestDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass SplatvLoader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        camera: Camera | null,\n        onProgress?: (progress: number) => void,\n        useCache: boolean = false,\n    ): Promise<Splatv> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const buffer = await loadRequestDataIntoBuffer(res, onProgress);\n        return this._ParseSplatvBuffer(buffer.buffer, scene, camera);\n    }\n\n    static async LoadFromFileAsync(\n        file: File,\n        scene: Scene,\n        camera: Camera | null,\n        onProgress?: (progress: number) => void,\n    ): Promise<Splatv> {\n        const reader = new FileReader();\n        let splatv: Splatv | null = null;\n        reader.onload = (e) => {\n            splatv = this._ParseSplatvBuffer(e.target!.result as ArrayBuffer, scene, camera);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        if (!splatv) {\n            throw new Error(\"Failed to load splatv file\");\n        }\n        return splatv;\n    }\n\n    private static _ParseSplatvBuffer(inputBuffer: ArrayBuffer, scene: Scene, camera: Camera | null): Splatv {\n        let result: Splatv | null = null;\n\n        const handleChunk = (\n            chunk: { size: number; type: string; texwidth: number; texheight: number },\n            buffer: Uint8Array,\n            chunks: { size: number; type: string }[],\n        ) => {\n            if (chunk.type === \"magic\") {\n                const intView = new Int32Array(buffer.buffer);\n                if (intView[0] !== 0x674b) {\n                    throw new Error(\"Invalid splatv file\");\n                }\n                chunks.push({ size: intView[1], type: \"chunks\" });\n            } else if (chunk.type === \"chunks\") {\n                const splatChunks = JSON.parse(new TextDecoder(\"utf-8\").decode(buffer));\n                if (splatChunks.length == 0) {\n                    throw new Error(\"Invalid splatv file\");\n                } else if (splatChunks.length > 1) {\n                    console.warn(\"Splatv file contains more than one chunk, only the first one will be loaded\");\n                }\n                const chunk = splatChunks[0];\n                const cameras = chunk.cameras as { position: number[]; rotation: number[][] }[];\n                if (camera && cameras && cameras.length) {\n                    const cameraData = cameras[0];\n                    const position = new Vector3(\n                        cameraData.position[0],\n                        cameraData.position[1],\n                        cameraData.position[2],\n                    );\n                    const rotation = Quaternion.FromMatrix3(\n                        new Matrix3(\n                            cameraData.rotation[0][0],\n                            cameraData.rotation[0][1],\n                            cameraData.rotation[0][2],\n                            cameraData.rotation[1][0],\n                            cameraData.rotation[1][1],\n                            cameraData.rotation[1][2],\n                            cameraData.rotation[2][0],\n                            cameraData.rotation[2][1],\n                            cameraData.rotation[2][2],\n                        ),\n                    );\n                    camera.position = position;\n                    camera.rotation = rotation;\n                }\n                chunks.push(chunk);\n            } else if (chunk.type === \"splat\") {\n                const data = SplatvData.Deserialize(buffer, chunk.texwidth, chunk.texheight);\n                const splatv = new Splatv(data);\n                scene.addObject(splatv);\n                result = splatv;\n            }\n        };\n\n        const ubuf = new Uint8Array(inputBuffer);\n        const chunks: { size: number; type: string; texwidth: number; texheight: number }[] = [\n            { size: 8, type: \"magic\", texwidth: 0, texheight: 0 },\n        ];\n        let chunk: { size: number; type: string; texwidth: number; texheight: number } | undefined = chunks.shift();\n        let buffer = new Uint8Array(chunk!.size);\n        let offset = 0;\n        let inputOffset = 0;\n        while (chunk) {\n            while (offset < chunk.size) {\n                const sizeToRead = Math.min(chunk.size - offset, ubuf.length - inputOffset);\n                buffer.set(ubuf.subarray(inputOffset, inputOffset + sizeToRead), offset);\n                offset += sizeToRead;\n                inputOffset += sizeToRead;\n            }\n            handleChunk(chunk, buffer, chunks);\n            if (result) {\n                return result;\n            }\n            chunk = chunks.shift();\n            if (chunk) {\n                buffer = new Uint8Array(chunk.size);\n                offset = 0;\n            }\n        }\n\n        throw new Error(\"Invalid splatv file\");\n    }\n}\n\nexport { SplatvLoader };\n","\nvar loadWasm = (() => {\n  var _scriptDir = import.meta.url;\n  \n  return (\nfunction(moduleArg = {}) {\n\nvar Module=moduleArg;var readyPromiseResolve,readyPromiseReject;var readyPromise=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram=\"./this.program\";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=true;var scriptDirectory=\"\";var read_,readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.startsWith(\"blob:\")){scriptDirectory=\"\"}else{scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];function intArrayFromBase64(s){var decoded=atob(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var wasmMemory;var ABORT=false;var EXITSTATUS;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module[\"HEAP8\"]=HEAP8=new Int8Array(b);Module[\"HEAP16\"]=HEAP16=new Int16Array(b);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(b);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(b);Module[\"HEAP32\"]=HEAP32=new Int32Array(b);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(b);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(b);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(b)}var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;Module[\"monitorRunDependencies\"]?.(runDependencies)}function removeRunDependency(id){runDependencies--;Module[\"monitorRunDependencies\"]?.(runDependencies);if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){Module[\"onAbort\"]?.(what);what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -sASSERTIONS for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";var isDataURI=filename=>filename.startsWith(dataURIPrefix);var wasmBinaryFile;wasmBinaryFile=\"data:application/octet-stream;base64,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X19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAADAYAABgEAAAQBAAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAADAYAAEgEAAA8BAAATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAADAYAAHgEAAA8BAAATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UADAYAAKgEAACcBAAAAAAAABwFAAABAAAAAgAAAAMAAAAEAAAABQAAAE4xMF9fY3h4YWJpdjEyM19fZnVuZGFtZW50YWxfdHlwZV9pbmZvRQAMBgAA9AQAADwEAAB2AAAA4AQAACgFAABiAAAA4AQAADQFAABjAAAA4AQAAEAFAABoAAAA4AQAAEwFAABhAAAA4AQAAFgFAABzAAAA4AQAAGQFAAB0AAAA4AQAAHAFAABpAAAA4AQAAHwFAABqAAAA4AQAAIgFAABsAAAA4AQAAJQFAABtAAAA4AQAAKAFAAB4AAAA4AQAAKwFAAB5AAAA4AQAALgFAABmAAAA4AQAAMQFAABkAAAA4AQAANAFAAAAAAAAbAQAAAEAAAAGAAAAAwAAAAQAAAAHAAAACAAAAAkAAAAKAAAAAAAAAFQGAAABAAAACwAAAAMAAAAEAAAABwAAAAwAAAANAAAADgAAAE4xMF9fY3h4YWJpdjEyMF9fc2lfY2xhc3NfdHlwZV9pbmZvRQAAAAAMBgAALAYAAGwEAAB1bnNpZ25lZCBzaG9ydAB1bnNpZ25lZCBpbnQAZmxvYXQAdWludDY0X3QAdW5zaWduZWQgY2hhcgBib29sAHVuc2lnbmVkIGxvbmcAc3RkOjp3c3RyaW5nAHN0ZDo6c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAGRvdWJsZQB2b2lkAGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBzaG9ydD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50NjRfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50NjRfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGNoYXI+AHN0ZDo6YmFzaWNfc3RyaW5nPHVuc2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNpZ25lZCBjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxsb25nPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBsb25nPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AE5TdDNfXzIxMmJhc2ljX3N0cmluZ0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVOU185YWxsb2NhdG9ySWNFRUVFAAAAAOQFAACSCQAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWhOU18xMWNoYXJfdHJhaXRzSWhFRU5TXzlhbGxvY2F0b3JJaEVFRUUAAOQFAADcCQAATlN0M19fMjEyYmFzaWNfc3RyaW5nSXdOU18xMWNoYXJfdHJhaXRzSXdFRU5TXzlhbGxvY2F0b3JJd0VFRUUAAOQFAAAkCgAATlN0M19fMjEyYmFzaWNfc3RyaW5nSURzTlNfMTFjaGFyX3RyYWl0c0lEc0VFTlNfOWFsbG9jYXRvcklEc0VFRUUAAADkBQAAbAoAAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0lEaU5TXzExY2hhcl90cmFpdHNJRGlFRU5TXzlhbGxvY2F0b3JJRGlFRUVFAAAA5AUAALgKAABOMTBlbXNjcmlwdGVuM3ZhbEUAAOQFAAAECwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJY0VFAADkBQAAIAsAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWFFRQAA5AUAAEgLAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0loRUUAAOQFAABwCwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJc0VFAADkBQAAmAsAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXRFRQAA5AUAAMALAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lpRUUAAOQFAADoCwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJakVFAADkBQAAEAwAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWxFRQAA5AUAADgMAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ltRUUAAOQFAABgDAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJeEVFAADkBQAAiAwAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXlFRQAA5AUAALAMAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lmRUUAAOQFAADYDAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZEVFAADkBQAAAA0AQagaCwMwDwE=\";function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}throw\"both async and sync fetching of the wasm failed\"}function getBinaryPromise(binaryFile){return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){return instantiateArrayBuffer(binaryFile,imports,callback)}function createWasm(){var info={\"a\":wasmImports};function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports[\"k\"];updateMemoryViews();addOnInit(wasmExports[\"l\"]);removeRunDependency(\"wasm-instantiate\");return wasmExports}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);readyPromiseReject(e)}}instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult).catch(readyPromiseReject);return{}}var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};var noExitRuntime=Module[\"noExitRuntime\"]||true;var __embind_register_bigint=(primitiveType,name,size,minRange,maxRange)=>{};var embind_init_charCodes=()=>{var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes};var embind_charCodes;var readLatin1String=ptr=>{var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret};var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var BindingError;var throwBindingError=message=>{throw new BindingError(message)};var InternalError;function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(!rawType){throwBindingError(`type \"${name}\" must have a positive integer typeid pointer`)}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(`Cannot register type '${name}' twice`)}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function registerType(rawType,registeredInstance,options={}){if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}return sharedRegisterType(rawType,registeredInstance,options)}var GenericWireTypeSize=8;var __embind_register_bool=(rawType,name,trueValue,falseValue)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":function(pointer){return this[\"fromWireType\"](HEAPU8[pointer])},destructorFunction:null})};var emval_freelist=[];var emval_handles=[];var __emval_decref=handle=>{if(handle>9&&0===--emval_handles[handle+1]){emval_handles[handle]=undefined;emval_freelist.push(handle)}};var count_emval_handles=()=>emval_handles.length/2-5-emval_freelist.length;var init_emval=()=>{emval_handles.push(0,1,undefined,1,null,1,true,1,false,1);Module[\"count_emval_handles\"]=count_emval_handles};var Emval={toValue:handle=>{if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handles[handle]},toHandle:value=>{switch(value){case undefined:return 2;case null:return 4;case true:return 6;case false:return 8;default:{const handle=emval_freelist.pop()||emval_handles.length;emval_handles[handle]=value;emval_handles[handle+1]=1;return handle}}}};function readPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}var EmValType={name:\"emscripten::val\",\"fromWireType\":handle=>{var rv=Emval.toValue(handle);__emval_decref(handle);return rv},\"toWireType\":(destructors,value)=>Emval.toHandle(value),\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":readPointer,destructorFunction:null};var __embind_register_emval=rawType=>registerType(rawType,EmValType);var floatReadValueFromPointer=(name,width)=>{switch(width){case 4:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 8:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(`invalid float width (${width}): ${name}`)}};var __embind_register_float=(rawType,name,size)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":value=>value,\"toWireType\":(destructors,value)=>value,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":floatReadValueFromPointer(name,size),destructorFunction:null})};var integerReadValueFromPointer=(name,width,signed)=>{switch(width){case 1:return signed?pointer=>HEAP8[pointer]:pointer=>HEAPU8[pointer];case 2:return signed?pointer=>HEAP16[pointer>>1]:pointer=>HEAPU16[pointer>>1];case 4:return signed?pointer=>HEAP32[pointer>>2]:pointer=>HEAPU32[pointer>>2];default:throw new TypeError(`invalid integer width (${width}): ${name}`)}};var __embind_register_integer=(primitiveType,name,size,minRange,maxRange)=>{name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes(\"unsigned\");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":toWireType,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":integerReadValueFromPointer(name,size,minRange!==0),destructorFunction:null})};var __embind_register_memory_view=(rawType,dataTypeIndex,name)=>{var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){var size=HEAPU32[handle>>2];var data=HEAPU32[handle+4>>2];return new TA(HEAP8.buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})};var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx};var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var UTF8Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf8\"):undefined;var UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str=\"\";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var UTF8ToString=(ptr,maxBytesToRead)=>ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\";var __embind_register_std_string=(rawType,name)=>{name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\"(value){var length=HEAPU32[value>>2];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[payload+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\"(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value==\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;HEAPU32[base>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+i]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":readPointer,destructorFunction(ptr){_free(ptr)}})};var UTF16Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;var UTF16ToString=(ptr,maxBytesToRead)=>{var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr));var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str};var stringToUTF16=(str,outPtr,maxBytesToWrite)=>{maxBytesToWrite??=2147483647;if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr};var lengthBytesUTF16=str=>str.length*2;var UTF32ToString=(ptr,maxBytesToRead)=>{var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str};var stringToUTF32=(str,outPtr,maxBytesToWrite)=>{maxBytesToWrite??=2147483647;if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr};var lengthBytesUTF32=str=>{var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len};var __embind_register_std_wstring=(rawType,charSize,name)=>{name=readLatin1String(name);var decodeString,encodeString,readCharAt,lengthBytesUTF;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;readCharAt=pointer=>HEAPU16[pointer>>1]}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;readCharAt=pointer=>HEAPU32[pointer>>2]}registerType(rawType,{name:name,\"fromWireType\":value=>{var length=HEAPU32[value>>2];var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||readCharAt(currentBytePtr)==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},\"toWireType\":(destructors,value)=>{if(!(typeof value==\"string\")){throwBindingError(`Cannot pass non-string to C++ string type ${name}`)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length/charSize;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":readPointer,destructorFunction(ptr){_free(ptr)}})};var __embind_register_void=(rawType,name)=>{name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":()=>undefined,\"toWireType\":(destructors,o)=>undefined})};var getHeapMax=()=>2147483648;var growMemory=size=>{var b=wasmMemory.buffer;var pages=(size-b.byteLength+65535)/65536;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}var alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false};embind_init_charCodes();BindingError=Module[\"BindingError\"]=class BindingError extends Error{constructor(message){super(message);this.name=\"BindingError\"}};InternalError=Module[\"InternalError\"]=class InternalError extends Error{constructor(message){super(message);this.name=\"InternalError\"}};init_emval();var wasmImports={f:__embind_register_bigint,h:__embind_register_bool,g:__embind_register_emval,e:__embind_register_float,b:__embind_register_integer,a:__embind_register_memory_view,d:__embind_register_std_string,c:__embind_register_std_wstring,i:__embind_register_void,j:_emscripten_resize_heap};var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports[\"l\"])();var ___getTypeName=a0=>(___getTypeName=wasmExports[\"__getTypeName\"])(a0);var _pack=Module[\"_pack\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)=>(_pack=Module[\"_pack\"]=wasmExports[\"m\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);var _malloc=Module[\"_malloc\"]=a0=>(_malloc=Module[\"_malloc\"]=wasmExports[\"o\"])(a0);var _free=Module[\"_free\"]=a0=>(_free=Module[\"_free\"]=wasmExports[\"p\"])(a0);var __emscripten_stack_restore=a0=>(__emscripten_stack_restore=wasmExports[\"_emscripten_stack_restore\"])(a0);var __emscripten_stack_alloc=a0=>(__emscripten_stack_alloc=wasmExports[\"_emscripten_stack_alloc\"])(a0);var _emscripten_stack_get_current=()=>(_emscripten_stack_get_current=wasmExports[\"emscripten_stack_get_current\"])();var ___cxa_is_pointer_type=a0=>(___cxa_is_pointer_type=wasmExports[\"__cxa_is_pointer_type\"])(a0);var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n\n\n  return readyPromise\n}\n);\n})();\nexport default loadWasm;","import { Scene } from \"../../../core/Scene\";\nimport { Splat } from \"../../../splats/Splat\";\nimport DataWorker from \"web-worker:./DataWorker.ts\";\nimport loadWasm from \"../../../wasm/data\";\nimport { Matrix4 } from \"../../../math/Matrix4\";\nimport {SingleSplat} from \"../../../splats/SingleSplat\";\n\nclass RenderData {\n    public dataChanged = false;\n    public transformsChanged = false;\n    public colorTransformsChanged = false;\n\n    private _splatIndices: Map<Splat, number>;\n    private _singleSplatIndices: Map<SingleSplat, number>;\n    private _offsets: Map<Splat, number>;\n    private _singleOffsets: Map<SingleSplat, number>;\n    private _data: Uint32Array;\n    private _width: number;\n    private _height: number;\n    private _transforms: Float32Array;\n    private _transformsWidth: number;\n    private _transformsHeight: number;\n    private _transformIndices: Uint32Array;\n    private _transformIndicesWidth: number;\n    private _transformIndicesHeight: number;\n    private _colorTransforms: Float32Array;\n    private _colorTransformsWidth: number;\n    private _colorTransformsHeight: number;\n    private _colorTransformIndices: Uint32Array;\n    private _colorTransformIndicesWidth: number;\n    private _colorTransformIndicesHeight: number;\n    private _positions: Float32Array;\n    private _rotations: Float32Array;\n    private _scales: Float32Array;\n    private _vertexCount: number;\n    private _updating: Set<Splat> = new Set<Splat>();\n    private _dirty: Set<Splat> = new Set<Splat>();\n    private _worker: Worker;\n    \n    private _renderedSplats: number;\n    \n    getSplat: (index: number) => Splat | null;\n    getLocalIndex: (splat: Splat, index: number) => number;\n    markDirty: (splat: Splat) => void;\n    rebuild: () => void;\n    dispose: () => void;\n\n    constructor(scene: Scene) {\n        let vertexCount = 0;\n        let splatIndex = 0;\n        this._splatIndices = new Map<Splat, number>();\n        this._singleSplatIndices = new Map<SingleSplat, number>();\n        this._offsets = new Map<Splat, number>();\n        this._singleOffsets = new Map<SingleSplat, number>();\n        const lookup = new Map<number, Splat>();\n        const singlelookup = new Map<number, SingleSplat>();\n        for (const object of scene.objects) {\n            if (object instanceof Splat) {\n                this._splatIndices.set(object, splatIndex);\n                this._offsets.set(object, vertexCount);\n                lookup.set(vertexCount, object);\n                vertexCount += object.splatCount;\n                splatIndex++;\n                \n                for(let singleSplat of object.splats) {\n                    this._singleSplatIndices.set(singleSplat, splatIndex);\n                    this._singleOffsets.set(singleSplat, splatIndex);\n                    singlelookup.set(vertexCount, singleSplat);\n                    splatIndex++;\n                }\n            }\n        }\n\n        this._vertexCount = vertexCount;\n        this._renderedSplats = vertexCount;\n        this._width = 2048;\n        this._height = Math.ceil((2 * this.vertexCount) / this.width);\n        this._data = new Uint32Array(this.width * this.height * 4);\n\n        this._transformsWidth = 5;\n        this._transformsHeight = lookup.size;\n        this._transforms = new Float32Array(this._transformsWidth * this._transformsHeight * 4);\n\n        this._transformIndicesWidth = 1024;\n        this._transformIndicesHeight = Math.ceil(this.vertexCount / this._transformIndicesWidth);\n        this._transformIndices = new Uint32Array(this._transformIndicesWidth * this._transformIndicesHeight);\n\n        this._colorTransformsWidth = 4;\n        this._colorTransformsHeight = 64;\n        this._colorTransforms = new Float32Array(this._colorTransformsWidth * this._colorTransformsHeight * 4);\n        this._colorTransforms.fill(0);\n        this._colorTransforms[0] = 1;\n        this._colorTransforms[5] = 1;\n        this._colorTransforms[10] = 1;\n        this._colorTransforms[15] = 1;\n\n        this._colorTransformIndicesWidth = 1024;\n        this._colorTransformIndicesHeight = Math.ceil(this.vertexCount / this._colorTransformIndicesWidth);\n        this._colorTransformIndices = new Uint32Array(\n            this._colorTransformIndicesWidth * this._colorTransformIndicesHeight,\n        );\n        this.colorTransformIndices.fill(0);\n\n        this._positions = new Float32Array(this.vertexCount * 3);\n        this._rotations = new Float32Array(this.vertexCount * 4);\n        this._scales = new Float32Array(this.vertexCount * 3);\n\n        this._worker = new DataWorker();\n\n        const updateRenderData = (splat: Splat) => {\n            this._renderedSplats = splat.data.renderedSplats;\n            this._height = Math.ceil((2 * this._renderedSplats) / this.width);\n            this._data = new Uint32Array(this.width * this.height * 4);\n\n            this._transformIndicesWidth = 1024;\n            this._transformIndicesHeight = Math.ceil(this._renderedSplats / this._transformIndicesWidth);\n            this._transformIndices = new Uint32Array(this._transformIndicesWidth * this._transformIndicesHeight);\n\n            this._colorTransformIndicesWidth = 1024;\n            this._colorTransformIndicesHeight = Math.ceil(this._renderedSplats / this._colorTransformIndicesWidth);\n            this._colorTransformIndices = new Uint32Array(\n                this._colorTransformIndicesWidth * this._colorTransformIndicesHeight,\n            );\n            this.colorTransformIndices.fill(0);\n\n            this._positions = new Float32Array(this._renderedSplats * 3);\n            this._rotations = new Float32Array(this._renderedSplats * 4);\n            this._scales = new Float32Array(this._renderedSplats * 3);\n        }\n        const updateTransform = (splat: Splat) => {\n            const splatIndex = this._splatIndices.get(splat) as number;\n            this._transforms.set(splat.transform.buffer, splatIndex * 20);\n            this._transforms[splatIndex * 20 + 16] = splat.selected ? 1 : 0;\n            splat.positionChanged = false;\n            splat.rotationChanged = false;\n            splat.scaleChanged = false;\n            splat.selectedChanged = false;\n            this.transformsChanged = true;\n        };\n\n        const updateColorTransforms = () => {\n            let colorTransformsChanged = false;\n            for (const splat of this._splatIndices.keys()) {\n                if (splat.colorTransformChanged) {\n                    colorTransformsChanged = true;\n                    break;\n                }\n            }\n            if (!colorTransformsChanged) {\n                return;\n            }\n            const colorTransformsMap: Matrix4[] = [new Matrix4()];\n            this._colorTransformIndices.fill(0);\n            let i = 1;\n            for (const splat of this._splatIndices.keys()) {\n                const offset = this._offsets.get(splat) as number;\n                for (const colorTransform of splat.colorTransforms) {\n                    if (!colorTransformsMap.includes(colorTransform)) {\n                        colorTransformsMap.push(colorTransform);\n                        i++;\n                    }\n                }\n                for (const index of splat.colorTransformsMap.keys()) {\n                    const colorTransformIndex = splat.colorTransformsMap.get(index) as number;\n                    this._colorTransformIndices[index + offset] = colorTransformIndex + i - 1;\n                }\n                splat.colorTransformChanged = false;\n            }\n            for (let index = 0; index < colorTransformsMap.length; index++) {\n                const colorTransform = colorTransformsMap[index];\n                this._colorTransforms.set(colorTransform.buffer, index * 16);\n            }\n            this.colorTransformsChanged = true;\n        };\n\n        this._worker.onmessage = (e) => {\n            if (e.data.response) {\n                const response = e.data.response;\n                const splat = lookup.get(response.offset) as Splat;\n                updateTransform(splat);\n                updateColorTransforms();\n\n                const renderedFrame = new Uint8Array(response.rendered);\n                let renderedCount = 0;\n                for (let i = 0; i < response.vertexCount; i++) {\n                    if (renderedFrame[i] === 1) {\n                        renderedCount++;\n                    }\n                }\n\n                const splatIndex = this._splatIndices.get(splat) as number;\n                for (let i = 0; i < splat.splatCount; i++) {\n                    this._transformIndices[response.offset + i] = splatIndex;\n                }\n                \n                // console.log(\"this._data: \" +this._data.length)\n                // console.log(\"response.data: \" + response.data.length)\n                // console.log(\"response.offset: \" + response.offset)\n                this._data.set(response.data, response.offset * 8);\n                splat.data.reattach(\n                    response.positions,\n                    response.rotations,\n                    response.scales,\n                    response.colors,\n                    response.selection,\n                    response.rendered,\n                );\n\n                this._positions.set(response.worldPositions, response.offset * 3);\n                this._rotations.set(response.worldRotations, response.offset * 4);\n                this._scales.set(response.worldScales, response.offset * 3);\n\n                this._updating.delete(splat);\n\n                splat.selectedChanged = false;\n                splat.renderNumberChanged = false;\n\n                this.dataChanged = true;\n            }\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let wasmModule: any;\n\n        async function initWasm() {\n            wasmModule = await loadWasm();\n        }\n\n        initWasm();\n\n        async function waitForWasm() {\n            while (!wasmModule) {\n                await new Promise((resolve) => setTimeout(resolve, 0));\n            }\n        }\n\n        const buildImmediate = (splat: Splat) => {\n            if (!wasmModule) {\n                waitForWasm().then(() => {\n                    buildImmediate(splat);\n                });\n                return;\n            }\n\n            updateTransform(splat);\n\n            const positionsPtr = wasmModule._malloc(3 * splat.data.renderedSplats * 4);\n            const rotationsPtr = wasmModule._malloc(4 * splat.data.renderedSplats * 4);\n            const scalesPtr = wasmModule._malloc(3 * splat.data.renderedSplats * 4);\n            const colorsPtr = wasmModule._malloc(4 * splat.data.renderedSplats);\n            const selectionPtr = wasmModule._malloc(splat.data.renderedSplats);\n            const renderedPtr = wasmModule._malloc(splat.splatCount)\n            const dataPtr = wasmModule._malloc(8 * splat.data.renderedSplats * 4);\n            const worldPositionsPtr = wasmModule._malloc(3 * splat.splatCount * 4);\n            const worldRotationsPtr = wasmModule._malloc(4 * splat.splatCount * 4);\n            const worldScalesPtr = wasmModule._malloc(3 * splat.splatCount * 4);\n            \n\n            wasmModule.HEAPF32.set(splat.Positions, positionsPtr / 4);\n            wasmModule.HEAPF32.set(splat.Rotations, rotationsPtr / 4);\n            wasmModule.HEAPF32.set(splat.Scales, scalesPtr / 4);\n            wasmModule.HEAPU8.set(splat.Colors, colorsPtr);\n            wasmModule.HEAPU8.set(splat.Selections, selectionPtr);\n            wasmModule.HEAPU8.set(splat.Rendered, renderedPtr);\n\n            wasmModule._pack(\n                splat.selected,\n                splat.splatCount,\n                positionsPtr,\n                rotationsPtr,\n                scalesPtr,\n                colorsPtr,\n                selectionPtr,\n                renderedPtr,\n                dataPtr,\n                worldPositionsPtr,\n                worldRotationsPtr,\n                worldScalesPtr,\n            );\n\n            const outData = new Uint32Array(wasmModule.HEAPU32.buffer, dataPtr, splat.data.renderedSplats * 8);\n            const worldPositions = new Float32Array(\n                wasmModule.HEAPF32.buffer,\n                worldPositionsPtr,\n                splat.splatCount * 3,\n            );\n            const worldRotations = new Float32Array(\n                wasmModule.HEAPF32.buffer,\n                worldRotationsPtr,\n                splat.splatCount * 4,\n            );\n            const worldScales = new Float32Array(wasmModule.HEAPF32.buffer, worldScalesPtr, splat.splatCount * 3);\n\n            const splatIndex = this._splatIndices.get(splat) as number;\n            const offset = this._offsets.get(splat) as number;\n            for (let i = 0; i < splat.splatCount; i++) {\n                this._transformIndices[offset + i] = splatIndex;\n            }\n            this._data.set(outData, offset * 8);\n            this._positions.set(worldPositions, offset * 3);\n            this._rotations.set(worldRotations, offset * 4);\n            this._scales.set(worldScales, offset * 3);\n\n            wasmModule._free(positionsPtr);\n            wasmModule._free(rotationsPtr);\n            wasmModule._free(scalesPtr);\n            wasmModule._free(colorsPtr);\n            wasmModule._free(selectionPtr);\n            wasmModule._free(renderedPtr);\n            wasmModule._free(dataPtr);\n            wasmModule._free(worldPositionsPtr);\n            wasmModule._free(worldRotationsPtr);\n            wasmModule._free(worldScalesPtr);\n            \n\n            this.dataChanged = true;\n            this.colorTransformsChanged = true;\n        };\n\n        const build = (splat: Splat) => {\n            \n            if (splat.positionChanged || splat.rotationChanged || splat.scaleChanged || splat.selectedChanged) {\n                updateTransform(splat);\n            }\n            \n            if(splat.renderNumberChanged) {\n                splat.data.calculateRenderedTransforms();\n                updateRenderData(splat);\n                splat.renderNumberChanged = false;\n            }\n\n            if (splat.colorTransformChanged) {\n                updateColorTransforms();\n            }\n            \n            if (!splat.data.changed || splat.data.detached || splat.renderNumberChanged) return;\n            \n            const serializedSplat = {\n                position: new Float32Array(splat.position.flat()),\n                rotation: new Float32Array(splat.rotation.flat()),\n                scale: new Float32Array(splat.scale.flat()),\n                selected: splat.selected,\n                vertexCount: splat.splatCount,\n                positions: splat.Positions,\n                rotations: splat.Rotations,\n                scales: splat.Scales,\n                colors: splat.Colors,\n                selection: splat.Selections,\n                rendered: splat.Rendered,\n                offset: this._offsets.get(splat) as number,\n            };\n            \n            this._worker.postMessage(\n                {\n                    splat: serializedSplat,\n                },\n                [\n                    serializedSplat.position.buffer,\n                    serializedSplat.rotation.buffer,\n                    serializedSplat.scale.buffer,\n                    serializedSplat.positions.buffer,\n                    serializedSplat.rotations.buffer,\n                    serializedSplat.scales.buffer,\n                    serializedSplat.colors.buffer,\n                    serializedSplat.selection.buffer,\n                    serializedSplat.rendered.buffer,\n                ],\n            );\n\n            this._updating.add(splat);\n\n            splat.data.detached = true;\n        };\n\n        this.getSplat = (index: number) => {\n            let splat = null;\n            for (const [key, value] of this._offsets) {\n                if (index >= value) {\n                    splat = key;\n                } else {\n                    break;\n                }\n            }\n            return splat;\n        };\n\n        this.getLocalIndex = (splat: Splat, index: number) => {\n            const offset = this._offsets.get(splat) as number;\n            return index - offset;\n        };\n\n        this.markDirty = (splat: Splat) => {\n            this._dirty.add(splat);\n        };\n\n        this.rebuild = () => {\n            for (const splat of this._dirty) {\n                build(splat);\n            }\n\n            this._dirty.clear();\n        };\n\n        this.dispose = () => {\n            this._worker.terminate();\n        };\n\n        for (const splat of this._splatIndices.keys()) {\n            buildImmediate(splat);\n        }\n\n        updateColorTransforms();\n    }\n    \n    get offsets() {\n        return this._offsets;\n    }\n\n    get singleOffsets() {\n        return this._singleOffsets;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get transforms() {\n        return this._transforms;\n    }\n\n    get transformsWidth() {\n        return this._transformsWidth;\n    }\n\n    get transformsHeight() {\n        return this._transformsHeight;\n    }\n\n    get transformIndices() {\n        return this._transformIndices;\n    }\n\n    get transformIndicesWidth() {\n        return this._transformIndicesWidth;\n    }\n\n    get transformIndicesHeight() {\n        return this._transformIndicesHeight;\n    }\n\n    get colorTransforms() {\n        return this._colorTransforms;\n    }\n\n    get colorTransformsWidth() {\n        return this._colorTransformsWidth;\n    }\n\n    get colorTransformsHeight() {\n        return this._colorTransformsHeight;\n    }\n\n    get colorTransformIndices() {\n        return this._colorTransformIndices;\n    }\n\n    get colorTransformIndicesWidth() {\n        return this._colorTransformIndicesWidth;\n    }\n\n    get colorTransformIndicesHeight() {\n        return this._colorTransformIndicesHeight;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get rotations() {\n        return this._rotations;\n    }\n\n    get scales() {\n        return this._scales;\n    }\n\n    get vertexCount() {\n        return this._renderedSplats;\n    }\n\n    get needsRebuild() {\n        return this._dirty.size > 0;\n    }\n\n    get updating() {\n        return this._updating.size > 0;\n    }\n}\n\nexport { RenderData };\n","class Color32 {\n    public readonly r: number;\n    public readonly g: number;\n    public readonly b: number;\n    public readonly a: number;\n\n    constructor(r: number = 0, g: number = 0, b: number = 0, a: number = 255) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    flat(): number[] {\n        return [this.r, this.g, this.b, this.a];\n    }\n\n    flatNorm(): number[] {\n        return [this.r / 255, this.g / 255, this.b / 255, this.a / 255];\n    }\n\n    toHexString(): string {\n        return (\n            \"#\" +\n            this.flat()\n                .map((x) => x.toString(16).padStart(2, \"0\"))\n                .join(\"\")\n        );\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Color32 };\n","import SortWorker from \"web-worker:../utils/SortWorker.ts\";\n\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\nimport { RenderData } from \"../utils/RenderData\";\nimport { Color32 } from \"../../../math/Color32\";\nimport {\n    ObjectAddedEvent,\n    ObjectChangedEvent,\n    ObjectRemovedEvent,\n    RenderedSplatsChangedEvent\n} from \"../../../events/Events\";\nimport { Splat } from \"../../../splats/Splat\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { Scene } from \"../../../core/Scene\"\n\nconst vertexShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n`;\n\nconst fragmentShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n`;\n\nclass RenderProgram extends ShaderProgram {\n    private _outlineThickness: number = 10.0;\n    private _outlineColor: Color32 = new Color32(255, 165, 0, 255);\n    private _renderData: RenderData | null = null;\n    private _depthIndex: Uint32Array = new Uint32Array();\n    private _splatTexture: WebGLTexture | null = null;\n    private _worker: Worker | null = null;\n\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    private _setOutlineThickness: (value: number) => void;\n    private _setOutlineColor: (value: Color32) => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        super(renderer, passes);\n\n        const canvas = renderer.canvas;\n        const gl = renderer.gl;\n\n        let u_projection: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n        let u_focal: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_texture: WebGLUniformLocation;\n        let u_transforms: WebGLUniformLocation;\n        let u_transformIndices: WebGLUniformLocation;\n        let u_colorTransforms: WebGLUniformLocation;\n        let u_colorTransformIndices: WebGLUniformLocation;\n\n        let u_outlineThickness: WebGLUniformLocation;\n        let u_outlineColor: WebGLUniformLocation;\n\n        let positionAttribute: number;\n        let indexAttribute: number;\n\n        let transformsTexture: WebGLTexture;\n        let transformIndicesTexture: WebGLTexture;\n\n        let colorTransformsTexture: WebGLTexture;\n        let colorTransformIndicesTexture: WebGLTexture;\n\n        let vertexBuffer: WebGLBuffer;\n        let indexBuffer: WebGLBuffer;\n\n        this._resize = () => {\n            if (!this._camera) return;\n\n            this._camera.data.setSize(canvas.width, canvas.height);\n            this._camera.update();\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n            gl.uniform2fv(u_viewport, new Float32Array([canvas.width, canvas.height]));\n        };\n\n        const createWorker = () => {\n            this._worker = new SortWorker();\n            this._worker.onmessage = (e) => {\n                if (e.data.depthIndex) {\n                    const { depthIndex } = e.data;\n                    this._depthIndex = depthIndex;\n                    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n                    gl.bufferData(gl.ARRAY_BUFFER, depthIndex, gl.STATIC_DRAW);\n                }\n            };\n        };\n\n        this._initialize = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            this._resize();\n            \n            this._scene.addEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.addEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splat) {\n                    object.addEventListener(\"objectChanged\", handleObjectChanged);\n                    object.addEventListener(\"renderedSplatsChanged\", handleRenderedSplatsChanged);\n                }\n            }\n\n            this._renderData = new RenderData(this._scene);\n\n            u_focal = gl.getUniformLocation(this.program, \"focal\") as WebGLUniformLocation;\n            gl.uniform2fv(u_focal, new Float32Array([this._camera.data.fx, this._camera.data.fy]));\n\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            u_outlineThickness = gl.getUniformLocation(this.program, \"outlineThickness\") as WebGLUniformLocation;\n            gl.uniform1f(u_outlineThickness, this.outlineThickness);\n\n            u_outlineColor = gl.getUniformLocation(this.program, \"outlineColor\") as WebGLUniformLocation;\n            gl.uniform4fv(u_outlineColor, new Float32Array(this.outlineColor.flatNorm()));\n\n            this._splatTexture = gl.createTexture() as WebGLTexture;\n            u_texture = gl.getUniformLocation(this.program, \"u_texture\") as WebGLUniformLocation;\n            gl.uniform1i(u_texture, 0);\n\n            transformsTexture = gl.createTexture() as WebGLTexture;\n            u_transforms = gl.getUniformLocation(this.program, \"u_transforms\") as WebGLUniformLocation;\n            gl.uniform1i(u_transforms, 1);\n\n            transformIndicesTexture = gl.createTexture() as WebGLTexture;\n            u_transformIndices = gl.getUniformLocation(this.program, \"u_transformIndices\") as WebGLUniformLocation;\n            gl.uniform1i(u_transformIndices, 2);\n\n            colorTransformsTexture = gl.createTexture() as WebGLTexture;\n            u_colorTransforms = gl.getUniformLocation(this.program, \"u_colorTransforms\") as WebGLUniformLocation;\n            gl.uniform1i(u_colorTransforms, 3);\n\n            colorTransformIndicesTexture = gl.createTexture() as WebGLTexture;\n            u_colorTransformIndices = gl.getUniformLocation(\n                this.program,\n                \"u_colorTransformIndices\",\n            ) as WebGLUniformLocation;\n            gl.uniform1i(u_colorTransformIndices, 4);\n\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), gl.STATIC_DRAW);\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            indexBuffer = gl.createBuffer() as WebGLBuffer;\n            indexAttribute = gl.getAttribLocation(this.program, \"index\");\n            gl.enableVertexAttribArray(indexAttribute);\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n\n            createWorker();\n        };\n\n        const handleObjectAdded = (event: Event) => {\n            const e = event as ObjectAddedEvent;\n\n            if (e.object instanceof Splat) {\n                e.object.addEventListener(\"objectChanged\", handleObjectChanged);\n            }\n\n            resetSplatData();\n        };\n\n        const handleObjectRemoved = (event: Event) => {\n            const e = event as ObjectRemovedEvent;\n\n            if (e.object instanceof Splat) {\n                e.object.removeEventListener(\"objectChanged\", handleObjectChanged);\n            }\n\n            resetSplatData();\n        };\n\n        const handleRenderedSplatsChanged = (event: Event) => {\n            const e = event as RenderedSplatsChangedEvent;\n            \n            resetSplatData();\n        };\n\n        const handleObjectChanged = (event: Event) => {\n            const e = event as ObjectChangedEvent;\n            \n            if (e.object instanceof Splat && this._renderData) {\n                this._renderData.markDirty(e.object);\n            }\n        };\n\n        const resetSplatData = () => {\n            this._renderData?.dispose();\n            this._renderData = new RenderData(this._scene as Scene);\n\n            this._worker?.terminate();\n            createWorker();\n        };\n\n        this._render = () => {\n            if (!this._scene || !this._camera || !this.renderData) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            if (this.renderData.needsRebuild) {\n                this.renderData.rebuild();\n            }\n\n            if (\n                this.renderData.dataChanged ||\n                this.renderData.transformsChanged ||\n                this.renderData.colorTransformsChanged\n            ) {\n                \n                if (this.renderData.dataChanged) {\n                    gl.activeTexture(gl.TEXTURE0);\n                    gl.bindTexture(gl.TEXTURE_2D, this.splatTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32UI,\n                        this.renderData.width,\n                        this.renderData.height,\n                        0,\n                        gl.RGBA_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.data,\n                    );\n                }\n\n                if (this.renderData.transformsChanged) {\n                    gl.activeTexture(gl.TEXTURE1);\n                    gl.bindTexture(gl.TEXTURE_2D, transformsTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32F,\n                        this.renderData.transformsWidth,\n                        this.renderData.transformsHeight,\n                        0,\n                        gl.RGBA,\n                        gl.FLOAT,\n                        this.renderData.transforms,\n                    );\n\n                    gl.activeTexture(gl.TEXTURE2);\n                    gl.bindTexture(gl.TEXTURE_2D, transformIndicesTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.R32UI,\n                        this.renderData.transformIndicesWidth,\n                        this.renderData.transformIndicesHeight,\n                        0,\n                        gl.RED_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.transformIndices,\n                    );\n                }\n\n                if (this.renderData.colorTransformsChanged) {\n                    gl.activeTexture(gl.TEXTURE3);\n                    gl.bindTexture(gl.TEXTURE_2D, colorTransformsTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32F,\n                        this.renderData.colorTransformsWidth,\n                        this.renderData.colorTransformsHeight,\n                        0,\n                        gl.RGBA,\n                        gl.FLOAT,\n                        this.renderData.colorTransforms,\n                    );\n\n                    gl.activeTexture(gl.TEXTURE4);\n                    gl.bindTexture(gl.TEXTURE_2D, colorTransformIndicesTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.R32UI,\n                        this.renderData.colorTransformIndicesWidth,\n                        this.renderData.colorTransformIndicesHeight,\n                        0,\n                        gl.RED_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.colorTransformIndices,\n                    );\n                }\n\n                const detachedPositions = new Float32Array(this.renderData.positions.slice().buffer);\n                const detachedTransforms = new Float32Array(this.renderData.transforms.slice().buffer);\n                const detachedTransformIndices = new Uint32Array(this.renderData.transformIndices.slice().buffer);\n                this._worker?.postMessage(\n                    {\n                        sortData: {\n                            positions: detachedPositions,\n                            transforms: detachedTransforms,\n                            transformIndices: detachedTransformIndices,\n                            vertexCount: this.renderData.vertexCount,\n                        },\n                    },\n                    [detachedPositions.buffer, detachedTransforms.buffer, detachedTransformIndices.buffer],\n                );\n\n                this.renderData.dataChanged = false;\n                this.renderData.transformsChanged = false;\n                this.renderData.colorTransformsChanged = false;\n                // console.log(\"Transform Sort\");\n            }\n\n            this._camera.update();\n            // console.log(\"Camera Sort\");\n            this._worker?.postMessage({ viewProj: this._camera.data.viewProj.buffer });\n\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.enable(gl.BLEND);\n            gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.ONE, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.depthIndex, gl.STATIC_DRAW);\n            gl.vertexAttribIPointer(indexAttribute, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(indexAttribute, 1);\n\n            gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, this.depthIndex.length);\n        };\n\n        this._dispose = () => {\n            if (!this._scene || !this._camera || !this.renderData) {\n                console.error(\"Cannot dispose without scene and camera\");\n                return;\n            }\n\n            this._scene.removeEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.removeEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splat) {\n                    object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                    object.removeEventListener(\"renderedSplatsChanged\", handleObjectChanged);\n                }\n            }\n\n            this._worker?.terminate();\n            this.renderData.dispose();\n\n            gl.deleteTexture(this.splatTexture);\n            gl.deleteTexture(transformsTexture);\n            gl.deleteTexture(transformIndicesTexture);\n\n            gl.deleteBuffer(indexBuffer);\n            gl.deleteBuffer(vertexBuffer);\n        };\n\n        this._setOutlineThickness = (value: number) => {\n            this._outlineThickness = value;\n            if (this._initialized) {\n                gl.uniform1f(u_outlineThickness, value);\n            }\n        };\n\n        this._setOutlineColor = (value: Color32) => {\n            this._outlineColor = value;\n            if (this._initialized) {\n                gl.uniform4fv(u_outlineColor, new Float32Array(value.flatNorm()));\n            }\n        };\n    }\n\n    get renderData() {\n        return this._renderData;\n    }\n\n    get depthIndex() {\n        return this._depthIndex;\n    }\n\n    get splatTexture() {\n        return this._splatTexture;\n    }\n\n    get outlineThickness() {\n        return this._outlineThickness;\n    }\n\n    set outlineThickness(value: number) {\n        this._setOutlineThickness(value);\n    }\n\n    get outlineColor() {\n        return this._outlineColor;\n    }\n\n    set outlineColor(value: Color32) {\n        this._setOutlineColor(value);\n    }\n\n    get worker() {\n        return this._worker;\n    }\n\n    protected _getVertexSource() {\n        return vertexShaderSource;\n    }\n\n    protected _getFragmentSource() {\n        return fragmentShaderSource;\n    }\n}\n\nexport { RenderProgram };\n","import { RenderProgram } from \"../programs/RenderProgram\";\nimport { ShaderProgram } from \"../programs/ShaderProgram\";\nimport { ShaderPass } from \"./ShaderPass\";\n\nclass FadeInPass implements ShaderPass {\n    initialize: (program: ShaderProgram) => void;\n    render: () => void;\n\n    constructor(speed: number = 1.0) {\n        let value = 0.0;\n        let active = false;\n\n        let renderProgram: RenderProgram;\n        let gl: WebGL2RenderingContext;\n        let u_useDepthFade: WebGLUniformLocation;\n        let u_depthFade: WebGLUniformLocation;\n\n        this.initialize = (program: ShaderProgram) => {\n            if (!(program instanceof RenderProgram)) {\n                throw new Error(\"FadeInPass requires a RenderProgram\");\n            }\n\n            value = program.started ? 1.0 : 0.0;\n            active = true;\n            renderProgram = program;\n            gl = program.renderer.gl;\n\n            u_useDepthFade = gl.getUniformLocation(renderProgram.program, \"useDepthFade\") as WebGLUniformLocation;\n            gl.uniform1i(u_useDepthFade, 1);\n\n            u_depthFade = gl.getUniformLocation(renderProgram.program, \"depthFade\") as WebGLUniformLocation;\n            gl.uniform1f(u_depthFade, value);\n        };\n\n        this.render = () => {\n            if (!active || renderProgram.renderData?.updating) return;\n            gl.useProgram(renderProgram.program);\n            value = Math.min(value + speed * 0.01, 1.0);\n            if (value >= 1.0) {\n                active = false;\n                gl.uniform1i(u_useDepthFade, 0);\n            }\n            gl.uniform1f(u_depthFade, value);\n        };\n    }\n\n    dispose() {}\n}\n\nexport { FadeInPass };\n","import type { Scene } from \"../core/Scene\";\nimport { FadeInPass } from \"./webgl/passes/FadeInPass\";\nimport { Camera } from \"../cameras/Camera\";\nimport { Color32 } from \"../math/Color32\";\nimport { ShaderProgram } from \"./webgl/programs/ShaderProgram\";\nimport { RenderProgram } from \"./webgl/programs/RenderProgram\";\nimport { ShaderPass } from \"./webgl/passes/ShaderPass\";\n\nexport class WebGLRenderer {\n    private _canvas: HTMLCanvasElement;\n    private _gl: WebGL2RenderingContext;\n    private _backgroundColor: Color32 = new Color32();\n    private _renderProgram: RenderProgram;\n    \n    private _customPrograms: ShaderProgram[];\n\n    addProgram: (program: ShaderProgram) => void;\n    removeProgram: (program: ShaderProgram) => void;\n    removeAllPrograms: () => void;\n    resize: () => void;\n    setSize: (width: number, height: number) => void;\n    render: (scene: Scene, camera: Camera) => void;\n    dispose: () => void;\n\n    constructor(optionalCanvas: HTMLCanvasElement | null = null, optionalRenderPasses: ShaderPass[] | null = null) {\n        const canvas: HTMLCanvasElement = optionalCanvas || document.createElement(\"canvas\");\n        if (!optionalCanvas) {\n            canvas.style.display = \"block\";\n            canvas.style.boxSizing = \"border-box\";\n            canvas.style.width = \"100%\";\n            canvas.style.height = \"100%\";\n            canvas.style.margin = \"0\";\n            canvas.style.padding = \"0\";\n            document.body.appendChild(canvas);\n        }\n        canvas.style.background = this._backgroundColor.toHexString();\n        this._canvas = canvas;\n\n        this._gl = canvas.getContext(\"webgl2\", { antialias: false }) as WebGL2RenderingContext;\n\n        const renderPasses = optionalRenderPasses || [];\n        if (!optionalRenderPasses) {\n            renderPasses.push(new FadeInPass());\n        }\n        \n        this._renderProgram = new RenderProgram(this, renderPasses);\n        this._customPrograms = [];\n        const programs = [this._renderProgram] as ShaderProgram[];\n\n        this.resize = () => {\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n            if (canvas.width !== width || canvas.height !== height) {\n                this.setSize(width, height);\n            }\n        };\n\n        this.setSize = (width: number, height: number) => {\n            canvas.width = width;\n            canvas.height = height;\n            this._gl.viewport(0, 0, canvas.width, canvas.height);\n            for (const program of programs) {\n                program.resize();\n            }\n        };\n\n        this.render = (scene: Scene, camera: Camera) => {\n            for (const program of programs) {\n                program.render(scene, camera);\n            }\n        };\n\n        this.dispose = () => {\n            for (const program of programs) {\n                program.dispose();\n            }\n        };\n\n        this.addProgram = (program: ShaderProgram) => {\n            programs.push(program);\n            this._customPrograms?.push(program);\n        };\n\n        this.removeProgram = (program: ShaderProgram) => {\n            const index = programs.indexOf(program);\n            if (index < 0) {\n                throw new Error(\"Program not found\");\n            }\n            programs.splice(index, 1);\n        };\n\n        this.removeAllPrograms = () => {\n            for(let i = 0; i < this._customPrograms.length; i++) {\n                var program = this._customPrograms.pop();\n                if(program != undefined)\n                    this.removeProgram(program);\n            }\n        };\n\n        this.resize();\n    }\n\n    get canvas() {\n        return this._canvas;\n    }\n\n    get gl() {\n        return this._gl;\n    }\n\n    get renderProgram() {\n        return this._renderProgram;\n    }\n\n    get backgroundColor() {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value: Color32) {\n        this._backgroundColor = value;\n        this._canvas.style.background = value.toHexString();\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass OrbitControls {\n    public enabled: boolean = true;\n\n    minAngle: number = -90;\n    maxAngle: number = 90;\n    minZoom: number = 0.1;\n    maxZoom: number = 30;\n    orbitSpeed: number = 1;\n    panSpeed: number = 1;\n    zoomSpeed: number = 1;\n    dampening: number = 0.12;\n    \n    setCameraTarget: (newTarget: Vector3) => void = () => {};\n    update: () => void;\n    dispose: () => void;\n\n    constructor(\n        camera: Camera,\n        canvas: HTMLElement,\n        alpha: number = 0.5,\n        beta: number = 0.5,\n        radius: number = 5,\n        enableKeyboardControls: boolean = true,\n        inputTarget: Vector3 = new Vector3(),\n    ) {\n        let target = inputTarget.clone();\n\n        let desiredTarget = target.clone();\n        let desiredAlpha = alpha;\n        let desiredBeta = beta;\n        let desiredRadius = radius;\n\n        let dragging = false;\n        let panning = false;\n        let lastDist = 0;\n        let lastX = 0;\n        let lastY = 0;\n\n        const keys: { [key: string]: boolean } = {};\n\n        let isUpdatingCamera = false;\n\n        const onCameraChange = () => {\n            if (isUpdatingCamera) return;\n\n            const eulerRotation = camera.rotation.toEuler();\n            desiredAlpha = -eulerRotation.y;\n            desiredBeta = -eulerRotation.x;\n\n            const x = camera.position.x - desiredRadius * Math.sin(desiredAlpha) * Math.cos(desiredBeta);\n            const y = camera.position.y + desiredRadius * Math.sin(desiredBeta);\n            const z = camera.position.z + desiredRadius * Math.cos(desiredAlpha) * Math.cos(desiredBeta);\n\n            desiredTarget = new Vector3(x, y, z);\n        };\n\n        camera.addEventListener(\"objectChanged\", onCameraChange);\n\n        this.setCameraTarget = (newTarget: Vector3) => {\n            const dx = newTarget.x - camera.position.x;\n            const dy = newTarget.y - camera.position.y;\n            const dz = newTarget.z - camera.position.z;\n            desiredRadius = Math.sqrt(dx * dx + dy * dy + dz * dz);\n            desiredBeta = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz));\n            desiredAlpha = -Math.atan2(dx, dz);\n            desiredTarget = new Vector3(newTarget.x, newTarget.y, newTarget.z);\n        };\n\n        const computeZoomNorm = () => {\n            return 0.1 + (0.9 * (desiredRadius - this.minZoom)) / (this.maxZoom - this.minZoom);\n        };\n\n        const onKeyDown = (e: KeyboardEvent) => {\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n\n        const onKeyUp = (e: KeyboardEvent) => {\n            keys[e.code] = false; // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n        };\n\n        const onMouseDown = (e: MouseEvent) => {\n            preventDefault(e);\n\n            if (!this.enabled) return;\n\n            dragging = true;\n            panning = e.button === 2;\n            lastX = e.clientX;\n            lastY = e.clientY;\n            window.addEventListener(\"mouseup\", onMouseUp);\n        };\n\n        const onMouseUp = (e: MouseEvent) => {\n            preventDefault(e);\n\n            dragging = false;\n            panning = false;\n            window.removeEventListener(\"mouseup\", onMouseUp);\n        };\n\n        const onMouseMove = (e: MouseEvent) => {\n            preventDefault(e);\n\n            if (!this.enabled || !dragging || !camera) return;\n\n            const dx = e.clientX - lastX;\n            const dy = e.clientY - lastY;\n\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n                const panX = -dx * this.panSpeed * 0.01 * zoomNorm;\n                const panY = -dy * this.panSpeed * 0.01 * zoomNorm;\n                const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new Vector3(R[0], R[3], R[6]);\n                const up = new Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(panX));\n                desiredTarget = desiredTarget.add(up.multiply(panY));\n            } else {\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(\n                    Math.max(desiredBeta, (this.minAngle * Math.PI) / 180),\n                    (this.maxAngle * Math.PI) / 180,\n                );\n            }\n\n            lastX = e.clientX;\n            lastY = e.clientY;\n        };\n\n        const onWheel = (e: WheelEvent) => {\n            preventDefault(e);\n\n            const zoomNorm = computeZoomNorm();\n            desiredRadius += e.deltaY * this.zoomSpeed * 0.025 * zoomNorm;\n            desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n        };\n\n        const onTouchStart = (e: TouchEvent) => {\n            preventDefault(e);\n\n            if (e.touches.length === 1) {\n                dragging = true;\n                panning = false;\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n                lastDist = 0;\n            } else if (e.touches.length === 2) {\n                dragging = true;\n                panning = true;\n                lastX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                lastY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                lastDist = Math.sqrt(distX * distX + distY * distY);\n            }\n        };\n\n        const onTouchEnd = (e: TouchEvent) => {\n            preventDefault(e);\n\n            dragging = false;\n            panning = false;\n        };\n\n        const onTouchMove = (e: TouchEvent) => {\n            preventDefault(e);\n\n            if (!dragging || !camera) return;\n\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                const dist = Math.sqrt(distX * distX + distY * distY);\n                const delta = lastDist - dist;\n                desiredRadius += delta * this.zoomSpeed * 0.1 * zoomNorm;\n                desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n                lastDist = dist;\n\n                const touchX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                const touchY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const dx = touchX - lastX;\n                const dy = touchY - lastY;\n                const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new Vector3(R[0], R[3], R[6]);\n                const up = new Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(-dx * this.panSpeed * 0.025 * zoomNorm));\n                desiredTarget = desiredTarget.add(up.multiply(-dy * this.panSpeed * 0.025 * zoomNorm));\n                lastX = touchX;\n                lastY = touchY;\n            } else {\n                const dx = e.touches[0].clientX - lastX;\n                const dy = e.touches[0].clientY - lastY;\n\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(\n                    Math.max(desiredBeta, (this.minAngle * Math.PI) / 180),\n                    (this.maxAngle * Math.PI) / 180,\n                );\n\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n            }\n        };\n\n        const lerp = (a: number, b: number, t: number) => {\n            return (1 - t) * a + t * b;\n        };\n\n        this.update = () => {\n            isUpdatingCamera = true;\n\n            alpha = lerp(alpha, desiredAlpha, this.dampening);\n            beta = lerp(beta, desiredBeta, this.dampening);\n            radius = lerp(radius, desiredRadius, this.dampening);\n            target = target.lerp(desiredTarget, this.dampening);\n\n            const x = target.x + radius * Math.sin(alpha) * Math.cos(beta);\n            const y = target.y - radius * Math.sin(beta);\n            const z = target.z - radius * Math.cos(alpha) * Math.cos(beta);\n            camera.position = new Vector3(x, y, z);\n\n            const direction = target.subtract(camera.position).normalize();\n            const rx = Math.asin(-direction.y);\n            const ry = Math.atan2(direction.x, direction.z);\n            camera.rotation = Quaternion.FromEuler(new Vector3(rx, ry, 0));\n\n            const moveSpeed = 0.025;\n            const rotateSpeed = 0.01;\n\n            const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new Vector3(-R[2], -R[5], -R[8]);\n            const right = new Vector3(R[0], R[3], R[6]);\n\n            if (keys[\"KeyS\"]) desiredTarget = desiredTarget.add(forward.multiply(moveSpeed));\n            if (keys[\"KeyW\"]) desiredTarget = desiredTarget.subtract(forward.multiply(moveSpeed));\n            if (keys[\"KeyA\"]) desiredTarget = desiredTarget.subtract(right.multiply(moveSpeed));\n            if (keys[\"KeyD\"]) desiredTarget = desiredTarget.add(right.multiply(moveSpeed));\n\n            // Add rotation with 'e' and 'q' for horizontal rotation\n            if (keys[\"KeyE\"]) desiredAlpha += rotateSpeed;\n            if (keys[\"KeyQ\"]) desiredAlpha -= rotateSpeed;\n\n            // Add rotation with 'r' and 'f' for vertical rotation\n            if (keys[\"KeyR\"]) desiredBeta += rotateSpeed;\n            if (keys[\"KeyF\"]) desiredBeta -= rotateSpeed;\n\n            isUpdatingCamera = false;\n        };\n\n        const preventDefault = (e: Event) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        this.dispose = () => {\n            canvas.removeEventListener(\"dragenter\", preventDefault);\n            canvas.removeEventListener(\"dragover\", preventDefault);\n            canvas.removeEventListener(\"dragleave\", preventDefault);\n            canvas.removeEventListener(\"contextmenu\", preventDefault);\n\n            canvas.removeEventListener(\"mousedown\", onMouseDown);\n            canvas.removeEventListener(\"mousemove\", onMouseMove);\n            canvas.removeEventListener(\"wheel\", onWheel);\n\n            canvas.removeEventListener(\"touchstart\", onTouchStart);\n            canvas.removeEventListener(\"touchend\", onTouchEnd);\n            canvas.removeEventListener(\"touchmove\", onTouchMove);\n\n            if (enableKeyboardControls) {\n                window.removeEventListener(\"keydown\", onKeyDown);\n                window.removeEventListener(\"keyup\", onKeyUp);\n            }\n        };\n\n        if (enableKeyboardControls) {\n            window.addEventListener(\"keydown\", onKeyDown);\n            window.addEventListener(\"keyup\", onKeyUp);\n        }\n\n        canvas.addEventListener(\"dragenter\", preventDefault);\n        canvas.addEventListener(\"dragover\", preventDefault);\n        canvas.addEventListener(\"dragleave\", preventDefault);\n        canvas.addEventListener(\"contextmenu\", preventDefault);\n\n        canvas.addEventListener(\"mousedown\", onMouseDown);\n        canvas.addEventListener(\"mousemove\", onMouseMove);\n        canvas.addEventListener(\"wheel\", onWheel);\n\n        canvas.addEventListener(\"touchstart\", onTouchStart);\n        canvas.addEventListener(\"touchend\", onTouchEnd);\n        canvas.addEventListener(\"touchmove\", onTouchMove);\n\n        this.update();\n    }\n}\n\nexport { OrbitControls };\n","import { Camera } from \"../cameras/Camera\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass FPSControls {\n    moveSpeed: number = 1.5;\n    lookSpeed: number = 0.7;\n    dampening: number = 0.5;\n    update: () => void;\n    dispose: () => void;\n\n    constructor(camera: Camera, canvas: HTMLCanvasElement) {\n        const keys: { [key: string]: boolean } = {};\n        let pitch = camera.rotation.toEuler().x;\n        let yaw = camera.rotation.toEuler().y;\n        let targetPosition = camera.position;\n        let pointerLock = false;\n\n        const onMouseDown = () => {\n            canvas.requestPointerLock();\n        };\n\n        const onPointerLockChange = () => {\n            pointerLock = document.pointerLockElement === canvas;\n            if (pointerLock) {\n                canvas.addEventListener(\"mousemove\", onMouseMove);\n            } else {\n                canvas.removeEventListener(\"mousemove\", onMouseMove);\n            }\n        };\n\n        const onMouseMove = (e: MouseEvent) => {\n            const mouseX = e.movementX;\n            const mouseY = e.movementY;\n\n            yaw += mouseX * this.lookSpeed * 0.001;\n            pitch -= mouseY * this.lookSpeed * 0.001;\n            pitch = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch));\n        };\n\n        const onKeyDown = (e: KeyboardEvent) => {\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n\n        const onKeyUp = (e: KeyboardEvent) => {\n            keys[e.code] = false;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n            if (e.code === \"Escape\") document.exitPointerLock();\n        };\n\n        this.update = () => {\n            const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new Vector3(-R[2], -R[5], -R[8]);\n            const right = new Vector3(R[0], R[3], R[6]);\n            let move = new Vector3(0, 0, 0);\n            if (keys[\"KeyS\"]) {\n                move = move.add(forward);\n            }\n            if (keys[\"KeyW\"]) {\n                move = move.subtract(forward);\n            }\n            if (keys[\"KeyA\"]) {\n                move = move.subtract(right);\n            }\n            if (keys[\"KeyD\"]) {\n                move = move.add(right);\n            }\n            move = new Vector3(move.x, 0, move.z);\n            if (move.magnitude() > 0) {\n                move = move.normalize();\n            }\n\n            targetPosition = targetPosition.add(move.multiply(this.moveSpeed * 0.01));\n            camera.position = camera.position.add(targetPosition.subtract(camera.position).multiply(this.dampening));\n\n            camera.rotation = Quaternion.FromEuler(new Vector3(pitch, yaw, 0));\n        };\n\n        const preventDefault = (e: Event) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        this.dispose = () => {\n            canvas.removeEventListener(\"dragenter\", preventDefault);\n            canvas.removeEventListener(\"dragover\", preventDefault);\n            canvas.removeEventListener(\"dragleave\", preventDefault);\n            canvas.removeEventListener(\"contextmenu\", preventDefault);\n            canvas.removeEventListener(\"mousedown\", onMouseDown);\n\n            document.removeEventListener(\"pointerlockchange\", onPointerLockChange);\n\n            window.removeEventListener(\"keydown\", onKeyDown);\n            window.removeEventListener(\"keyup\", onKeyUp);\n        };\n\n        window.addEventListener(\"keydown\", onKeyDown);\n        window.addEventListener(\"keyup\", onKeyUp);\n\n        canvas.addEventListener(\"dragenter\", preventDefault);\n        canvas.addEventListener(\"dragover\", preventDefault);\n        canvas.addEventListener(\"dragleave\", preventDefault);\n        canvas.addEventListener(\"contextmenu\", preventDefault);\n        canvas.addEventListener(\"mousedown\", onMouseDown);\n\n        document.addEventListener(\"pointerlockchange\", onPointerLockChange);\n\n        this.update();\n    }\n}\n\nexport { FPSControls };\n","import { Vector3 } from \"./Vector3\";\n\nclass Plane {\n    public readonly normal: Vector3;\n    public readonly point: Vector3;\n    public constant: number;\n    \n    constructor(normal: Vector3 = new Vector3(1, 0, 0), point: Vector3 = new Vector3(0,0,0), constant:number = 0) {\n        this.normal = normal;\n        this.point = point;\n        this.constant = constant;\n    }\n\n    setFromCoplanarPoints(a: Vector3, b: Vector3, c: Vector3): this {\n        const v1 = new Vector3().subVectors(c, b);\n        const v2 = new Vector3().subVectors(a, b);\n        const normal = new Vector3().crossVectors(v1, v2).normalize();\n        this.normal.set(normal.x, normal.y, normal.z);\n        this.constant = this.normal.dot(b);\n        return this;\n    }\n\n\n    setComponents(x: number, y:number, z:number, w:number): this {\n        this.normal.set(x, y, z);\n        this.constant = w;\n        return this;\n    }\n    intersect(origin: Vector3, direction: Vector3): Vector3 | null {\n        const denominator = this.normal.dot(direction);\n\n        if (Math.abs(denominator) < 0.0001) {\n            return null;\n        }\n\n        const t = this.normal.dot(this.point.subtract(origin)) / denominator;\n\n        if (t < 0) {\n            return null;\n        }\n\n        return origin.add(direction.multiply(t));\n    }\n\n    normalize(): this {\n        \n        const inverseNormalLength = 1.0 / this.normal.magnitude();\n        this.normal.multiply(inverseNormalLength);\n        this.constant *= inverseNormalLength;\n        return this;\n    }\n\n    distanceToPoint(point: Vector3): number {\n        return this.normal.dot(point) - this.constant;\n    }\n\n    clone(): Plane {\n        return new Plane().copy(this);\n    }\n\n    copy(plane: Plane): this {\n        this.normal.copy(plane.normal);\n        this.constant = plane.constant;\n        return this;\n    }\n}\n\nexport { Plane };\n","import { ShaderProgram } from \"../programs/ShaderProgram\";\n\nclass ShaderPass {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initialize(program: ShaderProgram) {}\n    render() {}\n    dispose() {}\n}\n\nexport { ShaderPass };\n","import { Splatv } from \"../../../splats/Splatv\";\nimport { SplatvData } from \"../../../splats/SplatvData\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ObjectAddedEvent, ObjectChangedEvent, ObjectRemovedEvent } from \"../../../events/Events\";\nimport { Matrix4 } from \"../../../math/Matrix4\";\n\nconst vertexShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n`;\n\nconst fragmentShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n`;\n\nclass VideoRenderProgram extends ShaderProgram {\n    private _renderData: SplatvData | null = null;\n    private _depthIndex: Uint32Array = new Uint32Array();\n    private _splatTexture: WebGLTexture | null = null;\n\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[] = []) {\n        super(renderer, passes);\n\n        const canvas = renderer.canvas;\n        const gl = renderer.gl;\n\n        let worker: Worker;\n\n        let u_projection: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n        let u_focal: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_texture: WebGLUniformLocation;\n        let u_time: WebGLUniformLocation;\n\n        let positionAttribute: number;\n        let indexAttribute: number;\n\n        let vertexBuffer: WebGLBuffer;\n        let indexBuffer: WebGLBuffer;\n\n        this._resize = () => {\n            if (!this._camera) return;\n\n            this._camera.data.setSize(canvas.width, canvas.height);\n            this._camera.update();\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n            gl.uniform2fv(u_viewport, new Float32Array([canvas.width, canvas.height]));\n        };\n\n        const setupWorker = () => {\n            if (renderer.renderProgram.worker === null) {\n                console.error(\"Render program is not initialized. Cannot render without worker\");\n                return;\n            }\n            worker = renderer.renderProgram.worker;\n            worker.onmessage = (e) => {\n                if (e.data.depthIndex) {\n                    const { depthIndex } = e.data;\n                    this._depthIndex = depthIndex;\n                    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n                    gl.bufferData(gl.ARRAY_BUFFER, depthIndex, gl.STATIC_DRAW);\n                }\n            };\n        };\n\n        this._initialize = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            this._resize();\n\n            this._scene.addEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.addEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splatv) {\n                    if (this._renderData === null) {\n                        this._renderData = object.data;\n                        object.addEventListener(\"objectChanged\", handleObjectChanged);\n                    } else {\n                        console.warn(\"Multiple Splatv objects are not currently supported\");\n                    }\n                }\n            }\n\n            if (this._renderData === null) {\n                console.error(\"Cannot render without Splatv object\");\n                return;\n            }\n\n            u_focal = gl.getUniformLocation(this.program, \"focal\") as WebGLUniformLocation;\n            gl.uniform2fv(u_focal, new Float32Array([this._camera.data.fx, this._camera.data.fy]));\n\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            this._splatTexture = gl.createTexture() as WebGLTexture;\n            u_texture = gl.getUniformLocation(this.program, \"u_texture\") as WebGLUniformLocation;\n            gl.uniform1i(u_texture, 0);\n\n            u_time = gl.getUniformLocation(this.program, \"time\") as WebGLUniformLocation;\n            gl.uniform1f(u_time, Math.sin(Date.now() / 1000) / 2 + 1 / 2);\n\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), gl.STATIC_DRAW);\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            indexBuffer = gl.createBuffer() as WebGLBuffer;\n            indexAttribute = gl.getAttribLocation(this.program, \"index\");\n            gl.enableVertexAttribArray(indexAttribute);\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n\n            setupWorker();\n\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, this._splatTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texImage2D(\n                gl.TEXTURE_2D,\n                0,\n                gl.RGBA32UI,\n                this._renderData.width,\n                this._renderData.height,\n                0,\n                gl.RGBA_INTEGER,\n                gl.UNSIGNED_INT,\n                this._renderData.data,\n            );\n\n            const positions = this._renderData.positions;\n            const dummyTransforms = new Float32Array(new Matrix4().buffer);\n            const dummyTransformIndices = new Uint32Array(this._renderData.vertexCount);\n            dummyTransformIndices.fill(0);\n            worker.postMessage(\n                {\n                    sortData: {\n                        positions: positions,\n                        transforms: dummyTransforms,\n                        transformIndices: dummyTransformIndices,\n                        vertexCount: this._renderData.vertexCount,\n                    },\n                },\n                [positions.buffer, dummyTransforms.buffer, dummyTransformIndices.buffer],\n            );\n        };\n\n        const handleObjectAdded = (event: Event) => {\n            const e = event as ObjectAddedEvent;\n\n            if (e.object instanceof Splatv) {\n                if (this._renderData === null) {\n                    this._renderData = e.object.data;\n                    e.object.addEventListener(\"objectChanged\", handleObjectChanged);\n                } else {\n                    console.warn(\"Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.\");\n                }\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectRemoved = (event: Event) => {\n            const e = event as ObjectRemovedEvent;\n\n            if (e.object instanceof Splatv) {\n                if (this._renderData === e.object.data) {\n                    this._renderData = null;\n                    e.object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectChanged = (event: Event) => {\n            const e = event as ObjectChangedEvent;\n\n            if (e.object instanceof Splatv && this._renderData === e.object.data) {\n                this.dispose();\n            }\n        };\n\n        this._render = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            if (!this._renderData) {\n                console.warn(\"Cannot render without Splatv object\");\n                return;\n            }\n\n            this._camera.update();\n            worker.postMessage({ viewProj: this._camera.data.viewProj.buffer });\n\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.enable(gl.BLEND);\n            gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.ONE, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n            gl.uniform1f(u_time, Math.sin(Date.now() / 1000) / 2 + 1 / 2);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this._depthIndex, gl.STATIC_DRAW);\n            gl.vertexAttribIPointer(indexAttribute, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(indexAttribute, 1);\n\n            gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, this._renderData.vertexCount);\n        };\n\n        this._dispose = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot dispose without scene and camera\");\n                return;\n            }\n\n            this._scene.removeEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.removeEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splatv) {\n                    if (this._renderData === object.data) {\n                        this._renderData = null;\n                        object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                    }\n                }\n            }\n\n            worker?.terminate();\n\n            gl.deleteTexture(this._splatTexture);\n\n            gl.deleteBuffer(indexBuffer);\n            gl.deleteBuffer(vertexBuffer);\n        };\n    }\n\n    get renderData(): SplatvData | null {\n        return this._renderData;\n    }\n\n    protected _getVertexSource(): string {\n        return vertexShaderSource;\n    }\n\n    protected _getFragmentSource(): string {\n        return fragmentShaderSource;\n    }\n}\n\nexport { VideoRenderProgram };\n","import { Box3 } from \"./Box3\";\nimport { Vector3 } from \"./Vector3\";\n\nclass BVHNode {\n    public left: BVHNode | null = null;\n    public right: BVHNode | null = null;\n    public pointIndices: number[] = [];\n\n    constructor(\n        public bounds: Box3,\n        public boxes: Box3[],\n        pointIndices: number[],\n    ) {\n        if (pointIndices.length > 1) {\n            this.split(bounds, boxes, pointIndices);\n        } else if (pointIndices.length > 0) {\n            this.pointIndices = pointIndices;\n        }\n    }\n    \n    private split(bounds: Box3, boxes: Box3[], pointIndices: number[]) {\n        const axis = bounds.size().maxComponent();\n        pointIndices.sort((a, b) => boxes[a].center().getComponent(axis) - boxes[b].center().getComponent(axis));\n\n        const mid = Math.floor(pointIndices.length / 2);\n        const leftIndices = pointIndices.slice(0, mid);\n        const rightIndices = pointIndices.slice(mid);\n\n        this.left = new BVHNode(bounds, boxes, leftIndices);\n        this.right = new BVHNode(bounds, boxes, rightIndices);\n    }\n\n    public queryRange(range: Box3): number[] {\n        if (!this.bounds.intersects(range)) {\n            return [];\n        } else if (this.left !== null && this.right !== null) {\n            return this.left.queryRange(range).concat(this.right.queryRange(range));\n        } else {\n            return this.pointIndices.filter((index) => range.intersects(this.boxes[index]));\n        }\n    }\n}\n\nclass BVH {\n    public root: BVHNode;\n\n    constructor(bounds: Box3, boxes: Box3[]) {\n        const pointIndices = boxes.map((_, index) => index);\n        this.root = new BVHNode(bounds, boxes, pointIndices);\n    }\n\n    public queryRange(range: Box3) {\n        return this.root.queryRange(range);\n    }\n}\n\nexport { BVH };\n","import { Camera } from \"../../../cameras/Camera\";\nimport { Vector3 } from \"../../../math/Vector3\";\nimport { Splat } from \"../../../splats/Splat\";\nimport { RenderProgram } from \"../programs/RenderProgram\";\nimport { Box3 } from \"../../../math/Box3\";\nimport { BVH } from \"../../../math/BVH\";\nimport { RenderData } from \"./RenderData\";\nimport {SingleSplat} from \"../../../splats/SingleSplat\";\n\nclass IntersectionTester {\n    testPoint: (x: number, y: number) => Splat | null;\n    testPointSingleSplats: (x: number, y: number) => SingleSplat[] | null;\n    testLayer: (value: number, positiveDirection: boolean, axis: string) => SingleSplat[] | null;\n\n    constructor(renderProgram: RenderProgram, maxDistance: number = 100, resolution: number = 1.0) {\n        let vertexCount = 0;\n        let bvh: BVH | null = null;\n\n        let singleSplatbvh: BVH | null = null;\n        let lookup: Splat[] = [];\n        let singleSplatLookup: SingleSplat[] = [];\n\n        const build = () => {\n            if(renderProgram.renderData === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return;\n            }\n            const startTimeSplat = performance.now();\n            \n            lookup = [];\n            const renderData = renderProgram.renderData as RenderData;\n            const boxes = new Array<Box3>(renderData.offsets.size);\n            let i = 0;\n            const bounds = new Box3(\n                new Vector3(Infinity, Infinity, Infinity),\n                new Vector3(-Infinity, -Infinity, -Infinity),\n            );\n            for (const splat of renderData.offsets.keys()) {\n                const splatBounds = splat.bounds;\n                boxes[i++] = splatBounds;\n                bounds.expand(splatBounds.min);\n                bounds.expand(splatBounds.max);\n                lookup.push(splat);\n            }\n            bounds.permute();\n            bvh = new BVH(bounds, boxes);\n\n            const endTimeSplat = performance.now();\n            const duration = endTimeSplat - startTimeSplat; \n            console.log(`creating BVH with SPLAT:  ${duration/1000} s (${duration} ms).`);\n\n            const startTimeSingleSplat = performance.now();\n            singleSplatLookup = [];\n            const singleSplatBoxes = new Array<Box3>(renderData.singleOffsets.size);\n            let j = 0;\n            const singleSplatbounds = new Box3(\n                new Vector3(Infinity, Infinity, Infinity),\n                new Vector3(-Infinity, -Infinity, -Infinity),\n            );\n            for (const singleSplat of renderData.singleOffsets.keys()) {\n                const splatBounds = singleSplat.bounds;\n                singleSplatBoxes[j++] = splatBounds;\n                singleSplatbounds.expand(splatBounds.min);\n                singleSplatbounds.expand(splatBounds.max);\n                singleSplatLookup.push(singleSplat);\n            }\n            singleSplatbounds.permute();\n            singleSplatbvh = new BVH(singleSplatbounds, singleSplatBoxes);\n\n            const endTimeSingleSplat = performance.now();\n            const durationSingleSplat = endTimeSingleSplat - startTimeSingleSplat;\n            console.log(`creating BVH with SPLAT:  ${durationSingleSplat/1000} s (${durationSingleSplat} ms).`);\n            \n            console.log(\"Got \" + boxes.length + \" boxes for Splat!\")\n            console.log(\"Got \" + singleSplatBoxes.length + \" boxes for Single Splats!\")\n            \n            vertexCount = renderData.vertexCount;\n        };\n        \n        this.testLayer = (value: number, positiveDirection: boolean, axis: string) => {\n            const renderData = renderProgram.renderData as RenderData;\n            singleSplatLookup = [];\n            \n            for (const singleSplat of renderData.singleOffsets.keys()) {\n                const splatBounds = singleSplat.bounds;\n                if(axis === \"x\") {\n                    if(positiveDirection) {\n                        if(splatBounds.center().x >= value) {\n                            singleSplatLookup.push(singleSplat)\n                        }\n                    } else {\n                        if(splatBounds.center().x < value) {\n                            singleSplatLookup.push(singleSplat)\n                        }\n                    }\n                } else if(axis === \"y\") {\n                    if(positiveDirection) {\n                        if(splatBounds.center().y >= value) {\n                            singleSplatLookup.push(singleSplat)\n                        }\n                    } else {\n                        if(splatBounds.center().y < value) {\n                            singleSplatLookup.push(singleSplat)\n                        }\n                    }\n                } else if(axis === \"z\") {\n                    if(positiveDirection) {\n                        if(splatBounds.center().z >= value) {\n                            singleSplatLookup.push(singleSplat)\n                        }\n                    } else {\n                        if(splatBounds.center().z < value) {\n                            singleSplatLookup.push(singleSplat)\n                        }\n                    }\n                }\n            }\n            return singleSplatLookup;\n        }\n\n        this.testPoint = (x: number, y: number) => {\n            if (renderProgram.renderData === null || renderProgram.camera === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return null;\n            }\n\n            build();\n\n            if (bvh === null) {\n                console.error(\"Failed to build octree for IntersectionTester\");\n                return null;\n            }\n\n            const renderData = renderProgram.renderData as RenderData;\n            const camera = renderProgram.camera as Camera;\n\n            if (vertexCount !== renderData.vertexCount) {\n                console.warn(\"IntersectionTester has not been rebuilt since the last render\");\n            }\n\n            const ray = camera.screenPointToRay(x, y);\n            for (let x = 0; x < maxDistance; x += resolution) {\n                const point = camera.position.add(ray.multiply(x));\n                const minPoint = new Vector3(\n                    point.x - resolution / 2,\n                    point.y - resolution / 2,\n                    point.z - resolution / 2,\n                );\n                const maxPoint = new Vector3(\n                    point.x + resolution / 2,\n                    point.y + resolution / 2,\n                    point.z + resolution / 2,\n                );\n                const queryBox = new Box3(minPoint, maxPoint);\n                const points = bvh.queryRange(queryBox);\n                if (points.length > 0) {\n                    return lookup[points[0]];\n                }\n            }\n\n            return null;\n        };\n\n        \n        this.testPointSingleSplats = (x: number, y: number) => {\n            if (renderProgram.renderData === null || renderProgram.camera === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return null;\n            }\n\n            const renderData = renderProgram.renderData as RenderData;\n            const camera = renderProgram.camera as Camera;\n\n            singleSplatLookup = [];\n            const ray = camera.screenPointToRay(x, y);\n            for (let x = 0; x < maxDistance; x += resolution) {\n                const point = camera.position.add(ray.multiply(x));\n                const minPoint = new Vector3(\n                    point.x - resolution / 2,\n                    point.y - resolution / 2,\n                    point.z - resolution / 2,\n                );\n                const maxPoint = new Vector3(\n                    point.x + resolution / 2,\n                    point.y + resolution / 2,\n                    point.z + resolution / 2,\n                );\n                const queryBox = new Box3(minPoint, maxPoint);\n                \n                for (const singleSplat of renderData.singleOffsets.keys()) {\n                    if(singleSplat.bounds.intersects(queryBox)) {\n                        singleSplatLookup.push(singleSplat)\n                    }\n                }\n            }\n            return singleSplatLookup;\n        };\n    }\n}\n\nexport { IntersectionTester };\n","import { Box3 } from \"./Box3\";\nimport { SingleSplat } from \"../splats/SingleSplat\";\nimport { Vector3 } from \"./Vector3\";\nimport { Ray } from \"./Ray\";\n\nclass BVHNode {\n    public left: BVHNode | null = null;\n    public right: BVHNode | null = null;\n    public bounds: Box3;\n    public objects: SingleSplat[] = [];\n\n    constructor(objects: SingleSplat[] | undefined = undefined) {\n        this.bounds = new Box3(new Vector3(Infinity, Infinity, Infinity), new Vector3(-Infinity, -Infinity, -Infinity));\n        \n        if(objects === undefined)\n            return;\n        \n        objects.forEach(obj => {\n            this.bounds.expand(obj.bounds.min);\n            this.bounds.expand(obj.bounds.max);\n        });\n        if (objects.length <= 2) {\n            this.objects = objects;\n        } else {\n            this.split(objects);\n        }\n    }\n\n    private split(objects: SingleSplat[]): void {\n        const mid = Math.floor(objects.length / 2);\n        objects.sort((a, b) => a.bounds.center().x - b.bounds.center().x); // Simplistic sort by X-axis\n\n        this.left = new BVHNode(objects.slice(0, mid));\n        this.right = new BVHNode(objects.slice(mid));\n    }\n\n    public intersects(ray: Ray, maxDistance: number): SingleSplat[] {\n        if (!ray.intersectsBox(this.bounds, maxDistance)) {\n            return [];\n        }\n        if (this.objects.length > 0) {\n            return this.objects.filter(obj => ray.intersectsBox(obj.bounds, maxDistance));\n        }\n        return [\n            ...(this.left ? this.left.intersects(ray, maxDistance) : []),\n            ...(this.right ? this.right.intersects(ray, maxDistance) : [])\n        ];\n    }\n}\n\nexport { BVHNode }","import { Vector3 } from \"./Vector3\";\nimport { Box3 } from \"./Box3\";\n\nclass Ray {\n    origin: Vector3;\n    direction: Vector3;\n\n    constructor(origin: Vector3, direction: Vector3) {\n        this.origin = origin;\n        this.direction = direction.normalize(); // Stellen Sie sicher, dass die Richtung normalisiert ist\n    }\n\n    /**\n     * Berechnet einen Punkt auf dem Strahl bei einem bestimmten Skalar 't'.\n     * @param t Der Skalarwert, der bestimmt, wie weit entlang des Strahls der Punkt liegt.\n     * @returns Der Punkt auf dem Strahl.\n     */\n    getPoint(t: number): Vector3 {\n        return this.origin.add(this.direction.multiply(t));\n    }\n\n    /**\n     * Prüft die Intersektion dieses Strahls mit einer gegebenen Bounding Box.\n     * @param box Die Box, mit der die Intersektion geprüft werden soll.\n     * @returns True, wenn der Strahl die Box schneidet, sonst false.\n     */\n    intersectsBox(box: Box3, maxDistance: number = Infinity): boolean {\n        let tmin = (box.min.x - this.origin.x) / this.direction.x;\n        let tmax = (box.max.x - this.origin.x) / this.direction.x;\n\n        if (tmin > tmax) [tmin, tmax] = [tmax, tmin];\n\n        let tymin = (box.min.y - this.origin.y) / this.direction.y;\n        let tymax = (box.max.y - this.origin.y) / this.direction.y;\n\n        if (tymin > tymax) [tymin, tymax] = [tymax, tymin];\n\n        if ((tmin > tymax) || (tymin > tmax))\n            return false;\n\n        if (tymin > tmin) tmin = tymin;\n        if (tymax < tmax) tmax = tymax;\n\n        let tzmin = (box.min.z - this.origin.z) / this.direction.z;\n        let tzmax = (box.max.z - this.origin.z) / this.direction.z;\n\n        if (tzmin > tzmax) [tzmin, tzmax] = [tzmax, tzmin];\n\n        if ((tmin > tzmax) || (tzmin > tmax))\n            return false;\n\n        if (tzmin > tmin) tmin = tzmin;\n        if (tzmax < tmax) tmax = tzmax;\n\n        return (tmin < maxDistance) && (tmax > 0);\n    }\n}\n\nexport { Ray }","import { Camera } from \"./Camera\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { CameraData } from \"./CameraData\";\nimport {Vector4} from \"../math/Vector4\";\nimport {Plane} from \"../math/Plane\";\n\nclass CameraHelper {\n    private _camera:Camera;\n    private _cameraData: CameraData;\n    \n    private _frustumCorners: Vector3[];\n    \n    constructor(camera: Camera) {\n        this._camera = camera;\n        this._cameraData = this._camera.data;\n        this._frustumCorners = [];\n    }\n    \n    public calculateFrustum(): Vector3[] {\n        \n        const near = this._cameraData.near;\n        const far = this._cameraData.far;\n        const fovX = this._cameraData.fx;\n        const fovY = this._cameraData.fy;\n        \n        const halfHeightNear = Math.tan(fovY / 2) * near;\n        const halfWidthNear = Math.tan(fovX / 2) * near;\n        \n        const halfHeightFar = Math.tan(fovY / 2) * far;\n        const halfWidthFar = Math.tan(fovX / 2) * far;\n        \n        const nearTopLeft = new Vector3(-halfWidthNear, halfHeightNear, -near);\n        const nearTopRight = new Vector3(halfWidthNear, halfHeightNear, -near);\n        const nearBottomLeft = new Vector3(-halfWidthNear, -halfHeightNear, -near);\n        const nearBottomRight = new Vector3(halfWidthNear, -halfHeightNear, -near);\n\n        const farTopLeft = new Vector3(-halfWidthFar, halfHeightFar, far);\n        const farTopRight = new Vector3(halfWidthFar, halfHeightFar, far);\n        const farBottomLeft = new Vector3(-halfWidthFar, -halfHeightFar, far);\n        const farBottomRight = new Vector3(halfWidthFar, -halfHeightFar, far);\n\n        this._frustumCorners.push(\n            this.cameraToWorldCoords(nearTopLeft),\n            this.cameraToWorldCoords(nearTopRight),\n            this.cameraToWorldCoords(nearBottomLeft),\n            this.cameraToWorldCoords(nearBottomRight),\n            this.cameraToWorldCoords(farTopLeft),\n            this.cameraToWorldCoords(farTopRight),\n            this.cameraToWorldCoords(farBottomLeft),\n            this.cameraToWorldCoords(farBottomRight)\n        );\n\n        return this._frustumCorners;\n    }\n    \n    public cameraToWorldCoords(cameraCoords: Vector3): Vector3 {\n        const cameraSpaceCoords = new Vector4(cameraCoords.x, cameraCoords.y, cameraCoords.z, 1);\n        \n        const inverseViewMatrix = this._cameraData.viewMatrix.invert();\n        const worldSpaceCoords = cameraSpaceCoords.multiply(inverseViewMatrix);\n        \n        const worldSpacePosition = new Vector3(\n            worldSpaceCoords.x / worldSpaceCoords.w,\n            worldSpaceCoords.y / worldSpaceCoords.w,\n            worldSpaceCoords.z / worldSpaceCoords.w,\n        );\n        \n        return worldSpacePosition;\n    }\n\n    public pointInFrustum(point: Vector3): boolean {\n        const planes = [\n            this.createPlane(this._frustumCorners[0], this._frustumCorners[1], this._frustumCorners[2]), // Near plane\n            this.createPlane(this._frustumCorners[4], this._frustumCorners[5], this._frustumCorners[6]), // Far plane\n            \n            this.createPlane(this._frustumCorners[0], this._frustumCorners[2], this._frustumCorners[4]), // left\n            this.createPlane(this._frustumCorners[1], this._frustumCorners[3], this._frustumCorners[5]), // right\n            this.createPlane(this._frustumCorners[0], this._frustumCorners[1], this._frustumCorners[4]), // bottom\n            this.createPlane(this._frustumCorners[2], this._frustumCorners[3], this._frustumCorners[6]), // top\n        ];\n        \n        return  planes[0].distanceToPoint(point) <= 0 && // before near plane\n                planes[1].distanceToPoint(point) >= 0 && // behind far plane\n                planes[2].distanceToPoint(point) <= 0 && // right from left plane\n                planes[3].distanceToPoint(point) >= 0 && // left from right plane\n                planes[4].distanceToPoint(point) >= 0 && // over bottom plane\n                planes[5].distanceToPoint(point) <= 0; // under top plane\n    }\n\n    private createPlane(a: Vector3, b: Vector3, c: Vector3): FrustumPlane {\n        const ab = b.subtract(a);\n        const ac = c.subtract(a);\n        const normal = ab.cross(ac).normalize();\n        const d = -normal.dot(a);\n        return new FrustumPlane(normal, d);\n    }\n}\n\nclass FrustumPlane {\n    normal: Vector3;\n    d: number;\n\n    constructor(normal: Vector3, d: number) {\n        this.normal = normal;\n        this.d = d;\n    }\n\n    distanceToPoint(point: Vector3): number {\n        // Berechnet den Abstand des Punktes von der Ebene\n        return this.normal.dot(point) + this.d;\n    }\n}\n\n\nexport { CameraHelper }","import {WebGLRenderer} from \"../renderers/WebGLRenderer\";\nimport {Vector3} from \"../math/Vector3\";\nimport {CubeVisualisationProgram} from \"../renderers/webgl/programs/individual/CubeVisualisationProgram\";\nimport {ShaderProgram} from \"../renderers/webgl/programs/ShaderProgram\";\n\nclass Utils {\n    \n    public static draw(renderer: WebGLRenderer, point:Vector3, size: number) {\n        let upperLeftCorner = new Float32Array([point.x+(size/2), point.y+(size/2), point.z+(size/2)]);\n        let bottomRightCorner = new Float32Array([point.x-(size/2), point.y-(size/2), point.z-(size/2)]);\n\n        var renderProgram = new CubeVisualisationProgram(renderer, [], [upperLeftCorner, bottomRightCorner]);\n        renderer.addProgram(renderProgram);\n    }\n\n    public static drawCone(renderer: WebGLRenderer, points:Vector3[]) {\n        \n        let vecs: Float32Array[] = []\n        for(let i = 0; i < points.length; i++) {\n            vecs.push(new Float32Array([points[i].x, points[i].y, points[i].z]))\n        }\n        var renderProgram = new CubeVisualisationProgram(renderer, [], vecs);\n        renderer.addProgram(renderProgram);\n    }\n}\n\nexport { Utils }","import { BVHNode } from \"../../../math/BVHNode\";\nimport { SingleSplat } from \"../../../splats/SingleSplat\";\nimport { Camera } from \"../../../cameras/Camera\";\nimport { Ray } from \"../../../math/Ray\"\nimport {BVH} from \"../../../math/BVH\";\nimport {Box3} from \"../../../math/Box3\";\nimport {Vector3} from \"../../../math/Vector3\";\nimport {RenderProgram} from \"../programs/RenderProgram\";\nimport {RenderData} from \"./RenderData\";\nimport {WebGLRenderer} from \"../../WebGLRenderer\";\nimport { CubeVisualisationProgram } from \"../programs/individual/CubeVisualisationProgram\";\nimport {CameraHelper} from \"../../../cameras/CameraHelper\";\nimport {Utils} from \"../../../utils/Utils\";\n\nclass Raycaster {\n    private bvh: BVHNode | undefined;\n    private renderer: WebGLRenderer;\n    private renderProgram: RenderProgram;\n    \n    public testBox: (point1: Float32Array, point2: Float32Array) => SingleSplat[] | null;\n    public testCameraViewFrustum: (camera: Camera) => SingleSplat[] | null;\n\n    constructor(renderer: WebGLRenderer, buildBVH: boolean) {\n        let singleSplatLookup: SingleSplat[] = [];\n        this.renderer = renderer;\n        this.renderProgram = renderer.renderProgram;\n        \n        if(buildBVH) {\n            const renderData = this.renderProgram.renderData as RenderData;\n            for (const singleSplat of renderData.singleOffsets.keys()) {\n                const splatBounds = singleSplat.bounds;\n                singleSplatLookup.push(singleSplat);\n            }\n            this.bvh = new BVHNode(singleSplatLookup);\n        }\n\n        this.testBox = (point1: Float32Array, point2: Float32Array) => {\n            const renderData = this.renderProgram.renderData as RenderData;\n            \n            if(renderData === undefined)\n                return null;\n\n            singleSplatLookup = [];\n            \n            const [x1, y1, z1] = point1;\n            const [x2, y2, z2] = point2;\n            const minPoint = new Vector3(x1, y1, z1);\n            const maxPoint = new Vector3(x2, y2, z2);\n            \n            const queryBox = new Box3(maxPoint, minPoint);\n            queryBox.permute();\n            \n            \n            for (const singleSplat of renderData.singleOffsets.keys()) {\n                if(queryBox.contains(singleSplat.bounds.center())) {\n                    \n                    singleSplatLookup.push(singleSplat)\n                }\n            }\n\n            return singleSplatLookup;\n        }\n\n        this.testCameraViewFrustum = (camera: Camera, showFrustum: boolean = false, showForSeconds: number = -1) => {\n            this.renderer.removeAllPrograms();\n            const renderData = this.renderProgram.renderData as RenderData;\n            let camHelper: CameraHelper = new CameraHelper(camera);\n            let corners: Vector3[] = camHelper.calculateFrustum();\n            \n            singleSplatLookup = [];\n            \n            if(showFrustum) {\n                Utils.drawCone(this.renderer,corners)\n                if(showForSeconds > 0) {\n                    setTimeout(function() {\n                        renderer.removeAllPrograms();\n                    }, showForSeconds * 1000);\n                } \n            }\n\n            for (const singleSplat of renderData.singleOffsets.keys()) {\n                if(camHelper.pointInFrustum(singleSplat.bounds.center())) {\n\n                    singleSplatLookup.push(singleSplat)\n                }\n            }\n\n            return singleSplatLookup;\n        }\n    }\n\n    public testPointSingleSplats(x: number, y: number, camera: Camera, maxDistance: number): SingleSplat[] | null {\n        if(this.bvh === undefined)\n            return null;\n        \n        if (!camera) {\n            console.error(\"Camera is not initialized\");\n            return null;\n        }\n\n        const ray = new Ray(camera.position, camera.screenPointToRay(x, y));\n        return this.bvh.intersects(ray, maxDistance);\n    }\n}\n\nexport { Raycaster }","import { ShaderProgram } from \"../ShaderProgram\";\nimport { WebGLRenderer } from \"../../../WebGLRenderer\";\nimport { ShaderPass } from \"../../passes/ShaderPass\";\n\nconst axisVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n`;\n\nconst axisFragmentShader = /*glsl*/ `#version 300 es\nprecision mediump float;\nuniform vec4 axisColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = axisColor;\n}\n`;\n\nclass AxisProgram extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        super(renderer, passes);\n\n        const gl = renderer.gl;\n\n        let vertexBuffer: WebGLBuffer;\n\n        let positionAttribute: number;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_color: WebGLUniformLocation;\n\n        const xVertices = new Float32Array([-50, 0, 0, 50, 0, 0]);\n        const yVertices = new Float32Array([0, -50, 0, 0, 50, 0]);\n        const zVertices = new Float32Array([0, 0, -50, 0, 0, 50]);\n\n        const xColor = new Float32Array([1, 0, 0, 0.5]);\n        const yColor = new Float32Array([0, 1, 0, 0.5]);\n        const zColor = new Float32Array([0, 0.5, 1, 0.5]);\n\n        this._initialize = () => {\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;;\n            if (!vertexBuffer) {\n                console.error(\"Failed to create the buffer object\");\n                return;\n            }\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            if (positionAttribute < 0) {\n                console.error(\"Failed to get the storage location of position\");\n                return;\n            }\n            gl.enableVertexAttribArray(positionAttribute);\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_color = gl.getUniformLocation(this.program, \"axisColor\") as WebGLUniformLocation;\n\n            if (!u_projection || !u_view || !u_color) {\n                console.error(\"Failed to get the storage location of uniform variables\");\n                return;\n            }\n\n            console.log(\"Initialized AxisProgram successfully\");\n        };\n\n        const drawAxis = (vertices: Float32Array, color: Float32Array) => {\n            console.log(\"Drawing axis with vertices:\", vertices, \"and color:\", color);\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.LINES, 0, 2);\n        };\n\n        this._resize = () => {};\n\n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            console.log(\"Rendering AxisProgram\");\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            drawAxis(xVertices, xColor);\n            drawAxis(yVertices, yColor);\n            drawAxis(zVertices, zColor);\n        };\n\n        this._dispose = () => {\n            console.log(\"Disposing AxisProgram resources\");\n            gl.deleteBuffer(vertexBuffer);\n        };\n    }\n\n    protected _getVertexSource() {\n        return axisVertexShader;\n    }\n\n    protected _getFragmentSource() {\n        return axisFragmentShader;\n    }\n}\n\nexport { AxisProgram };\n","import { ShaderProgram } from \"../ShaderProgram\";\nimport { WebGLRenderer } from \"../../../WebGLRenderer\";\nimport { ShaderPass } from \"../../passes/ShaderPass\";\n\nconst gridVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\nuniform vec2 viewport;\n\nin vec2 position;\n\nvoid main() {\n    int numLines = 100;\n    float lineOffset = float(gl_VertexID / 4 - numLines / 2);\n    vec4 worldPosition;\n\n    if (gl_VertexID % 4 == 0) {\n        worldPosition = view * vec4(-50, 0.0, lineOffset, 1.0);\n    } else if (gl_VertexID % 4 == 1) {\n        worldPosition = view * vec4(50, 0.0, lineOffset, 1.0);\n    } else if (gl_VertexID % 4 == 2) {\n        worldPosition = view * vec4(lineOffset, 0.0, -50, 1.0);\n    } else {\n        worldPosition = view * vec4(lineOffset, 0.0, 50, 1.0);\n    }\n\n    gl_Position = projection * worldPosition;\n}\n`;\n\nconst gridFragmentShader = /*glsl*/ `#version 300 es\n    precision mediump float;\n    out vec4 outColor;\n\n    void main() {\n        outColor = vec4(1.0, 1.0, 1.0, 0.1);\n    }\n`;\n\nclass GridProgram extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        super(renderer, passes);\n\n        const gl = renderer.gl;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n\n        this._initialize = () => {\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n        };\n\n        this._resize = () => {\n            gl.uniform2fv(u_viewport, new Float32Array([renderer.canvas.width, renderer.canvas.height]));\n        };\n\n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            gl.drawArrays(gl.LINES, 0, 400);\n        };\n\n        this._dispose = () => {};\n    }\n\n    protected _getVertexSource() {\n        return gridVertexShader;\n    }\n\n    protected _getFragmentSource() {\n        return gridFragmentShader;\n    }\n}\n\nexport { GridProgram };","import { ShaderProgram } from \"../ShaderProgram\";\nimport { WebGLRenderer } from \"../../../WebGLRenderer\";\nimport { ShaderPass } from \"../../passes/ShaderPass\";\nimport { Plane } from \"../../../../math/Plane\";\nimport { Vector3 } from \"../../../../math/Vector3\";\n\nconst planeVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n`;\n\nconst planeFragmentShader = /*glsl*/ `#version 300 es\nprecision mediump float;\nuniform vec4 planeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = planeColor;\n}\n`;\n\nclass PlaneProgram extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n    protected getPlaneVertices: (size: number) => Float32Array;\n\n    private plane: Plane;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[], plane: Plane) {\n        super(renderer, passes);\n\n        this.plane = plane;\n\n        const gl = renderer.gl;\n\n        let vertexBuffer: WebGLBuffer;\n\n        let positionAttribute: number;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_color: WebGLUniformLocation;\n        \n        const planeColor = new Float32Array([0.5, 0.5, 0.5, 0.5]);\n\n        const normal = this.plane.normal;\n        const constant = this.plane.constant;\n\n        // Create a point on the plane\n        const point = normal.clone().multiply(constant);\n        const xVertices = new Float32Array([point.x, point.y, point.z, point.x + normal.x*3, point.y + normal.y*3, point.z + normal.z*3]);\n        const xColor = new Float32Array([1, 0, 0, 0.5]);\n        \n\n        this._initialize = () => {\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_color = gl.getUniformLocation(this.program, \"planeColor\") as WebGLUniformLocation;\n        };\n\n        const drawAxis = (vertices: Float32Array, color: Float32Array) => {\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.LINES, 0, 2);\n        };\n\n        const drawPlane = () => {\n            const size = 5; // Size of the plane for rendering purposes\n            const vertices = this.getPlaneVertices(size);\n\n            gl.uniform4fv(u_color, planeColor);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n        };\n\n        this.getPlaneVertices = (size: number) => {\n            const normal = this.plane.normal;\n            const constant = this.plane.constant;\n\n            // Create a point on the plane\n            const point = normal.clone().multiply(constant);\n\n            // Generate two vectors on the plane\n            const right = new Vector3(1, 0, 0);\n            if (Math.abs(normal.dot(right)) > 0.99) {\n                right.set(0, 1, 0);\n            }\n            const up = right.cross(normal).normalize();\n            right.crossVectors(normal, up).normalize();\n\n            const halfSize = size / 2;\n            const vertices = new Float32Array([\n                ...point.clone().add(right.clone().multiply(-halfSize)).add(up.clone().multiply(-halfSize)).toArray(),\n                ...point.clone().add(right.clone().multiply(halfSize)).add(up.clone().multiply(-halfSize)).toArray(),\n                ...point.clone().add(right.clone().multiply(halfSize)).add(up.clone().multiply(halfSize)).toArray(),\n                ...point.clone().add(right.clone().multiply(-halfSize)).add(up.clone().multiply(halfSize)).toArray(),\n            ]);\n            return vertices;\n        };\n\n        this._resize = () => {};\n\n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            const gl = this.renderer.gl;\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            drawPlane();\n            drawAxis(xVertices, xColor)\n        };\n\n        this._dispose = () => {};\n    }\n\n    protected _getVertexSource() {\n        return planeVertexShader;\n    }\n\n    protected _getFragmentSource() {\n        return planeFragmentShader;\n    }\n}\n\nexport { PlaneProgram };\n","import {ShaderProgram} from \"../ShaderProgram\";\nimport {WebGLRenderer} from \"../../../WebGLRenderer\";\nimport {ShaderPass} from \"../../passes/ShaderPass\";\n\nconst axisVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n`;\n\nconst axisFragmentShader = /*glsl*/ `#version 300 es\nprecision mediump float;\nuniform vec4 cubeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = cubeColor;\n}\n`;\n\nclass MultibleCubesProgram extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[], upperLeftCorners: Float32Array[], bottomRightCorners: Float32Array[], color: Float32Array = new Float32Array([1, 0, 0, 0.2])) {\n        super(renderer, passes);\n\n        const gl = renderer.gl;\n\n        let vertexBuffer: WebGLBuffer;\n\n        let positionAttribute: number;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_color: WebGLUniformLocation;\n\n        let tempAllCorners = [];\n        let tempAllSurface = [];\n        \n        let numberOfCubes = upperLeftCorners.length;\n        \n        for(var i = 0; i < numberOfCubes; i++) {\n            const [x1, y1, z1] = upperLeftCorners[i];\n            const [x2, y2, z2] = bottomRightCorners[i];\n\n\n            const corners = new Float32Array([\n                x1, y1, z1, x2, y1, z1,  // Linie von P1 zu P2\n                x1, y1, z1, x1, y2, z1,  // Linie von P1 zu P3\n                x1, y1, z1, x1, y1, z2,  // Linie von P1 zu P5\n                x2, y1, z1, x2, y2, z1,  // Linie von P2 zu P4\n                x2, y1, z1, x2, y1, z2,  // Linie von P2 zu P6\n                x1, y2, z1, x2, y2, z1,  // Linie von P3 zu P4\n                x1, y2, z1, x1, y2, z2,  // Linie von P3 zu P7\n                x1, y1, z2, x2, y1, z2,  // Linie von P5 zu P6\n                x1, y1, z2, x1, y2, z2,  // Linie von P5 zu P7\n                x2, y2, z1, x2, y2, z2,  // Linie von P4 zu P8\n                x2, y1, z2, x2, y2, z2,  // Linie von P6 zu P8\n                x1, y2, z2, x2, y2, z2   // Linie von P7 zu P8\n            ]);\n            tempAllCorners.push(...corners);\n\n\n            const surface = new Float32Array([\n                x1, y1, z1, x2, y1, z1, x1, y2, z1, x2, y1, z1, x2, y2, z1, x1, y2, z1,\n                x1, y1, z2, x2, y1, z2, x1, y2, z2, x2, y1, z2, x2, y2, z2, x1, y2, z2,\n                x1, y1, z1, x1, y1, z2, x1, y2, z1, x1, y2, z2, x1, y1, z2, x1, y2, z1,\n                x2, y1, z1, x2, y1, z2, x2, y2, z1, x2, y2, z2, x2, y1, z2, x2, y2, z1,\n                x1, y1, z1, x2, y1, z1, x1, y1, z2, x2, y1, z2, x2, y1, z1, x1, y1, z2,\n                x1, y2, z1, x2, y2, z1, x1, y2, z2, x2, y2, z2, x2, y2, z1, x1, y2, z2\n            ])\n            tempAllSurface.push(...surface);\n        }\n\n        let allCorners = new Float32Array(tempAllCorners);\n        let allsurface = new Float32Array(tempAllSurface);\n        \n\n        const colorLines = new Float32Array([0, 0, 0, 1]);\n\n        this._initialize = () => {\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_color = gl.getUniformLocation(this.program, \"cubeColor\") as WebGLUniformLocation;\n        };\n\n        const drawCubeLines = (vertices: Float32Array, color: Float32Array) => {\n            gl.lineWidth(5);\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.LINES, 0, 24 * numberOfCubes);\n        };\n\n        const drawCube = (vertices: Float32Array, color: Float32Array) => {\n            gl.lineWidth(5);\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.TRIANGLES, 0, 36 * numberOfCubes);\n        };\n\n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            drawCubeLines(allCorners, colorLines);\n            drawCube(allsurface, color)\n        };\n\n        this._resize = () => {};\n\n        this._dispose = () => {};\n    }\n\n    protected _getFragmentSource(): string {\n        return axisFragmentShader;\n    }\n\n    protected _getVertexSource(): string {\n        return axisVertexShader;\n    }\n\n}\n\nexport { MultibleCubesProgram }\n","import { ShaderProgram } from \"../ShaderProgram\";\nimport { WebGLRenderer } from \"../../../WebGLRenderer\";\nimport { ShaderPass } from \"../../passes/ShaderPass\";\nimport {NewRay} from \"../../../../math/NewRay\";\n\nconst axisVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n`;\n\nconst axisFragmentShader = /*glsl*/ `#version 300 es\nprecision mediump float;\nuniform vec4 axisColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = axisColor;\n}\n`;\n\nclass RayProgram extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[], ray: NewRay) {\n        super(renderer, passes);\n\n        const gl = renderer.gl;\n\n        let vertexBuffer: WebGLBuffer;\n\n        let positionAttribute: number;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_color: WebGLUniformLocation;\n\n\n        const xVertices = new Float32Array([ray.origin.x, ray.origin.y, ray.origin.z, ray.origin.x + ray.direction.x*10, ray.origin.y + ray.direction.y*10, ray.origin.z + ray.direction.z*10]);\n\n        const xColor = new Float32Array([1, 0, 0, 0.5]);\n\n        this._initialize = () => {\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_color = gl.getUniformLocation(this.program, \"axisColor\") as WebGLUniformLocation;\n        };\n\n        const drawAxis = (vertices: Float32Array, color: Float32Array) => {\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.LINES, 0, 2);\n        };\n\n        this._resize = () => {};\n\n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            drawAxis(xVertices, xColor);\n        };\n\n        this._dispose = () => {};\n    }\n\n    protected _getVertexSource() {\n        return axisVertexShader;\n    }\n\n    protected _getFragmentSource() {\n        return axisFragmentShader;\n    }\n}\n\nexport { RayProgram };\n","import {ShaderProgram} from \"../renderers/webgl/programs/ShaderProgram\";\nimport {WebGLRenderer} from \"../renderers/WebGLRenderer\";\nimport {ShaderPass} from \"../renderers/webgl/passes/ShaderPass\";\nimport {Octree} from \"./Octree\";\n\nconst axisVertexShader = /*glsl*/ `#version 300 es\nuniform mat4 projection, view;\n\nin vec3 position;\n\nvoid main() {\n    gl_Position = projection * view * vec4(position, 1.0);\n}\n`;\n\nconst axisFragmentShader = /*glsl*/ `#version 300 es\nprecision mediump float;\nuniform vec4 cubeColor;\nout vec4 outColor;\n\nvoid main() {\n    outColor = cubeColor;\n}\n`;\n\nclass OctreeHelper extends ShaderProgram {\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[], octree: Octree, level: number = 0, color: Float32Array = new Float32Array([1, 0, 0, 1])) {\n        super(renderer, passes);\n\n        const gl = renderer.gl;\n\n        let vertexBuffer: WebGLBuffer;\n\n        let positionAttribute: number;\n\n        let u_projection: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_color: WebGLUniformLocation;\n\n        let tempAllCorners = [];\n        \n        const result = octree?.findNodesByLevel(level) || [];\n        \n        for(let i = 0; i < result.length; i++) {\n            const [x1, y1, z1] = [result[i].min.x, result[i].min.y, result[i].min.z]\n            const [x2, y2, z2] = [result[i].max.x, result[i].max.y, result[i].max.z]\n\n\n            const corners = new Float32Array([\n                x1, y1, z1, x2, y1, z1,  // Linie von P1 zu P2\n                x1, y1, z1, x1, y2, z1,  // Linie von P1 zu P3\n                x1, y1, z1, x1, y1, z2,  // Linie von P1 zu P5\n                x2, y1, z1, x2, y2, z1,  // Linie von P2 zu P4\n                x2, y1, z1, x2, y1, z2,  // Linie von P2 zu P6\n                x1, y2, z1, x2, y2, z1,  // Linie von P3 zu P4\n                x1, y2, z1, x1, y2, z2,  // Linie von P3 zu P7\n                x1, y1, z2, x2, y1, z2,  // Linie von P5 zu P6\n                x1, y1, z2, x1, y2, z2,  // Linie von P5 zu P7\n                x2, y2, z1, x2, y2, z2,  // Linie von P4 zu P8\n                x2, y1, z2, x2, y2, z2,  // Linie von P6 zu P8\n                x1, y2, z2, x2, y2, z2   // Linie von P7 zu P8\n            ]);\n            tempAllCorners.push(...corners);\n        }\n\n        let allCorners = new Float32Array(tempAllCorners);\n\n\n        const colorLines = color;\n\n        this._initialize = () => {\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            u_color = gl.getUniformLocation(this.program, \"cubeColor\") as WebGLUniformLocation;\n        };\n\n        const drawCubeLines = (vertices: Float32Array, color: Float32Array) => {\n            gl.lineWidth(100);\n            gl.uniform4fv(u_color, color);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n            gl.vertexAttribPointer(positionAttribute, 3, gl.FLOAT, false, 0, 0);\n            gl.drawArrays(gl.LINES, 0, 24 * result.length);\n        };\n\n        this._render = () => {\n            if (!this._camera) {\n                throw new Error(\"Camera not set\");\n            }\n\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            drawCubeLines(allCorners, colorLines);\n        };\n\n        this._resize = () => {};\n\n        this._dispose = () => {};\n    }\n\n    protected _getFragmentSource(): string {\n        return axisFragmentShader;\n    }\n\n    protected _getVertexSource(): string {\n        return axisVertexShader;\n    }\n\n}\n\nexport { OctreeHelper }\n","import { Plane } from \"./Plane\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Box3 } from \"./Box3\";\nimport { Vector3 } from \"./Vector3\";\nimport {WebGLRenderer} from \"../renderers/WebGLRenderer\";\nimport {CubeVisualisationProgram} from \"../renderers/webgl/programs/individual/CubeVisualisationProgram\";\nimport {ShaderProgram} from \"../renderers/webgl/programs/ShaderProgram\";\nimport {PlaneProgram} from \"../renderers/webgl/programs/individual/PlaneProgram\";\nimport {NewRay} from \"./NewRay\";\nimport {Camera} from \"../cameras/Camera\";\n\nconst _vector = new Vector3();\n\nfunction intersectPlanes(p1: Plane, p2: Plane, p3: Plane): Vector3 | null {\n    const n1 = p1.normal;\n    const n2 = p2.normal;\n    const n3 = p3.normal;\n    \n    const det = n1.dot(n2.cross(n3))\n    \n    if(Math.abs(det) < 1e-6) {\n        return null;\n    }\n\n    const c1 = p1.constant;\n    const c2 = p2.constant;\n    const c3 = p3.constant;\n\n    const n2n3 = n2.cross(n3).multiply(c1);\n    const n3n1 = n3.cross(n1).multiply(c2);\n    const n1n2 = n1.cross(n2).multiply(c3);\n\n    const point = new Vector3().addVectors(n2n3, n3n1).add(n1n2).divide(det);\n    return point;\n}\n\nclass Frustum {\n    planes: Plane[];\n    frustumCorners: Vector3[] | undefined;\n    frustumRenderProgram: ShaderProgram | undefined;\n    needsUpdate: boolean;\n\n    margin: number | undefined;\n    marginFrustum: Frustum | undefined;\n\n    constructor(\n        p0: Plane = new Plane(),\n        p1: Plane = new Plane(),\n        p2: Plane = new Plane(),\n        p3: Plane = new Plane(),\n        p4: Plane = new Plane(),\n        p5: Plane = new Plane()\n    ) {\n        this.planes = [p0, p1, p2, p3, p4, p5];\n        this.needsUpdate = true;\n    }\n\n    setFromCube(cube: Box3, camera: Camera) {\n        // 1. Berechne die Eckpunkte des Würfels\n        const points = cube.getCorners();\n\n        // 2. Projeziere die Eckpunkte aus der Sicht der Kamera\n        const projectedPoints = points.map(point => camera.worldToCameraPoint(point));\n\n        // 3. Definiere die Ebenen des Frustums\n        this.setFromPoints(\n            projectedPoints[0], // Near-Top-Left\n            projectedPoints[1], // Near-Top-Right\n            projectedPoints[2], // Near-Bottom-Left\n            projectedPoints[3], // Near-Bottom-Right\n            projectedPoints[4], // Far-Top-Left\n            projectedPoints[5], // Far-Top-Right\n            projectedPoints[6], // Far-Bottom-Left\n            projectedPoints[7]  // Far-Bottom-Right\n        );\n        \n        this.needsUpdate = true;\n    }\n    \n    \n    setFromPoints(\n        nearTopLeft: Vector3, \n        nearTopRight: Vector3, \n        nearBottomLeft: Vector3, \n        nearBottomRight: Vector3, \n        farTopLeft: Vector3, \n        farTopRight: Vector3, \n        farBottomLeft: Vector3, \n        farBottomRight: Vector3\n    ) {\n        const planes = this.planes;\n\n        // Near Plane\n        planes[0].setFromCoplanarPoints(nearTopLeft, nearTopRight, nearBottomRight).normalize();\n\n        // Far Plane\n        planes[1].setFromCoplanarPoints(farTopRight, farTopLeft, farBottomLeft).normalize();\n\n        // Left Plane\n        planes[2].setFromCoplanarPoints(nearTopLeft, nearBottomLeft, farBottomLeft).normalize();\n\n        // Right Plane\n        planes[3].setFromCoplanarPoints(nearBottomRight, nearTopRight, farTopRight).normalize();\n\n        // Top Plane\n        planes[4].setFromCoplanarPoints(nearTopLeft, farTopLeft, nearTopRight).normalize();\n\n        // Bottom Plane\n        planes[5].setFromCoplanarPoints(nearBottomLeft, nearBottomRight, farBottomRight).normalize();\n\n        this.needsUpdate = true;\n    }\n    \n    setFromProjectionMatrix(m: Matrix4) {\n        const planes = this.planes;\n        const me = m.buffer;\n\n        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\n        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\n        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\n        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\n\n        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\n        this.needsUpdate = true;\n    }\n\n    intersectsBox(box: Box3, renderer: WebGLRenderer | null = null): boolean {\n        const planes = this.planes;\n        \n        for (let i = 0; i < 6; i++) {\n            const plane = planes[i];\n\n            // corner at max distance\n            _vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n            _vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n            _vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n            \n            if (plane.distanceToPoint(_vector) < 0) {\n                \n                if(renderer !== null) {\n                    let planeRenderProgram = new PlaneProgram(renderer, [], plane);\n                    renderer.addProgram(planeRenderProgram);\n\n                    let upperLeftCorner = new Float32Array([_vector.x - 0.01, _vector.y - 0.01, _vector.z - 0.01]);\n                    let bottomRightCorner = new Float32Array([_vector.x + 0.01, _vector.y + 0.01, _vector.z + 0.01]);\n\n                    let renderProgram = new CubeVisualisationProgram(renderer, [], [upperLeftCorner, bottomRightCorner]);\n                    renderer.addProgram(renderProgram);\n                }\n                \n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    getFrustumPoints(): Vector3[] {\n        if(!this.needsUpdate && this.frustumCorners !== undefined) {\n            return this.frustumCorners;\n        }\n\n        this.frustumCorners = [];\n        const planes = this.planes;\n\n        // Vorderseite\n        this.frustumCorners.push(intersectPlanes(planes[4], planes[0], planes[2])!); // Near-Left-Top\n        this.frustumCorners.push(intersectPlanes(planes[4], planes[1], planes[2])!); // Near-Right-Top\n        this.frustumCorners.push(intersectPlanes(planes[4], planes[0], planes[3])!); // Near-Left-Bottom\n        this.frustumCorners.push(intersectPlanes(planes[4], planes[1], planes[3])!); // Near-Right-Bottom\n\n        // Rückseite (Far)\n        this.frustumCorners.push(intersectPlanes(planes[5], planes[0], planes[2])!); // Far-Left-Top         \n        this.frustumCorners.push(intersectPlanes(planes[5], planes[1], planes[2])!); // Far-Right-Top\n        this.frustumCorners.push(intersectPlanes(planes[5], planes[0], planes[3])!); // Far-Left-Bottom\n        this.frustumCorners.push(intersectPlanes(planes[5], planes[1], planes[3])!); // Far-Right-Bottom\n\n        this.needsUpdate = false;        \n        return this.frustumCorners;\n    }\n    \n    drawFrustum(renderer: WebGLRenderer) {\n        let points = this.getFrustumPoints();\n        let corners = []\n        for(let i = 0; i < points.length; i++) {\n            corners.push(new Float32Array([points[i].x, points[i].y, points[i].z]))\n        }\n\n        this.frustumRenderProgram = new CubeVisualisationProgram(renderer, [], corners);\n        renderer.addProgram(this.frustumRenderProgram);\n    }\n\n    distanceToPoint(point: Vector3): number {\n        let minDistance = Infinity;\n        for (const plane of this.planes) {\n            const distance = plane.distanceToPoint(point);\n            if (distance < minDistance) {\n                minDistance = distance;\n            }\n        }\n        return minDistance;\n    }\n    \n    ereaseFrustum(renderer: WebGLRenderer) {\n        if(this.frustumRenderProgram !== undefined) {\n            renderer.removeProgram(this.frustumRenderProgram);\n        }\n    }\n\n    getRays(): NewRay[] {\n        if (!this.frustumCorners) {\n            this.frustumCorners = this.getFrustumPoints();\n        }\n\n        const rays = [];\n\n        // Calculate rays from near plane corners to far plane corners\n        for (let i = 0; i < 7; i+=2) {\n            const nearCorner = this.frustumCorners[i];\n            const farCorner = this.frustumCorners[i + 1];\n            const direction = farCorner.clone().sub(nearCorner).normalize();\n            rays.push(new NewRay(nearCorner, direction));\n        }\n\n        return rays;\n    }\n    \n    intersectFrustum(otherFrustum: Frustum): Box3{\n        const intersectionPoints: Vector3[] = [];\n        \n        intersectionPoints.push(intersectPlanes( this.planes[2], otherFrustum.planes[3], otherFrustum.planes[4])!);\n        intersectionPoints.push(intersectPlanes( this.planes[2], otherFrustum.planes[2], otherFrustum.planes[4])!);\n        intersectionPoints.push(intersectPlanes( this.planes[2], otherFrustum.planes[3], otherFrustum.planes[5])!);\n        intersectionPoints.push(intersectPlanes( this.planes[2], otherFrustum.planes[2], otherFrustum.planes[5])!);\n\n        intersectionPoints.push(intersectPlanes( this.planes[3], otherFrustum.planes[3], otherFrustum.planes[4])!);\n        intersectionPoints.push(intersectPlanes( this.planes[3], otherFrustum.planes[2], otherFrustum.planes[4])!);\n        intersectionPoints.push(intersectPlanes( this.planes[3], otherFrustum.planes[3], otherFrustum.planes[5])!);\n        intersectionPoints.push(intersectPlanes( this.planes[3], otherFrustum.planes[2], otherFrustum.planes[5])!);\n\n        const boundingBox = new Box3(\n            new Vector3(Infinity, Infinity, Infinity),\n            new Vector3(-Infinity, -Infinity, -Infinity),\n        );\n        \n        console.log(boundingBox.min)\n        console.log(boundingBox.max)\n        for (const point of intersectionPoints) {\n            boundingBox.expandByPoint(point);\n        }\n        \n        return boundingBox\n    }\n\n    containsPoint(point: Vector3): boolean {\n        for (const plane of this.planes) {\n            if (plane.distanceToPoint(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    containsBox(box: Box3): boolean {\n        const corners = box.getCorners();\n\n        for (const corner of corners) {\n            if (!this.containsPoint(corner)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\nexport { Frustum }","import { Matrix4 } from \"../math/Matrix4\";\nimport { NewRay } from \"../math/NewRay\";\nimport { Camera } from \"../cameras/Camera\";\nimport {Vector3} from \"../math/Vector3\";\n\nconst _matrix:Matrix4 = new Matrix4();\n\nclass NewRaycaster {\n    public ray: NewRay;\n    \n    public near: number;\n    public far: number;\n    public camera: Camera | null;\n    \n    public params;\n    \n    constructor(origin: Vector3, direction: Vector3, near: number = 0, far: number = Infinity ) {\n        this.ray = new NewRay( origin, direction );\n        \n        this.near = near;\n        this.far = far;\n        this.camera = null;\n        \n        this.params = {\n            Mesh: {},\n            Line: { threshold: 1 },\n            LOD: {},\n            Points: { threshold: 1 },\n            Sprite: {}\n        };\n    }\n\n    set( origin: Vector3, direction: Vector3 ) {\n        this.ray.set( origin, direction );\n    }\n\n    // intersectObject( object: any, recursive = true, intersects = [] ) {\n    //\n    //     intersect( object, this, intersects, recursive );\n    //\n    //     intersects.sort( ascSort );\n    //\n    //     return intersects;\n    //\n    // }\n    //\n    // intersectObjects( objects: any, recursive = true, intersects = [] ) {\n    //\n    //     for ( let i = 0, l = objects.length; i < l; i ++ ) {\n    //\n    //         intersect( objects[ i ], this, intersects, recursive );\n    //\n    //     }\n    //\n    //     intersects.sort( ascSort );\n    //\n    //     return intersects;\n    //\n    // }\n\n}\n\n// function ascSort( a, b ) {\n//\n//     return a.distance - b.distance;\n//\n// }\n//\n// function intersect( object:any, raycaster:Raycaster, intersects, recursive ) {\n//\n//     if ( object.layers.test( raycaster.layers ) ) {\n//\n//         object.raycast( raycaster, intersects );\n//\n//     }\n//\n//     if ( recursive === true ) {\n//\n//         const children = object.children;\n//\n//         for ( let i = 0, l = children.length; i < l; i ++ ) {\n//\n//             intersect( children[ i ], raycaster, intersects, true );\n//\n//         }\n//\n//     }\n// }\n\nexport { NewRaycaster }"],"names":["Vector3","constructor","x","y","z","this","set","undefined","equals","v","addVectors","a","b","add","addScaledVector","s","subVectors","subtract","sub","multiply","buffer","divide","crossVectors","ax","ay","az","bx","by","bz","cross","distanceToSquared","dx","dy","dz","toArray","dot","lerp","t","min","Math","max","getComponent","axis","Error","minComponent","maxComponent","magnitude","sqrt","distanceTo","normalize","length","lengthSq","flat","clone","clamp","copy","toString","join","One","value","Quaternion","w","q","l","w1","x1","y1","z1","w2","x2","y2","z2","inverse","apply","vecQuat","conjugate","rotatedQuat","FromEuler","e","halfX","halfY","halfZ","cy","cos","sy","sin","cp","sp","cz","sz","toEuler","sinr_cosp","cosr_cosp","atan2","sinp","abs","sign","PI","asin","siny_cosp","cosy_cosp","FromMatrix3","matrix","m","trace","FromAxisAngle","angle","halfAngle","LookRotation","direction","forward","rotAngle","acos","rotAxis","EventDispatcher","listeners","Map","addEventListener","type","listener","has","Set","get","removeEventListener","delete","hasEventListener","dispatchEvent","event","Matrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","i","determinant","invert","det","invDet","Compose","position","rotation","scale","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","ObjectAddedEvent","Event","object","super","ObjectRemovedEvent","ObjectChangedEvent","RenderedSplatsChangedEvent","Object3D","positionChanged","rotationChanged","scaleChanged","_position","_rotation","_scale","_transform","_changeEvent","_renderedSplatsChanged","update","applyPosition","applyRotation","applyScale","raiseChangeEvent","_updateMatrix","transform","SplatData","vertexCount","positions","rotations","scales","colors","firstTime","changed","detached","_vertexCount","_positions","Float32Array","_renderedPositions","_rotations","_renderedRotations","_scales","_renderedScales","_colors","Uint8Array","_renderedColors","_selection","_renderedSelection","_rendered","fill","_renderedSplats","resetRendering","translate","translation","serialize","console","log","data","RowLength","f_buffer","u_buffer","reattach","selection","rendered","receivedSplats","reduce","count","assert","byteLength","newIndex","Deserialize","renderedSplats","renderedPositions","renderedRotations","renderedScales","renderedColors","renderedSelection","calculateRenderedTransforms","tempIndex","forEach","isRendered","positionScaleIndex","rotationColorIndex","SplatvData","width","height","_data","_width","_height","Uint32Array","floor","Converter","SplatToPLY","header","properties","push","property","headerBuffer","TextEncoder","encode","plyRowLength","plyLength","output","DataView","ArrayBuffer","offset","scale_offset","opacity_offset","rot_offset","pos0","pos1","pos2","f_dc_0","SH_C0","f_dc_1","f_dc_2","alpha","opacity","scale0","scale1","scale2","rot0","rot1","rot2","rot3","setFloat32","f_dc_offset","ShaderProgram","renderer","passes","_scene","_camera","_started","_initialized","_renderer","gl","_program","createProgram","_passes","vertexShader","createShader","VERTEX_SHADER","shaderSource","_getVertexSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","_getFragmentSource","attachShader","program","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","resize","useProgram","_resize","initialize","_initialize","pass","render","scene","camera","dispose","_render","_dispose","started","CubeVisualisationProgram","points","color","vertexBuffer","positionAttribute","u_projection","u_view","u_color","corners","surface","x3","y3","z3","x4","y4","z4","x5","y5","z5","x6","y6","z6","x7","y7","z7","x8","y8","z8","colorLines","createBuffer","getAttribLocation","enableVertexAttribArray","getUniformLocation","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","uniformMatrix4fv","projectionMatrix","viewMatrix","vertices","lineWidth","uniform4fv","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","drawArrays","LINES","drawCubeLines","TRIANGLES","drawCube","Box3","contains","point","intersects","box","intersectsBox","intersectsBasedOnCenter","centerA","center","centerB","sizeA","size","sizeB","expand","permute","surfaceArea","depth","drawBox","boxColor","boxMin","boxMax","boxRenderProgram","addProgram","ereaseBox","removeProgram","expandByPoint","getCorners","Matrix3","Eye","Diagonal","RotationFromQuaternion","RotationFromEuler","cx","SingleSplat","index","_index","_bounds","Infinity","_defaultColor","subarray","recalculateBounds","pos","Position","scl","Scale","rotate","R","rot","Rotation","currentRotation","newRot","Selected","Rendered","Color","colorVector","colorIndex","ResetColor","bounds","PositionVec3","ScaleVec3","setTransparency","setBlending","Constants","BYTE_OFFSET_FLOAT","BYTE_OFFSET_DOUBLE","BYTE_OFFSET_INT","OctreeIterator","root","region","reset","indices","result","done","next","octant","children","child","pop","Symbol","iterator","_vector","NewRay","origin","ray","at","target","intersectPlane","plane","distanceToPlane","denominator","normal","distanceToPoint","constant","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","isNaN","Constructor","d","r","flags","octantTable","findNextOctant","currentOctant","tx1","ty1","tz1","exit","raycastOctant","node","tx0","ty0","tz0","c","txm","tym","tzm","f","entry","findEntryOctant","OctreeRaycaster","intersectOctree","octree","dimensions","getDimensions","halfDimensions","getCenter","Number","EPSILON","invDirX","invDirY","invDirZ","getDepth","cull","findNodesByLevel","level","Octree","getIntersectingNodes","raycaster","leaves","layout","Octant","split","mid","combination","PointContainer","distance","RayPointIntersection","distanceToOrigin","distanceToRay","PointData","testPoints","threshold","params","Points","thresholdSq","distanceToRaySq","closestPoint","near","far","p","PointOctant","distanceToCenterSquared","bias","redistribute","pointData","il","j","jl","childData","merge","concat","countPoints","exists","getBias","getMaxPoints","getMaxDepth","remove","parent","last","move","findNearestPoint","maxDistance","skipSelf","bestDistance","sortedChildren","map","sort","intermediateResult","findPoints","radius","rSq","dSq","PointOctree","maxPoints","maxDepth","round","POSITIVE_INFINITY","raycast","octants","Splat","splat","selectedChanged","renderNumberChanged","colorTransformChanged","_splats","_selected","_colorTransforms","_colorTransformsMap","_numberOfSplats","_numberOfRenderedSplats","selected","Array","applySelection","applyRendering","createSplatsData","createOctree","time","singleSplat","Promise","resolve","timeEnd","_octree","positionVector","saveToFile","name","format","document","now","Date","getFullYear","getMonth","getDate","blob","plyData","Blob","link","createElement","download","href","URL","createObjectURL","click","splats","getSplatAtIndex","selectSplat","renderSplat","updateRenderingOfSplats","colorTransforms","colorTransformsMap","splatCount","numberOfRenderedSplats","Positions","Scales","Rotations","Colors","Selections","Splatv","CameraData","_fx","_fy","_near","_far","_projectionMatrix","_viewMatrix","_viewProj","_updateProjectionMatrix","fx","fy","setSize","viewProj","inverseViewMatrix","Vector4","Camera","worldToScreenPoint","worldPoint","worldSpaceCoords","cameraSpaceCoors","clipSpaceCoords","worldToCameraPoint","cameraSpaceCoords","cameraCoords","screenToWorldPoint","inverseProjectionMatrix","screenPointToRay","Scene","_objects","addObject","objects","removeObject","indexOf","splice","findObject","predicate","findObjectOfType","objectsToRemove","slice","buffers","async","initiateFetchRequest","url","useCache","req","fetch","mode","credentials","cache","status","loadRequestDataIntoBuffer","res","onProgress","headers","reader","body","getReader","contentLength","parseInt","bytesRead","read","loadDataIntoBuffer","chunks","receivedLength","chunk","loadChunkedDataIntoBuffer","Loader","LoadAsync","LoadFromArrayBuffer","LoadFromFileAsync","file","FileReader","onload","onprogress","loaded","total","readAsArrayBuffer","onloadend","arrayBuffer","PLYLoader","_ParsePLYBuffer","inputBuffer","ubuf","headerText","TextDecoder","decode","header_end","header_end_index","exec","rowOffset","offsets","double","int","uint","float","short","ushort","uchar","prop","filter","k","startsWith","_p","dataView","q_polycam","rgba","Uint8ClampedArray","r0","r1","r2","r3","getFloat32","getInt32","exp","temp","SplatvLoader","_ParseSplatvBuffer","splatv","handleChunk","intView","Int32Array","splatChunks","JSON","parse","warn","cameras","cameraData","texwidth","texheight","shift","inputOffset","sizeToRead","loadWasm","moduleArg","readyPromiseResolve","readyPromiseReject","readBinary","Module","readyPromise","reject","moduleOverrides","Object","assign","scriptDirectory","self","location","substr","replace","lastIndexOf","xhr","XMLHttpRequest","open","responseType","send","response","bind","wasmBinary","wasmMemory","err","tryParseAsDataURI","filename","isDataURI","decoded","atob","bytes","charCodeAt","intArrayFromBase64","dataURIPrefix","HEAP8","HEAPU8","HEAP16","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","ABORT","updateMemoryViews","Int8Array","Int16Array","Uint16Array","Float64Array","wasmBinaryFile","__ATPRERUN__","__ATINIT__","__ATPOSTRUN__","runDependencies","dependenciesFulfilled","getBinaryPromise","binaryFile","then","binary","getBinarySync","instantiateArrayBuffer","imports","receiver","WebAssembly","instantiate","reason","what","RuntimeError","abort","callRuntimeCallbacks","callbacks","embind_charCodes","BindingError","readLatin1String","ptr","ret","awaitingDependencies","registeredTypes","throwBindingError","message","registerType","rawType","registeredInstance","options","TypeError","hasOwnProperty","ignoreDuplicateRegistrations","cb","sharedRegisterType","emval_freelist","emval_handles","count_emval_handles","Emval","handle","readPointer","pointer","EmValType","fromWireType","rv","__emval_decref","toWireType","destructors","argPackAdvance","readValueFromPointer","destructorFunction","floatReadValueFromPointer","integerReadValueFromPointer","signed","UTF8Decoder","UTF8ToString","maxBytesToRead","heapOrArray","idx","endIdx","endPtr","str","u0","u1","u2","String","fromCharCode","ch","UTF8ArrayToString","UTF16Decoder","UTF16ToString","maxIdx","codeUnit","stringToUTF16","outPtr","maxBytesToWrite","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","stringToUTF32","lengthBytesUTF32","len","growMemory","pages","grow","codes","embind_init_charCodes","wasmImports","primitiveType","minRange","maxRange","h","trueValue","falseValue","wt","o","g","bitshift","isUnsignedType","includes","dataTypeIndex","TA","decodeMemoryView","stdStringIsUTF8","payload","decodeStartPtr","currentBytePtr","stringSegment","_free","valueIsOfTypeString","lengthBytesUTF8","base","_malloc","heap","outIdx","u","startIdx","stringToUTF8Array","charCode","charSize","decodeString","encodeString","readCharAt","lengthBytesUTF","isVoid","requestedSize","oldSize","maxHeapSize","multiple","cutDown","overGrownHeapSize","newSize","wasmExports","callback","info","receiveInstance","instance","module","exports","unshift","id","removeRunDependency","catch","createWasm","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","a11","calledRun","run","doRun","postRun","preRun","setTimeout","runCaller","RenderData","dataChanged","transformsChanged","colorTransformsChanged","_updating","_dirty","splatIndex","_splatIndices","_singleSplatIndices","_offsets","_singleOffsets","lookup","singlelookup","ceil","_transformsWidth","_transformsHeight","_transforms","_transformIndicesWidth","_transformIndicesHeight","_transformIndices","_colorTransformsWidth","_colorTransformsHeight","_colorTransformIndicesWidth","_colorTransformIndicesHeight","_colorTransformIndices","colorTransformIndices","_worker","DataWorker","updateRenderData","updateTransform","updateColorTransforms","keys","colorTransform","colorTransformIndex","wasmModule","onmessage","renderedFrame","worldPositions","worldRotations","worldScales","initWasm","buildImmediate","waitForWasm","positionsPtr","rotationsPtr","scalesPtr","colorsPtr","selectionPtr","renderedPtr","dataPtr","worldPositionsPtr","worldRotationsPtr","worldScalesPtr","_pack","outData","build","serializedSplat","postMessage","getSplat","key","getLocalIndex","markDirty","rebuild","clear","terminate","singleOffsets","transforms","transformsWidth","transformsHeight","transformIndices","transformIndicesWidth","transformIndicesHeight","colorTransformsWidth","colorTransformsHeight","colorTransformIndicesWidth","colorTransformIndicesHeight","needsRebuild","updating","Color32","flatNorm","toHexString","padStart","RenderProgram","_outlineThickness","_outlineColor","_renderData","_depthIndex","_splatTexture","canvas","u_viewport","u_focal","u_texture","u_transforms","u_transformIndices","u_colorTransforms","u_colorTransformIndices","u_outlineThickness","u_outlineColor","indexAttribute","transformsTexture","transformIndicesTexture","colorTransformsTexture","colorTransformIndicesTexture","indexBuffer","uniform2fv","createWorker","SortWorker","depthIndex","handleObjectAdded","handleObjectRemoved","handleObjectChanged","handleRenderedSplatsChanged","uniform1f","outlineThickness","outlineColor","createTexture","uniform1i","resetSplatData","_a","_b","renderData","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","splatTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32UI","RGBA_INTEGER","UNSIGNED_INT","TEXTURE1","RGBA32F","RGBA","TEXTURE2","R32UI","RED_INTEGER","TEXTURE3","TEXTURE4","detachedPositions","detachedTransforms","detachedTransformIndices","sortData","viewport","clearColor","COLOR_BUFFER_BIT","disable","DEPTH_TEST","blendFuncSeparate","ONE_MINUS_DST_ALPHA","ONE","blendEquationSeparate","FUNC_ADD","vertexAttribIPointer","INT","vertexAttribDivisor","drawArraysInstanced","TRIANGLE_FAN","deleteTexture","deleteBuffer","_setOutlineThickness","_setOutlineColor","worker","FadeInPass","speed","renderProgram","u_useDepthFade","u_depthFade","active","WebGLRenderer","optionalCanvas","optionalRenderPasses","_backgroundColor","style","display","boxSizing","margin","padding","appendChild","background","_canvas","_gl","getContext","antialias","renderPasses","_renderProgram","_customPrograms","programs","clientWidth","clientHeight","removeAllPrograms","backgroundColor","OrbitControls","beta","enableKeyboardControls","inputTarget","enabled","minAngle","maxAngle","minZoom","maxZoom","orbitSpeed","panSpeed","zoomSpeed","dampening","setCameraTarget","desiredTarget","desiredAlpha","desiredBeta","desiredRadius","dragging","panning","lastDist","lastX","lastY","isUpdatingCamera","eulerRotation","newTarget","computeZoomNorm","onKeyDown","code","onKeyUp","onMouseDown","preventDefault","button","clientX","clientY","window","onMouseUp","onMouseMove","zoomNorm","panX","panY","right","up","onWheel","deltaY","onTouchStart","touches","distX","distY","onTouchEnd","onTouchMove","dist","touchX","touchY","rx","ry","moveSpeed","rotateSpeed","stopPropagation","FPSControls","lookSpeed","pitch","yaw","targetPosition","pointerLock","requestPointerLock","onPointerLockChange","pointerLockElement","mouseX","movementX","mouseY","movementY","exitPointerLock","Plane","setFromCoplanarPoints","v1","v2","setComponents","intersect","inverseNormalLength","ShaderPass","VideoRenderProgram","u_time","setupWorker","dummyTransforms","dummyTransformIndices","BVHNode$1","BVHNode","boxes","pointIndices","left","leftIndices","rightIndices","queryRange","range","BVH","_","IntersectionTester","resolution","bvh","singleSplatLookup","testLayer","positiveDirection","splatBounds","testPoint","startTimeSplat","performance","duration","startTimeSingleSplat","singleSplatBoxes","singleSplatbounds","durationSingleSplat","minPoint","maxPoint","queryBox","testPointSingleSplats","obj","Ray","getPoint","CameraHelper","_cameraData","_frustumCorners","calculateFrustum","fovX","fovY","halfHeightNear","tan","halfWidthNear","halfHeightFar","halfWidthFar","nearTopLeft","nearTopRight","nearBottomLeft","nearBottomRight","farTopLeft","farTopRight","farBottomLeft","farBottomRight","cameraToWorldCoords","pointInFrustum","planes","createPlane","ab","ac","FrustumPlane","Utils","draw","upperLeftCorner","bottomRightCorner","drawCone","vecs","Raycaster","buildBVH","testBox","point1","point2","testCameraViewFrustum","showFrustum","showForSeconds","camHelper","AxisProgram","xVertices","yVertices","zVertices","xColor","yColor","zColor","drawAxis","GridProgram","PlaneProgram","planeColor","drawPlane","getPlaneVertices","halfSize","MultibleCubesProgram","upperLeftCorners","bottomRightCorners","tempAllCorners","tempAllSurface","numberOfCubes","allCorners","allsurface","RayProgram","OctreeHelper","intersectPlanes","p1","p2","p3","n1","n2","n3","c1","c2","c3","n2n3","n3n1","n1n2","Frustum","p0","p4","p5","needsUpdate","setFromCube","cube","projectedPoints","setFromPoints","setFromProjectionMatrix","me","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","planeRenderProgram","getFrustumPoints","frustumCorners","drawFrustum","frustumRenderProgram","minDistance","ereaseFrustum","getRays","rays","nearCorner","intersectFrustum","otherFrustum","intersectionPoints","boundingBox","containsPoint","containsBox","corner","NewRaycaster","Mesh","Line","LOD","Sprite"],"mappings":"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EAAE,IAAMA,EAAE,GAAKA,EAAE,KAEtIuE,IACKvE,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,KAEvIuE,GACIvE,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAEnIuE,IACKvE,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAElIuE,IACKvE,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,KAEvIuE,GACIvE,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAMA,EAAE,IAAMA,EAAE,GAAKA,EAAE,KAEtIuE,IACKvE,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAAMA,EAAE,GAAKA,EAAE,GAAKA,EA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"}